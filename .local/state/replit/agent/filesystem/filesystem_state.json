{"file_contents":{"client/src/components/examples/ScanResults.tsx":{"content":"import ScanResults from \"../ScanResults\";\n\nexport default function ScanResultsExample() {\n  const mockRecords = [\n    {\n      type: \"SPF\",\n      status: \"PASS\" as const,\n      record: \"v=spf1 include:_spf.google.com ~all\",\n    },\n    {\n      type: \"DKIM\",\n      status: \"WARN\" as const,\n      record: \"v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4...\",\n      issues: [\"Weak key size (1024-bit)\"],\n      suggestions: [\"Upgrade to 2048-bit RSA key\"],\n    },\n    {\n      type: \"DMARC\",\n      status: \"FAIL\" as const,\n      issues: [\"No DMARC record found\"],\n      suggestions: [\"Add DMARC record: v=DMARC1; p=quarantine; rua=mailto:dmarc@example.com\"],\n    },\n    {\n      type: \"BIMI\",\n      status: \"FAIL\" as const,\n      issues: [\"BIMI not configured\"],\n      suggestions: [\"Optional: Add BIMI record for brand logo in inbox\"],\n    },\n    {\n      type: \"MX\",\n      status: \"PASS\" as const,\n      record: \"10 mx1.example.com, 20 mx2.example.com\",\n    },\n  ];\n\n  return (\n    <ScanResults\n      domain=\"example.com\"\n      overallStatus=\"WARN\"\n      criticalIssues={1}\n      records={mockRecords}\n      onGenerateReport={() => console.log(\"Generate report triggered\")}\n      onShare={() => console.log(\"Share triggered\")}\n    />\n  );\n}\n","size_bytes":1231},"client/src/components/DomainCard.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, RefreshCw } from \"lucide-react\";\nimport StatusBadge from \"./StatusBadge\";\n\ninterface DomainCardProps {\n  domain: string;\n  lastScanDate: string;\n  status: \"PASS\" | \"WARN\" | \"FAIL\";\n  criticalIssues: number;\n  onRescan?: () => void;\n  onViewDetails?: () => void;\n}\n\nexport default function DomainCard({\n  domain,\n  lastScanDate,\n  status,\n  criticalIssues,\n  onRescan,\n  onViewDetails,\n}: DomainCardProps) {\n  return (\n    <Card className=\"p-6\" data-testid={`card-domain-${domain}`}>\n      <div className=\"flex items-start justify-between mb-4\">\n        <div className=\"flex-1\">\n          <h3 className=\"text-xl font-semibold mb-2\" data-testid={`text-domain-name-${domain}`}>\n            {domain}\n          </h3>\n          <p className=\"text-sm text-muted-foreground mb-3\">\n            Last scan: {lastScanDate}\n          </p>\n          <StatusBadge status={status} />\n        </div>\n      </div>\n\n      {criticalIssues > 0 && (\n        <div className=\"mb-4 p-3 bg-destructive/10 rounded-md\">\n          <p className=\"text-sm text-destructive font-medium\">\n            {criticalIssues} critical {criticalIssues === 1 ? \"issue\" : \"issues\"} found\n          </p>\n        </div>\n      )}\n\n      <div className=\"flex gap-2\">\n        <Button\n          variant=\"outline\"\n          className=\"flex-1\"\n          onClick={onRescan}\n          data-testid={`button-rescan-${domain}`}\n        >\n          <RefreshCw className=\"h-4 w-4 mr-2\" />\n          Rescan\n        </Button>\n        <Button\n          variant=\"default\"\n          className=\"flex-1\"\n          onClick={onViewDetails}\n          data-testid={`button-view-details-${domain}`}\n        >\n          <ExternalLink className=\"h-4 w-4 mr-2\" />\n          View Details\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","size_bytes":1879},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        success: {\n          DEFAULT: \"hsl(var(--success) / <alpha-value>)\",\n          foreground: \"hsl(var(--success-foreground) / <alpha-value>)\",\n        },\n        warning: {\n          DEFAULT: \"hsl(var(--warning) / <alpha-value>)\",\n          foreground: \"hsl(var(--warning-foreground) / <alpha-value>)\",\n        },\n        info: {\n          DEFAULT: \"hsl(var(--info) / <alpha-value>)\",\n          foreground: \"hsl(var(--info-foreground) / <alpha-value>)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4348},"client/src/components/examples/StatusBadge.tsx":{"content":"import StatusBadge from \"../StatusBadge\";\n\nexport default function StatusBadgeExample() {\n  return (\n    <div className=\"flex gap-3\">\n      <StatusBadge status=\"PASS\" />\n      <StatusBadge status=\"WARN\" />\n      <StatusBadge status=\"FAIL\" />\n    </div>\n  );\n}\n","size_bytes":260},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"server/middleware/planLimits.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\nexport interface RequestWithPlanCheck extends Request {\n  planLimit?: {\n    plan: string;\n    maxDomains: number;\n    features: Record<string, boolean>;\n  };\n}\n\nexport function requireCapacity(resource: 'domains') {\n  return async (req: RequestWithPlanCheck, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = req.user as any;\n    const userId = user.id;\n    const userPlan = user.plan || \"Free\";\n\n    // Get plan limits\n    const planLimit = await storage.getPlanLimit(userPlan);\n    if (!planLimit) {\n      return res.status(500).json({ error: \"Plan configuration not found\" });\n    }\n\n    // Check capacity based on resource type\n    if (resource === 'domains') {\n      const userDomains = await storage.getDomainsByUserId(userId);\n      \n      if (userDomains.length >= planLimit.maxDomains) {\n        return res.status(403).json({\n          error: \"Domain limit reached\",\n          currentCount: userDomains.length,\n          maxAllowed: planLimit.maxDomains,\n          plan: userPlan,\n          upgradeRequired: true,\n        });\n      }\n    }\n\n    // Attach plan info to request for later use\n    req.planLimit = {\n      plan: userPlan,\n      maxDomains: planLimit.maxDomains,\n      features: planLimit.features as Record<string, boolean>,\n    };\n\n    next();\n  };\n}\n\nexport function requireFeature(feature: string) {\n  return async (req: RequestWithPlanCheck, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = req.user as any;\n    const userPlan = user.plan || \"Free\";\n\n    // Get plan limits\n    const planLimit = await storage.getPlanLimit(userPlan);\n    if (!planLimit) {\n      return res.status(500).json({ error: \"Plan configuration not found\" });\n    }\n\n    const features = planLimit.features as Record<string, boolean>;\n    \n    if (!features[feature]) {\n      return res.status(403).json({\n        error: `Feature not available on ${userPlan} plan`,\n        feature,\n        plan: userPlan,\n        upgradeRequired: true,\n      });\n    }\n\n    next();\n  };\n}\n","size_bytes":2307},"server/services/scoring.ts":{"content":"import type { DNSScanResult } from \"../lib/dns-scanner\";\n\nexport interface ScoreBreakdown {\n  spf: { pass: number; alignment: number };\n  dkim: { pass: number; keyStrength: number };\n  dmarc: { policy: number };\n  bimi: { present: number; valid: number };\n  mx: { sane: number };\n  warnings: { count: number; penalty: number };\n  fails: { count: number; penalty: number };\n  total: number;\n}\n\nexport function calculateDeliverabilityScore(scan: DNSScanResult): { score: number; breakdown: ScoreBreakdown } {\n  const breakdown: ScoreBreakdown = {\n    spf: { pass: 0, alignment: 0 },\n    dkim: { pass: 0, keyStrength: 0 },\n    dmarc: { policy: 0 },\n    bimi: { present: 0, valid: 0 },\n    mx: { sane: 0 },\n    warnings: { count: 0, penalty: 0 },\n    fails: { count: 0, penalty: 0 },\n    total: 0,\n  };\n\n  if (scan.spf.status === \"PASS\") {\n    breakdown.spf.pass = 10;\n    if (scan.spf.record && scan.spf.record.includes(\"-all\")) {\n      breakdown.spf.alignment = 10;\n    } else if (scan.spf.record && scan.spf.record.includes(\"~all\")) {\n      breakdown.spf.alignment = 5;\n    }\n  }\n\n  if (scan.dkim.status === \"PASS\") {\n    breakdown.dkim.pass = 20;\n    for (const selector of scan.dkim.selectors) {\n      if (selector.status === \"PASS\" && selector.record) {\n        if (selector.record.includes(\"k=rsa\") && selector.record.length > 400) {\n          breakdown.dkim.keyStrength = 10;\n          break;\n        }\n      }\n    }\n  }\n\n  if (scan.dmarc.record) {\n    if (scan.dmarc.record.includes(\"p=reject\")) {\n      breakdown.dmarc.policy = 20;\n    } else if (scan.dmarc.record.includes(\"p=quarantine\")) {\n      breakdown.dmarc.policy = 10;\n    }\n  }\n\n  if (scan.bimi.record) {\n    breakdown.bimi.present = 5;\n    if (scan.bimi.status === \"PASS\") {\n      breakdown.bimi.valid = 5;\n    }\n  }\n\n  if (scan.mx.status !== \"FAIL\") {\n    breakdown.mx.sane = 10;\n  }\n\n  let warningCount = 0;\n  let failCount = 0;\n\n  if (scan.spf.status === \"WARN\") warningCount += scan.spf.issues.length;\n  if (scan.spf.status === \"FAIL\") failCount += scan.spf.issues.length;\n  \n  if (scan.dkim.status === \"WARN\") warningCount += 1;\n  if (scan.dkim.status === \"FAIL\") failCount += 1;\n  \n  if (scan.dmarc.status === \"WARN\") warningCount += scan.dmarc.issues.length;\n  if (scan.dmarc.status === \"FAIL\") failCount += scan.dmarc.issues.length;\n  \n  if (scan.bimi.status === \"WARN\") warningCount += 1;\n  if (scan.bimi.status === \"FAIL\") failCount += 1;\n  \n  if (scan.mx.status === \"WARN\") warningCount += 1;\n  if (scan.mx.status === \"FAIL\") failCount += 1;\n\n  breakdown.warnings.count = warningCount;\n  breakdown.warnings.penalty = warningCount * 5;\n  \n  breakdown.fails.count = failCount;\n  breakdown.fails.penalty = failCount * 10;\n\n  const rawScore =\n    breakdown.spf.pass +\n    breakdown.spf.alignment +\n    breakdown.dkim.pass +\n    breakdown.dkim.keyStrength +\n    breakdown.dmarc.policy +\n    breakdown.bimi.present +\n    breakdown.bimi.valid +\n    breakdown.mx.sane -\n    breakdown.warnings.penalty -\n    breakdown.fails.penalty;\n\n  breakdown.total = Math.max(0, Math.min(100, rawScore));\n\n  return { score: breakdown.total, breakdown };\n}\n\nexport function getScoreBadge(score: number): { label: string; variant: string } {\n  if (score >= 85) return { label: \"Excellent\", variant: \"success\" };\n  if (score >= 70) return { label: \"Good\", variant: \"default\" };\n  if (score >= 50) return { label: \"Needs Work\", variant: \"warning\" };\n  return { label: \"Poor\", variant: \"destructive\" };\n}\n","size_bytes":3456},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"server/auth-routes.ts":{"content":"import { type Express } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport { passport } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { trackEvent, AppEventType } from \"./services/analytics\";\n\nconst signupSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport function registerAuthRoutes(app: Express) {\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const parsed = signupSchema.safeParse(req.body);\n      if (!parsed.success) {\n        return res.status(400).json({ \n          error: \"Invalid input\", \n          details: parsed.error.errors[0].message \n        });\n      }\n\n      const { email, password } = parsed.data;\n\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({ error: \"Email already in use\" });\n      }\n\n      const passwordHash = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({ email, passwordHash });\n\n      // Track registration event\n      await trackEvent(storage, AppEventType.USER_REGISTERED, user.id, { email: user.email });\n\n      res.json({ success: true, user: { id: user.id, email: user.email } });\n    } catch (error: any) {\n      console.error(\"Signup error:\", error);\n      res.status(500).json({ error: \"Failed to create account\" });\n    }\n  });\n\n  app.post(\"/api/auth/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        console.error(\"Login authentication error:\", err);\n        return res.status(500).json({ error: \"Authentication failed\" });\n      }\n      if (!user) {\n        console.log(\"Login failed - no user:\", info?.message);\n        return res.status(401).json({ error: info?.message || \"Invalid credentials\" });\n      }\n\n      console.log(\"Login successful for user:\", user.email, \"ID:\", user.id);\n      \n      req.logIn(user, (err) => {\n        if (err) {\n          console.error(\"req.logIn error:\", err);\n          return res.status(500).json({ error: \"Login failed\" });\n        }\n        \n        console.log(\"req.logIn successful, session ID:\", req.sessionID);\n        console.log(\"Session before save:\", { \n          sessionID: req.sessionID, \n          isAuthenticated: req.isAuthenticated(),\n          userId: req.user ? (req.user as any).id : null \n        });\n        \n        req.session.save((err) => {\n          if (err) {\n            console.error(\"Session save error:\", err);\n            return res.status(500).json({ error: \"Session save failed\" });\n          }\n          \n          console.log(\"Session saved successfully:\", {\n            sessionID: req.sessionID,\n            isAuthenticated: req.isAuthenticated(),\n            userId: req.user ? (req.user as any).id : null\n          });\n          \n          // Track login event\n          trackEvent(storage, AppEventType.USER_LOGIN, user.id, { email: user.email });\n          \n          return res.json({ success: true, user: { id: user.id, email: user.email } });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: \"Logout failed\" });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/auth/session\", (req, res) => {\n    console.log(\"Session check:\", {\n      sessionID: req.sessionID,\n      isAuthenticated: req.isAuthenticated(),\n      hasUser: !!req.user,\n      userId: req.user ? (req.user as any).id : null\n    });\n    \n    if (req.isAuthenticated() && req.user) {\n      const user = req.user as any;\n      res.json({ \n        authenticated: true, \n        user: { \n          id: user.id, \n          email: user.email,\n          stripeCustomerId: user.stripeCustomerId,\n          stripeSubscriptionId: user.stripeSubscriptionId,\n          isPro: user.isPro\n        } \n      });\n    } else {\n      res.json({ authenticated: false, user: null });\n    }\n  });\n}\n\nexport function requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Unauthorized\" });\n  }\n  next();\n}\n","size_bytes":4267},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/pages/subscribe.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Elements, PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2 } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error(\"Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY\");\n}\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nfunction SubscribeForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/dashboard?upgraded=true`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={!stripe || isProcessing}\n        data-testid=\"button-confirm-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          \"Subscribe to Pro - $19/month\"\n        )}\n      </Button>\n    </form>\n  );\n}\n\nexport default function SubscribePage() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [, setLocation] = useLocation();\n  const { isAuthenticated, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (authLoading) return;\n\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    const params = new URLSearchParams(window.location.search);\n    if (params.get(\"upgraded\") === \"true\") {\n      apiRequest(\"GET\", \"/api/subscription-status\", {})\n        .then((res) => res.json())\n        .then(() => {\n          toast({\n            title: \"Welcome to Pro!\",\n            description: \"Your subscription is now active.\",\n          });\n          setLocation(\"/dashboard\");\n        })\n        .catch((error) => {\n          console.error(\"Failed to check subscription status:\", error);\n          setLocation(\"/dashboard\");\n        });\n      return;\n    }\n\n    apiRequest(\"POST\", \"/api/get-or-create-subscription\", {})\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.status === \"active\") {\n          toast({\n            title: \"Already Subscribed\",\n            description: \"You're already a Pro member!\",\n          });\n          setLocation(\"/dashboard\");\n          return;\n        }\n        \n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          toast({\n            title: \"Error\",\n            description: \"Failed to initialize payment\",\n            variant: \"destructive\",\n          });\n        }\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Subscription error:\", error);\n        toast({\n          title: \"Error\",\n          description: \"Failed to create subscription\",\n          variant: \"destructive\",\n        });\n        setIsLoading(false);\n      });\n  }, [isAuthenticated, authLoading, setLocation, toast]);\n\n  if (authLoading || isLoading) {\n    return (\n      <div className=\"min-h-[calc(100vh-64px)] flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" data-testid=\"loader-subscribe\" />\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-[calc(100vh-64px)] flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader>\n            <CardTitle>Subscription Error</CardTitle>\n            <CardDescription>Unable to initialize payment</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Button onClick={() => setLocation(\"/pricing\")} className=\"w-full\">\n              Back to Pricing\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-[calc(100vh-64px)] flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Subscribe to Pro</CardTitle>\n          <CardDescription>\n            Complete your payment to unlock unlimited scans and premium features\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Elements stripe={stripePromise} options={{ clientSecret }}>\n            <SubscribeForm />\n          </Elements>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5348},"client/src/pages/not-found.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { FileQuestion } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[70vh] px-6\">\n      <Card className=\"max-w-md w-full\">\n        <CardContent className=\"flex flex-col items-center text-center p-8\">\n          <FileQuestion className=\"h-16 w-16 text-muted-foreground mb-4\" />\n          <h1 className=\"text-3xl font-bold mb-2\">404 - Not Found</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            The page or report you're looking for doesn't exist or may have expired.\n          </p>\n          <Link href=\"/dashboard\">\n            <Button data-testid=\"button-back-dashboard\">\n              Back to Dashboard\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":942},"client/src/pages/scan.tsx":{"content":"import ScanResults from \"@/components/ScanResults\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function ScanPage() {\n  const [scanData, setScanData] = useState<any>(null);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n\n  useEffect(() => {\n    const stored = sessionStorage.getItem(\"scanResult\");\n    if (stored) {\n      setScanData(JSON.parse(stored));\n    } else {\n      setLocation(\"/\");\n    }\n  }, [setLocation]);\n\n  const saveAndShareMutation = useMutation({\n    mutationFn: async () => {\n      if (!scanData.domain) {\n        throw new Error(\"Domain information missing\");\n      }\n      const res = await apiRequest(\"POST\", \"/api/scan\", {\n        domain: scanData.domain,\n        save: true,\n      });\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.reportSlug) {\n        setLocation(`/report/${data.reportSlug}`);\n        toast({\n          title: \"Scan saved!\",\n          description: \"Your scan has been saved and is ready to share.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to save scan\",\n        description: error.message || \"Unable to save scan. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const generateReportMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/report\", {\n        domainId: null,\n        scanJson: scanData,\n      });\n      return await res.json();\n    },\n    onSuccess: (report: any) => {\n      setLocation(`/report/${report.slug}`);\n      toast({\n        title: \"Report generated\",\n        description: \"Your report is ready to share!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to generate report\",\n        description: \"Unable to create shareable report. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleShare = () => {\n    navigator.clipboard.writeText(window.location.href);\n    toast({\n      title: \"Link copied\",\n      description: \"Scan results link copied to clipboard\",\n    });\n  };\n\n  if (!scanData) {\n    return null;\n  }\n\n  const records = [\n    { type: \"SPF\", ...scanData.spf },\n    ...(scanData.dkim.selectors || []).map((s: any) => ({\n      type: `DKIM (${s.selector})`,\n      status: s.status,\n      record: s.record,\n      issues: s.issues,\n      suggestions: s.suggestions,\n    })),\n    { type: \"DMARC\", ...scanData.dmarc },\n    { type: \"BIMI\", ...scanData.bimi },\n    { type: \"MX\", ...scanData.mx },\n  ];\n\n  return (\n    <ScanResults\n      domain={scanData.domain}\n      overallStatus={scanData.summary.overall}\n      criticalIssues={scanData.summary.criticalIssues}\n      records={records}\n      onGenerateReport={() => generateReportMutation.mutate()}\n      onSaveAndShare={isAuthenticated ? () => saveAndShareMutation.mutate() : undefined}\n      onShare={handleShare}\n      isAuthenticated={isAuthenticated}\n    />\n  );\n}\n","size_bytes":3241},"client/src/pages/report.tsx":{"content":"import PublicReport from \"@/components/PublicReport\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileQuestion } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function ReportPage() {\n  const [, params] = useRoute(\"/report/:slug\");\n  const slug = params?.slug || \"\";\n\n  const { data, isLoading } = useQuery({\n    queryKey: [\"/api/report\", slug],\n    queryFn: () => fetch(`/api/report/${slug}`).then(r => r.json()),\n    enabled: !!slug,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-5xl mx-auto px-6 py-12\">\n        <Card className=\"p-8 mb-6\">\n          <div className=\"flex items-start justify-between mb-6\">\n            <div className=\"flex-1\">\n              <Skeleton className=\"h-9 w-64 mb-2\" />\n              <Skeleton className=\"h-5 w-48 mb-4\" />\n              <Skeleton className=\"h-6 w-24\" />\n            </div>\n            <div className=\"flex gap-2\">\n              <Skeleton className=\"h-9 w-9\" />\n              <Skeleton className=\"h-9 w-9\" />\n              <Skeleton className=\"h-9 w-9\" />\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-4 mb-8 p-4 bg-muted rounded-lg\">\n            <div>\n              <Skeleton className=\"h-4 w-24 mb-1\" />\n              <Skeleton className=\"h-8 w-12\" />\n            </div>\n            <div>\n              <Skeleton className=\"h-4 w-16 mb-1\" />\n              <Skeleton className=\"h-8 w-12\" />\n            </div>\n            <div>\n              <Skeleton className=\"h-4 w-16 mb-1\" />\n              <Skeleton className=\"h-8 w-12\" />\n            </div>\n          </div>\n        </Card>\n\n        <div className=\"space-y-6\">\n          <Skeleton className=\"h-8 w-48\" />\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i} className=\"p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <Skeleton className=\"h-6 w-24 mb-2\" />\n                    <Skeleton className=\"h-6 w-16\" />\n                  </div>\n                  <Skeleton className=\"h-9 w-9\" />\n                </div>\n                <Skeleton className=\"h-16 w-full mb-4\" />\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!data || !data.report) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[70vh] px-6\">\n        <Card className=\"max-w-md w-full\">\n          <CardContent className=\"flex flex-col items-center text-center p-8\">\n            <FileQuestion className=\"h-16 w-16 text-muted-foreground mb-4\" />\n            <h1 className=\"text-3xl font-bold mb-2\">404 - Report Not Found</h1>\n            <p className=\"text-muted-foreground mb-6\">\n              This report doesn't exist or may have expired.\n            </p>\n            <Link href=\"/dashboard\">\n              <Button data-testid=\"button-back-dashboard\">\n                Back to Dashboard\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const scanData = data.report.scanJson;\n  const records = [\n    { type: \"SPF\", ...scanData.spf },\n    ...(scanData.dkim.selectors || []).map((s: any) => ({\n      type: `DKIM (${s.selector})`,\n      status: s.status,\n      record: s.record,\n      issues: s.issues,\n      suggestions: s.suggestions,\n    })),\n    { type: \"DMARC\", ...scanData.dmarc },\n    { type: \"BIMI\", ...scanData.bimi },\n    { type: \"MX\", ...scanData.mx },\n  ];\n\n  return (\n    <PublicReport\n      slug={slug}\n      domain={scanData.domain}\n      domainId={data.domain?.id}\n      domainUserId={data.domain?.userId}\n      scanDate={formatDistanceToNow(new Date(data.report.createdAt), { addSuffix: true })}\n      overallStatus={scanData.summary.overall}\n      records={records}\n    />\n  );\n}\n","size_bytes":4252},"client/src/components/NavBar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Shield, User, LogOut, Settings } from \"lucide-react\";\nimport ThemeToggle from \"./ThemeToggle\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function NavBar() {\n  const [location] = useLocation();\n  const { user, isAuthenticated, logout } = useAuth();\n\n  const navItems = [\n    { path: \"/template-lint\", label: \"Template Lint\", show: true },\n    { path: \"/dashboard\", label: \"Dashboard\", show: isAuthenticated },\n  ].filter(item => item.show);\n\n  return (\n    <nav className=\"border-b border-border bg-background sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-6 py-4 flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center gap-2 hover-elevate rounded-md px-2 py-1\" data-testid=\"link-home\">\n          <Shield className=\"h-6 w-6 text-primary\" />\n          <span className=\"font-bold text-lg\">Deliverability Copilot</span>\n        </Link>\n\n        <div className=\"flex items-center gap-6\">\n          {navItems.map((item) => (\n            <Link\n              key={item.path}\n              href={item.path}\n              className={`text-sm font-medium transition-colors hover:text-primary ${\n                location === item.path ? \"text-foreground\" : \"text-muted-foreground\"\n              }`}\n              data-testid={`link-nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n            >\n              {item.label}\n            </Link>\n          ))}\n          <ThemeToggle />\n          {isAuthenticated ? (\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-user-menu\">\n                  <User className=\"h-5 w-5\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem disabled className=\"text-xs text-muted-foreground\">\n                  {user?.email}\n                </DropdownMenuItem>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem asChild>\n                  <Link href=\"/settings\" data-testid=\"link-settings\">\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Settings\n                  </Link>\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => logout()} data-testid=\"button-logout\">\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Logout\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          ) : (\n            <>\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-nav-login\">\n                  Sign In\n                </Button>\n              </Link>\n              <Link href=\"/signup\">\n                <Button size=\"sm\" data-testid=\"button-nav-signup\">\n                  Sign Up\n                </Button>\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3241},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { passport } from \"./auth\";\nimport { pool } from \"./db\";\n\nconst app = express();\napp.use((req, res, next) => {\n  if (req.path === \"/api/stripe/webhook\") {\n    next();\n  } else {\n    express.json()(req, res, next);\n  }\n});\napp.use(express.urlencoded({ extended: false }));\n\nconst PgStore = connectPgSimple(session);\n\napp.set(\"trust proxy\", 1);\n\napp.use(\n  session({\n    store: new PgStore({\n      pool: pool,\n      tableName: \"user_sessions\",\n      createTableIfMissing: true,\n    }),\n    secret: process.env.SESSION_SECRET || \"fallback-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    proxy: true,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      sameSite: \"none\",\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n    },\n  })\n);\n\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    import(\"./jobs/monitor\").then(({ startMonitoring }) => {\n      startMonitoring();\n    }).catch((err) => {\n      console.error(\"Failed to start monitoring:\", err);\n    });\n\n    import(\"./jobs/weeklyDigest\").then(({ scheduleWeeklyDigest }) => {\n      scheduleWeeklyDigest();\n    }).catch((err) => {\n      console.error(\"Failed to start weekly digest:\", err);\n    });\n  });\n})();\n","size_bytes":3274},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/dashboard.tsx":{"content":"import Dashboard from \"@/components/Dashboard\";\n\nexport default function DashboardPage() {\n  return <Dashboard />;\n}\n","size_bytes":117},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { scanDNS } from \"./lib/dns-scanner\";\nimport { lintTemplate } from \"./lib/template-linter\";\nimport { insertDomainSchema, insertReportSchema, insertHealthPointSchema, insertTemplateCheckSchema } from \"@shared/schema\";\nimport { randomBytes } from \"crypto\";\nimport { registerAuthRoutes, requireAuth } from \"./auth-routes\";\nimport { registerStripeRoutes } from \"./stripe-routes\";\nimport { registerAlertRoutes } from \"./routes/alerts\";\nimport { runDailyRescans } from \"./lib/cron\";\nimport { requireCapacity } from \"./middleware/planLimits\";\nimport { logAuditEvent, AuditEvents } from \"./services/auditLog\";\nimport { trackEvent, AppEventType } from \"./services/analytics\";\nimport destinationsRouter from \"./routes/destinations\";\nimport publicReportsRouter from \"./routes/publicReports\";\nimport teamsRouter from \"./routes/teams\";\nimport adminRouter from \"./routes/admin\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  registerAuthRoutes(app);\n  registerStripeRoutes(app);\n  registerAlertRoutes(app);\n  \n  // Register new routes\n  app.use(\"/api/destinations\", destinationsRouter);\n  app.use(\"/api\", publicReportsRouter);\n  app.use(\"/api/teams\", teamsRouter);\n  app.use(\"/api/admin\", adminRouter);\n\n  app.post(\"/api/cron/rescan\", async (req, res) => {\n    try {\n      const authKey = req.headers[\"x-cron-secret\"] || req.query.key;\n      const expectedKey = process.env.CRON_SECRET || \"change-me-in-production\";\n\n      if (authKey !== expectedKey) {\n        return res.status(403).json({ error: \"Forbidden\" });\n      }\n\n      const result = await runDailyRescans();\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Cron rescan error:\", error);\n      res.status(500).json({ error: \"Re-scan failed\", details: error.message });\n    }\n  });\n  app.post(\"/api/scan\", async (req, res) => {\n    try {\n      const { domain, save } = req.body;\n\n      if (!domain || typeof domain !== \"string\") {\n        return res.status(400).json({ error: \"Domain is required\" });\n      }\n\n      const cleanDomain = domain.toLowerCase().trim().replace(/^https?:\\/\\//, \"\").replace(/\\/$/, \"\");\n      \n      const scanResult = await scanDNS(cleanDomain);\n\n      if (save && req.isAuthenticated() && req.user) {\n        const user = req.user as any;\n        \n        let userDomain = await storage.getDomainByName(user.id, cleanDomain);\n        if (!userDomain) {\n          userDomain = await storage.createDomain({\n            name: cleanDomain,\n            userId: user.id,\n          });\n        }\n\n        const slug = randomBytes(10).toString(\"hex\");\n        const report = await storage.createReport({\n          slug,\n          domainId: userDomain.id,\n          scanJson: scanResult,\n        });\n\n        return res.json({ ...scanResult, reportSlug: report.slug, saved: true });\n      }\n      \n      res.json(scanResult);\n    } catch (error: any) {\n      console.error(\"DNS scan error:\", error);\n      res.status(500).json({ error: \"Failed to scan domain\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/dashboard\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domains = await storage.getDomainsByUserId(user.id);\n      \n      const domainsWithReports = await Promise.all(\n        domains.map(async (domain) => {\n          const reports = await storage.getReportsByDomainId(domain.id);\n          return {\n            ...domain,\n            latestReport: reports[0] || null,\n          };\n        })\n      );\n\n      res.json({ domains: domainsWithReports });\n    } catch (error: any) {\n      console.error(\"Dashboard error:\", error);\n      res.status(500).json({ error: \"Failed to load dashboard\" });\n    }\n  });\n\n  app.get(\"/api/user/usage\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const userData = await storage.getUser(user.id);\n      \n      if (!userData) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Get domain count\n      const domains = await storage.getDomainsByUserId(user.id);\n      const domainCount = domains.length;\n\n      // Get plan limit\n      const planLimit = await storage.getPlanLimit(userData.plan);\n      const domainLimit = planLimit?.maxDomains || 1;\n\n      // Get alert count (last 30 days)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      const recentAlerts = await storage.getAlertsSince(user.id, thirtyDaysAgo);\n      const alertCount = recentAlerts.length;\n\n      // Get scan count (last 30 days)\n      const recentScans = await storage.getScansSince(user.id, thirtyDaysAgo);\n      const scanCount = recentScans.length;\n\n      res.json({\n        plan: userData.plan,\n        domains: {\n          current: domainCount,\n          limit: domainLimit,\n          percentage: domainLimit > 0 ? Math.round((domainCount / domainLimit) * 100) : 0,\n        },\n        alerts: {\n          last30Days: alertCount,\n        },\n        scans: {\n          last30Days: scanCount,\n        },\n      });\n    } catch (error: any) {\n      console.error(\"Usage stats error:\", error);\n      res.status(500).json({ error: \"Failed to fetch usage statistics\" });\n    }\n  });\n\n  app.post(\"/api/domain\", requireAuth, requireCapacity('domains'), async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { name } = req.body;\n      const parsedDomain = insertDomainSchema.parse({ name, userId: user.id });\n      \n      const existingDomain = await storage.getDomainByName(user.id, name);\n\n      if (existingDomain) {\n        return res.status(400).json({ error: \"Domain already exists\" });\n      }\n\n      const domain = await storage.createDomain(parsedDomain);\n      \n      // Log audit event\n      await logAuditEvent({\n        actorUserId: user.id,\n        event: AuditEvents.DOMAIN_ADDED,\n        domainId: domain.id,\n        meta: { domainName: domain.name },\n      });\n\n      // Track analytics event\n      await trackEvent(storage, AppEventType.DOMAIN_ADDED, user.id, { domainName: domain.name });\n      \n      res.json(domain);\n    } catch (error: any) {\n      console.error(\"Create domain error:\", error);\n      res.status(400).json({ error: \"Failed to create domain\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/domain/:id\", async (req, res) => {\n    try {\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const reports = await storage.getReportsByDomainId(domain.id);\n      const healthPoints = await storage.getHealthPointsByDomainId(domain.id);\n\n      res.json({ domain, reports, healthPoints });\n    } catch (error: any) {\n      console.error(\"Get domain error:\", error);\n      res.status(500).json({ error: \"Failed to get domain\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/domains\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n\n      if (!userId || typeof userId !== \"string\") {\n        return res.json([]);\n      }\n\n      const domains = await storage.getDomainsByUserId(userId);\n      \n      const domainsWithStats = await Promise.all(\n        domains.map(async (domain) => {\n          const reports = await storage.getReportsByDomainId(domain.id);\n          const latestReport = reports.sort((a, b) => \n            new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n          )[0];\n\n          return {\n            ...domain,\n            latestScan: latestReport ? {\n              createdAt: latestReport.createdAt,\n              status: (latestReport.scanJson as any).summary.overall,\n              criticalIssues: (latestReport.scanJson as any).summary.criticalIssues,\n            } : null,\n          };\n        })\n      );\n\n      res.json(domainsWithStats);\n    } catch (error: any) {\n      console.error(\"Get domains error:\", error);\n      res.status(500).json({ error: \"Failed to get domains\", details: error.message });\n    }\n  });\n\n  app.delete(\"/api/domain/:id\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      // Track analytics event before deletion\n      await trackEvent(storage, AppEventType.DOMAIN_DELETED, user.id, { domainName: domain.name });\n\n      await storage.deleteDomain(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Delete domain error:\", error);\n      res.status(500).json({ error: \"Failed to delete domain\", details: error.message });\n    }\n  });\n\n  app.patch(\"/api/domain/:id/monitoring\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { enabled } = req.body;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      if (user.isPro !== \"true\" && enabled) {\n        return res.status(403).json({ error: \"Pro subscription required for automated monitoring\" });\n      }\n\n      const updatedDomain = await storage.updateDomainMonitoring(req.params.id, enabled);\n      res.json(updatedDomain);\n    } catch (error: any) {\n      console.error(\"Update monitoring error:\", error);\n      res.status(500).json({ error: \"Failed to update monitoring\", details: error.message });\n    }\n  });\n\n  app.post(\"/api/monitoring/run\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (user.isPro !== \"true\") {\n        return res.status(403).json({ error: \"Pro subscription required for monitoring\" });\n      }\n\n      const { runMonitoring } = await import(\"./jobs/monitor\");\n      await runMonitoring();\n      res.json({ success: true, message: \"Monitoring cycle completed\" });\n    } catch (error: any) {\n      console.error(\"Manual monitoring error:\", error);\n      res.status(500).json({ error: \"Failed to run monitoring\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/domains/:id/runs\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 30;\n      const runs = await storage.getScanRunsByDomainId(req.params.id, limit);\n      res.json({ runs });\n    } catch (error: any) {\n      console.error(\"Get runs error:\", error);\n      res.status(500).json({ error: \"Failed to get scan runs\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/domains/:id/diff/latest\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const diff = await storage.getLatestScanDiffByDomainId(req.params.id);\n      if (!diff) {\n        return res.status(404).json({ error: \"No diff found\" });\n      }\n\n      res.json({ diff });\n    } catch (error: any) {\n      console.error(\"Get diff error:\", error);\n      res.status(500).json({ error: \"Failed to get diff\", details: error.message });\n    }\n  });\n\n  app.post(\"/api/report\", async (req, res) => {\n    try {\n      const { domainId, scanJson } = req.body;\n\n      if (!scanJson) {\n        return res.status(400).json({ error: \"scanJson is required\" });\n      }\n\n      const slug = randomBytes(8).toString(\"hex\");\n\n      const parsedReport = insertReportSchema.parse({\n        slug,\n        domainId: domainId || null,\n        scanJson,\n      });\n\n      const report = await storage.createReport(parsedReport);\n      res.json(report);\n    } catch (error: any) {\n      console.error(\"Create report error:\", error);\n      res.status(400).json({ error: \"Failed to create report\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/report/:slug\", async (req, res) => {\n    try {\n      const report = await storage.getReportBySlug(req.params.slug);\n      \n      if (!report) {\n        return res.status(404).json({ error: \"Report not found\" });\n      }\n\n      const domain = report.domainId ? await storage.getDomain(report.domainId) : null;\n\n      res.json({ report, domain });\n    } catch (error: any) {\n      console.error(\"Get report error:\", error);\n      res.status(500).json({ error: \"Failed to get report\", details: error.message });\n    }\n  });\n\n  app.post(\"/api/reports/:token/export\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { token } = req.params;\n\n      const publicReport = await storage.getPublicReportByToken(token);\n      \n      if (!publicReport) {\n        return res.status(404).json({ error: \"Report not found or expired\" });\n      }\n\n      const domain = await storage.getDomain(publicReport.domainId);\n      if (!domain) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const userPlan = await storage.getPlanLimit(user.plan || \"Free\");\n      const features = userPlan?.features as any || {};\n\n      if (!features.pdf) {\n        return res.status(403).json({ error: \"PDF export requires Pro or Agency plan\" });\n      }\n\n      const { canAccessDomain } = await import(\"./middleware/accessControl\");\n      const hasAccess = await canAccessDomain(user.id, publicReport.domainId);\n      \n      if (!hasAccess) {\n        return res.status(403).json({ error: \"You don't have access to this domain\" });\n      }\n\n      const { generatePdfExport } = await import(\"./services/pdfExport\");\n      \n      let brandOptions: any = { token };\n      \n      if (user.plan === \"Agency\" && req.body.teamId) {\n        const team = await storage.getTeamById(req.body.teamId);\n        if (!team) {\n          return res.status(404).json({ error: \"Team not found\" });\n        }\n\n        const teamMembers = await storage.getTeamMembersByTeamId(team.id);\n        const isMember = teamMembers.some(m => m.userId === user.id);\n        \n        if (!isMember) {\n          return res.status(403).json({ error: \"You are not a member of this team\" });\n        }\n\n        brandOptions.teamId = team.id;\n        brandOptions.brandLogo = team.brandLogo || undefined;\n        brandOptions.brandColor = team.brandColor || undefined;\n      }\n\n      const { filePath, fileName, bytesSize } = await generatePdfExport(brandOptions);\n\n      await storage.createReportExport({\n        domainId: publicReport.domainId,\n        runId: publicReport.runId,\n        teamId: brandOptions.teamId || null,\n        urlToken: token,\n        filePath,\n        format: \"pdf\",\n        bytesSize,\n      });\n\n      await logAuditEvent({\n        actorUserId: user.id,\n        event: AuditEvents.PDF_EXPORTED,\n        domainId: publicReport.domainId,\n        meta: { token, fileName },\n      });\n\n      res.download(filePath, fileName);\n    } catch (error: any) {\n      console.error(\"PDF export error:\", error);\n      res.status(500).json({ error: \"Failed to export PDF\", details: error.message });\n    }\n  });\n\n  app.post(\"/api/template-lint\", async (req, res) => {\n    try {\n      const { subject, html, text, userId } = req.body;\n\n      if (!subject) {\n        return res.status(400).json({ error: \"Subject is required\" });\n      }\n\n      const result = lintTemplate(subject, text || \"\", html || \"\");\n\n      if (userId) {\n        const parsedCheck = insertTemplateCheckSchema.parse({\n          userId,\n          subject,\n          html,\n          text,\n          resultJson: result,\n        });\n\n        await storage.createTemplateCheck(parsedCheck);\n      }\n\n      res.json(result);\n    } catch (error: any) {\n      console.error(\"Template lint error:\", error);\n      res.status(400).json({ error: \"Failed to lint template\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/template-checks\", async (req, res) => {\n    try {\n      const { userId } = req.query;\n\n      if (!userId || typeof userId !== \"string\") {\n        return res.json([]);\n      }\n\n      const checks = await storage.getTemplateChecksByUserId(userId);\n      res.json(checks);\n    } catch (error: any) {\n      console.error(\"Get template checks error:\", error);\n      res.status(500).json({ error: \"Failed to get template checks\", details: error.message });\n    }\n  });\n\n  app.post(\"/api/health\", async (req, res) => {\n    try {\n      const { domainId, sent, openRate, spamRate, hardBounces, softBounces, note } = req.body;\n\n      const parsedHealthPoint = insertHealthPointSchema.parse({\n        domainId,\n        sent,\n        openRate,\n        spamRate,\n        hardBounces,\n        softBounces,\n        note,\n      });\n\n      const healthPoint = await storage.createHealthPoint(parsedHealthPoint);\n      res.json(healthPoint);\n    } catch (error: any) {\n      console.error(\"Create health point error:\", error);\n      res.status(400).json({ error: \"Failed to create health point\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/health/:domainId\", async (req, res) => {\n    try {\n      const healthPoints = await storage.getHealthPointsByDomainId(req.params.domainId);\n      res.json(healthPoints);\n    } catch (error: any) {\n      console.error(\"Get health points error:\", error);\n      res.status(500).json({ error: \"Failed to get health points\", details: error.message });\n    }\n  });\n\n  // Domain alert preferences\n  app.get(\"/api/domains/:id/alert-prefs\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const prefs = await storage.getDomainAlertPref(req.params.id);\n      \n      // If no domain-specific prefs, return user's global prefs\n      if (!prefs) {\n        const userPrefs = await storage.getAlertPref(user.id);\n        return res.json(userPrefs || {\n          emailEnabled: \"true\",\n          slackEnabled: \"false\",\n          threshold: \"warn\",\n          digest: \"false\",\n        });\n      }\n      \n      res.json(prefs);\n    } catch (error: any) {\n      console.error(\"Get domain alert prefs error:\", error);\n      res.status(500).json({ error: \"Failed to get alert preferences\" });\n    }\n  });\n\n  app.put(\"/api/domains/:id/alert-prefs\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const prefs = await storage.upsertDomainAlertPref({\n        domainId: req.params.id,\n        emailEnabled: req.body.emailEnabled,\n        slackEnabled: req.body.slackEnabled,\n        threshold: req.body.threshold,\n        digest: req.body.digest,\n      });\n      \n      // Log audit event\n      await logAuditEvent({\n        actorUserId: user.id,\n        event: AuditEvents.PREFS_CHANGED,\n        domainId: req.params.id,\n        meta: { preferences: prefs },\n      });\n      \n      res.json(prefs);\n    } catch (error: any) {\n      console.error(\"Update domain alert prefs error:\", error);\n      res.status(400).json({ error: \"Failed to update alert preferences\" });\n    }\n  });\n\n  // Audit logs\n  app.get(\"/api/domains/:id/audit\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const domain = await storage.getDomain(req.params.id);\n      \n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const limit = req.query.limit ? parseInt(req.query.limit as string, 10) : 50;\n      const logs = await storage.getAuditLogsByDomainId(req.params.id, limit);\n      res.json({ logs });\n    } catch (error: any) {\n      console.error(\"Get audit logs error:\", error);\n      res.status(500).json({ error: \"Failed to get audit logs\" });\n    }\n  });\n\n  app.get(\"/api/version\", (req, res) => {\n    res.json({ version: \"1.0.0\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":20535},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/examples/TemplateLintTool.tsx":{"content":"import TemplateLintTool from \"../TemplateLintTool\";\n\nexport default function TemplateLintToolExample() {\n  return <TemplateLintTool />;\n}\n","size_bytes":138},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  stripeCustomerId?: string | null;\n  stripeSubscriptionId?: string | null;\n  isPro?: string;\n}\n\nexport interface AuthSession {\n  authenticated: boolean;\n  user: User | null;\n}\n\nexport function useAuth() {\n  const { data: session, isLoading } = useQuery<AuthSession>({\n    queryKey: [\"/api/auth/session\"],\n    retry: false,\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/auth/logout\", {});\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/session\"], {\n        authenticated: false,\n        user: null,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/session\"] });\n    },\n  });\n\n  return {\n    user: session?.user || null,\n    isAuthenticated: session?.authenticated || false,\n    isLoading,\n    logout: () => logoutMutation.mutate(),\n  };\n}\n","size_bytes":1076},"server/services/notifications.ts":{"content":"import { storage } from \"../storage\";\nimport type { Alert } from \"@shared/schema\";\n\ninterface SlackPayload {\n  text: string;\n  blocks?: Array<{\n    type: string;\n    text?: {\n      type: string;\n      text: string;\n    };\n  }>;\n}\n\ninterface WebhookPayload {\n  domain: string;\n  severity: string;\n  title: string;\n  body?: string;\n  link?: string;\n  timestamp: string;\n}\n\nexport async function sendAlertNotifications(\n  alert: Alert, \n  domainName: string,\n  channelPrefs?: { emailEnabled: boolean; slackEnabled: boolean }\n): Promise<boolean> {\n  // Get domain owner\n  const domain = await storage.getDomain(alert.domainId);\n  if (!domain || !domain.userId) return false;\n\n  // Get user destinations\n  const destinations = await storage.getDestinationsByUserId(domain.userId);\n  const enabledDestinations = destinations.filter(d => d.enabled === \"true\");\n\n  // Filter by channel preferences if provided\n  const filteredDestinations = channelPrefs \n    ? enabledDestinations.filter(d => {\n        if (d.type === \"slack\" && !channelPrefs.slackEnabled) return false;\n        if (d.type === \"webhook\" && !channelPrefs.slackEnabled) return false;\n        return true;\n      })\n    : enabledDestinations;\n\n  // Return false if no destinations to send to\n  if (filteredDestinations.length === 0) {\n    return false;\n  }\n\n  // Track if at least one notification succeeded\n  let sentCount = 0;\n\n  // Send to each destination\n  for (const destination of filteredDestinations) {\n    try {\n      if (destination.type === \"slack\") {\n        await sendSlackNotification(destination.url, alert, domainName);\n        sentCount++;\n      } else if (destination.type === \"webhook\") {\n        await sendWebhookNotification(destination.url, alert, domainName);\n        sentCount++;\n      }\n    } catch (error) {\n      console.error(`Failed to send notification to ${destination.type}:`, error);\n      // Continue sending to other destinations even if one fails\n    }\n  }\n\n  return sentCount > 0;\n}\n\nasync function sendSlackNotification(webhookUrl: string, alert: Alert, domainName: string): Promise<void> {\n  const severityEmoji = {\n    info: \":information_source:\",\n    warn: \":warning:\",\n    fail: \":x:\",\n  }[alert.severity.toLowerCase()] || \":bell:\";\n\n  const payload: SlackPayload = {\n    text: `${severityEmoji} DNS Alert for ${domainName}`,\n    blocks: [\n      {\n        type: \"header\",\n        text: {\n          type: \"plain_text\",\n          text: `${severityEmoji} ${alert.title}`,\n        },\n      },\n      {\n        type: \"section\",\n        text: {\n          type: \"mrkdwn\",\n          text: `*Domain:* ${domainName}\\n*Severity:* ${alert.severity}\\n${alert.body || \"\"}`,\n        },\n      },\n    ],\n  };\n\n  const response = await fetch(webhookUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n    signal: AbortSignal.timeout(5000), // 5 second timeout\n  });\n\n  if (!response.ok) {\n    throw new Error(`Slack webhook failed: ${response.status} ${response.statusText}`);\n  }\n}\n\nasync function sendWebhookNotification(webhookUrl: string, alert: Alert, domainName: string): Promise<void> {\n  const payload: WebhookPayload = {\n    domain: domainName,\n    severity: alert.severity,\n    title: alert.title,\n    body: alert.body || undefined,\n    timestamp: new Date().toISOString(),\n  };\n\n  const response = await fetch(webhookUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(payload),\n    signal: AbortSignal.timeout(5000), // 5 second timeout\n  });\n\n  if (!response.ok) {\n    throw new Error(`Webhook failed: ${response.status} ${response.statusText}`);\n  }\n}\n\n/**\n * Validate webhook URL for security\n * Prevents SSRF and other attacks\n */\nexport function validateWebhookUrl(url: string): boolean {\n  try {\n    const parsed = new URL(url);\n    \n    // Must be HTTPS\n    if (parsed.protocol !== \"https:\") {\n      return false;\n    }\n\n    // Block private/internal IPs\n    const hostname = parsed.hostname.toLowerCase();\n    const privatePatterns = [\n      /^localhost$/i,\n      /^127\\./,\n      /^10\\./,\n      /^172\\.(1[6-9]|2\\d|3[01])\\./,\n      /^192\\.168\\./,\n      /^169\\.254\\./,\n      /^::1$/,\n      /^fe80:/,\n      /^fc00:/,\n    ];\n\n    for (const pattern of privatePatterns) {\n      if (pattern.test(hostname)) {\n        return false;\n      }\n    }\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n","size_bytes":4431},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, real, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  passwordHash: text(\"password_hash\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  isPro: text(\"is_pro\").default(\"false\").notNull(),\n  plan: text(\"plan\").default(\"Free\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const domains = pgTable(\"domains\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  monitoringEnabled: text(\"monitoring_enabled\").default(\"false\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const reports = pgTable(\"reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slug: text(\"slug\").notNull().unique(),\n  domainId: varchar(\"domain_id\").references(() => domains.id),\n  scanJson: jsonb(\"scan_json\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const healthPoints = pgTable(\"health_points\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").references(() => domains.id).notNull(),\n  sent: integer(\"sent\").notNull(),\n  openRate: real(\"open_rate\").notNull(),\n  spamRate: real(\"spam_rate\").notNull(),\n  hardBounces: integer(\"hard_bounces\").notNull(),\n  softBounces: integer(\"soft_bounces\").notNull(),\n  note: text(\"note\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const templateChecks = pgTable(\"template_checks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  subject: text(\"subject\").notNull(),\n  html: text(\"html\"),\n  text: text(\"text\"),\n  resultJson: jsonb(\"result_json\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const scanRuns = pgTable(\"scan_runs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }).notNull(),\n  startedAt: timestamp(\"started_at\", { withTimezone: true }).defaultNow().notNull(),\n  finishedAt: timestamp(\"finished_at\", { withTimezone: true }),\n  status: text(\"status\").notNull(),\n  errorText: text(\"error_text\"),\n  score: integer(\"score\"),\n  scoreBreakdown: jsonb(\"score_breakdown\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\nexport const scanRecords = pgTable(\"scan_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  runId: varchar(\"run_id\").references(() => scanRuns.id, { onDelete: \"cascade\" }).notNull(),\n  recordType: text(\"record_type\").notNull(),\n  selector: text(\"selector\"),\n  valueHash: text(\"value_hash\").notNull(),\n  rawValue: text(\"raw_value\").notNull(),\n  verdict: text(\"verdict\").notNull(),\n  metaJson: jsonb(\"meta_json\"),\n});\n\nexport const scanDiffs = pgTable(\"scan_diffs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  runId: varchar(\"run_id\").references(() => scanRuns.id, { onDelete: \"cascade\" }).notNull(),\n  addedJson: jsonb(\"added_json\"),\n  removedJson: jsonb(\"removed_json\"),\n  changedJson: jsonb(\"changed_json\"),\n  severity: text(\"severity\").notNull(),\n});\n\nexport const alertPrefs = pgTable(\"alert_prefs\", {\n  userId: varchar(\"user_id\").primaryKey().references(() => users.id, { onDelete: \"cascade\" }),\n  emailEnabled: text(\"email_enabled\").default(\"true\").notNull(),\n  slackEnabled: text(\"slack_enabled\").default(\"false\").notNull(),\n  threshold: text(\"threshold\").default(\"warn\").notNull(),\n});\n\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }).notNull(),\n  runId: varchar(\"run_id\").references(() => scanRuns.id, { onDelete: \"cascade\" }).notNull(),\n  type: text(\"type\").notNull(),\n  severity: text(\"severity\").notNull(),\n  title: text(\"title\").notNull(),\n  body: text(\"body\"),\n  sentAt: timestamp(\"sent_at\", { withTimezone: true }),\n});\n\nexport const emailLog = pgTable(\"email_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  type: text(\"type\").notNull(),\n  sentAt: timestamp(\"sent_at\", { withTimezone: true }).defaultNow().notNull(),\n  metaJson: jsonb(\"meta_json\"),\n});\n\nexport const destinations = pgTable(\"destinations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  type: text(\"type\").notNull(),\n  url: text(\"url\").notNull(),\n  enabled: text(\"enabled\").default(\"true\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\nexport const planLimits = pgTable(\"plan_limits\", {\n  plan: text(\"plan\").primaryKey(),\n  maxDomains: integer(\"max_domains\").notNull(),\n  features: jsonb(\"features\").notNull(),\n});\n\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  ownerUserId: varchar(\"owner_user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  name: text(\"name\").notNull(),\n  brandLogo: text(\"brand_logo\"),\n  brandColor: text(\"brand_color\"),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n});\n\nexport const teamMembers = pgTable(\"team_members\", {\n  teamId: varchar(\"team_id\").references(() => teams.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  role: text(\"role\").notNull(),\n}, (table) => ({\n  pk: sql`PRIMARY KEY (${table.teamId}, ${table.userId})`,\n}));\n\nexport const teamDomains = pgTable(\"team_domains\", {\n  teamId: varchar(\"team_id\").references(() => teams.id, { onDelete: \"cascade\" }).notNull(),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }).notNull(),\n}, (table) => ({\n  pk: sql`PRIMARY KEY (${table.teamId}, ${table.domainId})`,\n}));\n\nexport const auditLog = pgTable(\"audit_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  actorUserId: varchar(\"actor_user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }),\n  event: text(\"event\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  metaJson: jsonb(\"meta_json\"),\n});\n\nexport const publicReports = pgTable(\"public_reports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }).notNull(),\n  runId: varchar(\"run_id\").references(() => scanRuns.id, { onDelete: \"cascade\" }).notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\", { withTimezone: true }),\n});\n\nexport const reportExports = pgTable(\"report_exports\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  domainId: varchar(\"domain_id\").references(() => domains.id, { onDelete: \"cascade\" }).notNull(),\n  runId: varchar(\"run_id\").references(() => scanRuns.id, { onDelete: \"cascade\" }).notNull(),\n  teamId: varchar(\"team_id\").references(() => teams.id, { onDelete: \"cascade\" }),\n  urlToken: text(\"url_token\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  format: text(\"format\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  bytesSize: integer(\"bytes_size\"),\n});\n\nexport const domainAlertPrefs = pgTable(\"domain_alert_prefs\", {\n  domainId: varchar(\"domain_id\").primaryKey().references(() => domains.id, { onDelete: \"cascade\" }),\n  emailEnabled: text(\"email_enabled\").default(\"true\").notNull(),\n  slackEnabled: text(\"slack_enabled\").default(\"false\").notNull(),\n  threshold: text(\"threshold\").default(\"warn\").notNull(),\n  digest: text(\"digest\").default(\"false\").notNull(),\n});\n\nexport const appEvents = pgTable(\"app_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  event: text(\"event\").notNull(),\n  createdAt: timestamp(\"created_at\", { withTimezone: true }).defaultNow().notNull(),\n  metaJson: jsonb(\"meta_json\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDomainSchema = createInsertSchema(domains).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportSchema = createInsertSchema(reports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHealthPointSchema = createInsertSchema(healthPoints).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTemplateCheckSchema = createInsertSchema(templateChecks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScanRunSchema = createInsertSchema(scanRuns).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertScanRecordSchema = createInsertSchema(scanRecords).omit({\n  id: true,\n});\n\nexport const insertScanDiffSchema = createInsertSchema(scanDiffs).omit({\n  id: true,\n});\n\nexport const insertAlertPrefSchema = createInsertSchema(alertPrefs);\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n});\n\nexport const insertEmailLogSchema = createInsertSchema(emailLog).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertDomain = z.infer<typeof insertDomainSchema>;\nexport type Domain = typeof domains.$inferSelect;\n\nexport type InsertReport = z.infer<typeof insertReportSchema>;\nexport type Report = typeof reports.$inferSelect;\n\nexport type InsertHealthPoint = z.infer<typeof insertHealthPointSchema>;\nexport type HealthPoint = typeof healthPoints.$inferSelect;\n\nexport type InsertTemplateCheck = z.infer<typeof insertTemplateCheckSchema>;\nexport type TemplateCheck = typeof templateChecks.$inferSelect;\n\nexport type InsertScanRun = z.infer<typeof insertScanRunSchema>;\nexport type ScanRun = typeof scanRuns.$inferSelect;\n\nexport type InsertScanRecord = z.infer<typeof insertScanRecordSchema>;\nexport type ScanRecord = typeof scanRecords.$inferSelect;\n\nexport type InsertScanDiff = z.infer<typeof insertScanDiffSchema>;\nexport type ScanDiff = typeof scanDiffs.$inferSelect;\n\nexport type InsertAlertPref = z.infer<typeof insertAlertPrefSchema>;\nexport type AlertPref = typeof alertPrefs.$inferSelect;\n\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type Alert = typeof alerts.$inferSelect;\n\nexport type InsertEmailLog = z.infer<typeof insertEmailLogSchema>;\nexport type EmailLog = typeof emailLog.$inferSelect;\n\nexport const insertDestinationSchema = createInsertSchema(destinations).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPlanLimitSchema = createInsertSchema(planLimits);\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers);\n\nexport const insertTeamDomainSchema = createInsertSchema(teamDomains);\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPublicReportSchema = createInsertSchema(publicReports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReportExportSchema = createInsertSchema(reportExports).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDomainAlertPrefSchema = createInsertSchema(domainAlertPrefs);\n\nexport type InsertDestination = z.infer<typeof insertDestinationSchema>;\nexport type Destination = typeof destinations.$inferSelect;\n\nexport type InsertPlanLimit = z.infer<typeof insertPlanLimitSchema>;\nexport type PlanLimit = typeof planLimits.$inferSelect;\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\nexport type InsertTeamDomain = z.infer<typeof insertTeamDomainSchema>;\nexport type TeamDomain = typeof teamDomains.$inferSelect;\n\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\n\nexport type InsertPublicReport = z.infer<typeof insertPublicReportSchema>;\nexport type PublicReport = typeof publicReports.$inferSelect;\n\nexport type InsertReportExport = z.infer<typeof insertReportExportSchema>;\nexport type ReportExport = typeof reportExports.$inferSelect;\n\nexport type InsertDomainAlertPref = z.infer<typeof insertDomainAlertPrefSchema>;\nexport type DomainAlertPref = typeof domainAlertPrefs.$inferSelect;\n\nexport const insertAppEventSchema = createInsertSchema(appEvents).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertAppEvent = z.infer<typeof insertAppEventSchema>;\nexport type AppEvent = typeof appEvents.$inferSelect;\n","size_bytes":13520},"client/src/pages/signup.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\nexport default function SignupPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const signupMutation = useMutation({\n    mutationFn: async () => {\n      if (password !== confirmPassword) {\n        throw new Error(\"Passwords do not match\");\n      }\n      const res = await apiRequest(\"POST\", \"/api/auth/signup\", { email, password });\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account created!\",\n        description: \"You can now sign in with your credentials.\",\n      });\n      setLocation(\"/login\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup failed\",\n        description: error.message || \"Failed to create account.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    signupMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-64px)] flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Create Account</CardTitle>\n          <CardDescription>Sign up to save and track your domain scans</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"you@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-password\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n              <Input\n                id=\"confirmPassword\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                required\n                minLength={6}\n                data-testid=\"input-confirm-password\"\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={signupMutation.isPending}\n              data-testid=\"button-signup\"\n            >\n              {signupMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n            Already have an account?{\" \"}\n            <Link href=\"/login\" data-testid=\"link-login\">\n              <span className=\"text-primary hover:underline cursor-pointer\">Sign in</span>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3998},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/services/notify.ts":{"content":"import nodemailer from \"nodemailer\";\n\ninterface AlertEmail {\n  to: string;\n  domain: string;\n  recordType: string;\n  oldValue: string;\n  newValue: string;\n}\n\nasync function createTransporter() {\n  const smtpHost = process.env.SMTP_HOST;\n  const smtpUser = process.env.SMTP_USER;\n  const smtpPass = process.env.SMTP_PASS;\n  const fromEmail = process.env.FROM_EMAIL || smtpUser;\n\n  if (!smtpHost || !smtpUser || !smtpPass) {\n    console.log(\"[notify] SMTP not configured, logging to console instead\");\n    return null;\n  }\n\n  return nodemailer.createTransport({\n    host: smtpHost,\n    port: 587,\n    secure: false,\n    auth: {\n      user: smtpUser,\n      pass: smtpPass,\n    },\n  });\n}\n\nexport async function sendAlertEmail(alert: AlertEmail): Promise<void> {\n  const transporter = await createTransporter();\n\n  const subject = `DNS Record Changed: ${alert.domain}`;\n  const text = `\nDNS Record Change Detected\n\nDomain: ${alert.domain}\nRecord Type: ${alert.recordType}\nOld Value: ${alert.oldValue}\nNew Value: ${alert.newValue}\n\nThis is an automated alert from your Deliverability Copilot monitoring system.\n  `.trim();\n\n  if (!transporter) {\n    console.log(\"[notify] Would send email:\");\n    console.log(`  To: ${alert.to}`);\n    console.log(`  Subject: ${subject}`);\n    console.log(`  Body: ${text}`);\n    return;\n  }\n\n  try {\n    const info = await transporter.sendMail({\n      from: process.env.FROM_EMAIL || process.env.SMTP_USER,\n      to: alert.to,\n      subject,\n      text,\n    });\n    console.log(`[notify] ✓ Alert email sent: ${info.messageId}`);\n  } catch (error) {\n    console.error(\"[notify] ✗ Failed to send email:\", error);\n    throw error;\n  }\n}\n","size_bytes":1667},"server/routes/destinations.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth-routes\";\nimport { requireFeature } from \"../middleware/planLimits\";\nimport { validateWebhookUrl } from \"../services/notifications\";\nimport { logAuditEvent, AuditEvents } from \"../services/auditLog\";\nimport { insertDestinationSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Get all destinations for current user\nrouter.get(\"/\", requireAuth, requireFeature(\"webhook\"), async (req, res) => {\n  const user = req.user as any;\n  const destinations = await storage.getDestinationsByUserId(user.id);\n  res.json(destinations);\n});\n\n// Create new destination\nrouter.post(\"/\", requireAuth, requireFeature(\"webhook\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    \n    // Validate input\n    const validatedData = insertDestinationSchema.parse({\n      ...req.body,\n      userId: user.id,\n    });\n\n    // Validate URL for security\n    if (!validateWebhookUrl(validatedData.url)) {\n      return res.status(400).json({\n        error: \"Invalid webhook URL. Must be HTTPS and not point to private/internal addresses.\",\n      });\n    }\n\n    const destination = await storage.createDestination(validatedData);\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.DESTINATION_ADDED,\n      meta: {\n        destinationId: destination.id,\n        type: destination.type,\n      },\n    });\n\n    res.json(destination);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Update destination enabled status\nrouter.patch(\"/:id/enabled\", requireAuth, requireFeature(\"webhook\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { id } = req.params;\n    const { enabled } = req.body;\n\n    // Check ownership\n    const destinations = await storage.getDestinationsByUserId(user.id);\n    const destination = destinations.find(d => d.id === id);\n    \n    if (!destination) {\n      return res.status(404).json({ error: \"Destination not found\" });\n    }\n\n    const updated = await storage.updateDestinationEnabled(id, enabled);\n    res.json(updated);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Delete destination\nrouter.delete(\"/:id\", requireAuth, requireFeature(\"webhook\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { id } = req.params;\n\n    // Check ownership\n    const destinations = await storage.getDestinationsByUserId(user.id);\n    const destination = destinations.find(d => d.id === id);\n    \n    if (!destination) {\n      return res.status(404).json({ error: \"Destination not found\" });\n    }\n\n    await storage.deleteDestination(id);\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.DESTINATION_DELETED,\n      meta: {\n        destinationId: id,\n        type: destination.type,\n      },\n    });\n\n    res.json({ success: true });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":3097},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/routes/publicReports.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth-routes\";\nimport { requireDomainAccess } from \"../middleware/accessControl\";\nimport { requireFeature } from \"../middleware/planLimits\";\nimport { logAuditEvent, AuditEvents } from \"../services/auditLog\";\nimport { randomBytes } from \"crypto\";\n\nconst router = Router();\n\n// Create public report link\nrouter.post(\"/domains/:id/public-report\", \n  requireAuth,\n  requireFeature(\"shareLinks\"),\n  requireDomainAccess(),\n  async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { id: domainId } = req.params;\n      const { runId, expiresInDays } = req.body;\n\n      // Validate run belongs to domain\n      const run = await storage.getScanRunsByDomainId(domainId, 1);\n      if (!run || run.length === 0 || run[0].id !== runId) {\n        return res.status(404).json({ error: \"Scan run not found for this domain\" });\n      }\n\n      // Generate unique token\n      const token = randomBytes(16).toString(\"hex\");\n\n      // Calculate expiry if specified\n      let expiresAt = null;\n      if (expiresInDays && expiresInDays > 0) {\n        expiresAt = new Date();\n        expiresAt.setDate(expiresAt.getDate() + expiresInDays);\n      }\n\n      const publicReport = await storage.createPublicReport({\n        domainId,\n        runId,\n        token,\n        expiresAt,\n      });\n\n      // Log audit event\n      await logAuditEvent({\n        actorUserId: user.id,\n        event: AuditEvents.PUBLIC_LINK_CREATED,\n        domainId,\n        meta: {\n          publicReportId: publicReport.id,\n          runId,\n          expiresAt: expiresAt?.toISOString(),\n        },\n      });\n\n      res.json({\n        ...publicReport,\n        url: `/r/${token}`,\n      });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n);\n\n// Get all public reports for a domain\nrouter.get(\"/domains/:id/public-reports\",\n  requireAuth,\n  requireDomainAccess(),\n  async (req, res) => {\n    const { id: domainId } = req.params;\n    const publicReports = await storage.getPublicReportsByDomainId(domainId);\n    res.json(publicReports);\n  }\n);\n\n// Revoke public report\nrouter.delete(\"/public-reports/:id\",\n  requireAuth,\n  async (req, res) => {\n    try {\n      const user = req.user as any;\n      const { id } = req.params;\n\n      // Get public report to check ownership\n      const publicReports = await storage.getPublicReportsByDomainId(\"\");\n      const publicReport = publicReports.find(r => r.id === id);\n\n      if (!publicReport) {\n        return res.status(404).json({ error: \"Public report not found\" });\n      }\n\n      // Check domain access\n      const domain = await storage.getDomain(publicReport.domainId);\n      if (!domain || domain.userId !== user.id) {\n        return res.status(403).json({ error: \"Access denied\" });\n      }\n\n      await storage.deletePublicReport(id);\n\n      // Log audit event\n      await logAuditEvent({\n        actorUserId: user.id,\n        event: AuditEvents.PUBLIC_LINK_REVOKED,\n        domainId: publicReport.domainId,\n        meta: {\n          publicReportId: id,\n        },\n      });\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  }\n);\n\n// Public route to view report (no auth required)\nrouter.get(\"/r/:token\", async (req, res) => {\n  try {\n    const { token } = req.params;\n    \n    const publicReport = await storage.getPublicReportByToken(token);\n    \n    if (!publicReport) {\n      return res.status(404).json({ error: \"Report not found\" });\n    }\n\n    // Check expiry\n    if (publicReport.expiresAt && new Date(publicReport.expiresAt) < new Date()) {\n      return res.status(404).json({ error: \"Report link has expired\" });\n    }\n\n    // Get scan run data\n    const runs = await storage.getScanRunsByDomainId(publicReport.domainId);\n    const run = runs.find(r => r.id === publicReport.runId);\n\n    if (!run) {\n      return res.status(404).json({ error: \"Scan run not found\" });\n    }\n\n    // Get scan records\n    const records = await storage.getScanRecordsByRunId(run.id);\n\n    // Get domain name\n    const domain = await storage.getDomain(publicReport.domainId);\n\n    res.json({\n      domain: domain?.name || \"Unknown\",\n      run: {\n        id: run.id,\n        status: run.status,\n        score: run.score,\n        scoreBreakdown: run.scoreBreakdown,\n        startedAt: run.startedAt,\n        finishedAt: run.finishedAt,\n      },\n      records: records.map(r => ({\n        type: r.recordType,\n        selector: r.selector,\n        verdict: r.verdict,\n        value: r.rawValue,\n        meta: r.metaJson,\n      })),\n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":4779},"server/routes/admin.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth-routes\";\nimport { db } from \"../db\";\nimport { users, domains, scanRuns, alerts, emailLog, appEvents } from \"@shared/schema\";\nimport { eq, and, gte, sql } from \"drizzle-orm\";\nimport { AppEventType } from \"../services/analytics\";\n\nconst router = Router();\n\n// Middleware to check if user is admin (for now, just check if they're authenticated)\n// In a real app, you'd have an isAdmin field on the user\nfunction requireAdmin(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ error: \"Not authenticated\" });\n  }\n  \n  // For now, all authenticated users can see metrics\n  // In production, you'd check: if (!req.user.isAdmin) { return res.status(403)... }\n  \n  next();\n}\n\n// Get admin metrics\nrouter.get(\"/metrics\", requireAuth, requireAdmin, async (req, res) => {\n  try {\n    // Calculate date ranges\n    const now = new Date();\n    const last24h = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    const last7d = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    // Active users by plan\n    const allUsers = await db.select().from(users);\n    const usersByPlan = allUsers.reduce((acc, user) => {\n      const plan = user.plan || \"Free\";\n      acc[plan] = (acc[plan] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    // Total domains monitored\n    const allDomains = await db.select().from(domains);\n    const totalDomains = allDomains.length;\n    const monitoredDomains = allDomains.filter(d => d.monitoringEnabled === \"true\").length;\n\n    // Scans in last 24h and 7d\n    const scansLast24h = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(scanRuns)\n      .where(gte(scanRuns.startedAt, last24h));\n\n    const scansLast7d = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(scanRuns)\n      .where(gte(scanRuns.startedAt, last7d));\n\n    // Alerts in last 24h\n    const alertsLast24h = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(alerts)\n      .where(gte(alerts.sentAt, last24h));\n\n    // Email failures (you'd track this with a status field in email_log in a real app)\n    const emailFailures = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(emailLog)\n      .where(\n        and(\n          gte(emailLog.sentAt, last24h),\n          eq(emailLog.type, \"error\")\n        )\n      );\n\n    res.json({\n      users: {\n        byPlan: usersByPlan,\n        total: allUsers.length,\n      },\n      domains: {\n        total: totalDomains,\n        monitored: monitoredDomains,\n      },\n      scans: {\n        last24h: Number(scansLast24h[0]?.count || 0),\n        last7d: Number(scansLast7d[0]?.count || 0),\n      },\n      alerts: {\n        last24h: Number(alertsLast24h[0]?.count || 0),\n      },\n      email: {\n        failuresLast24h: Number(emailFailures[0]?.count || 0),\n      },\n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get events analytics\nrouter.get(\"/metrics/events\", requireAuth, requireAdmin, async (req, res) => {\n  try {\n    const { days = \"30\" } = req.query;\n    const daysNum = parseInt(days as string);\n    const since = new Date(Date.now() - daysNum * 24 * 60 * 60 * 1000);\n\n    // Get all events since date\n    const events = await db\n      .select()\n      .from(appEvents)\n      .where(gte(appEvents.createdAt, since))\n      .orderBy(appEvents.createdAt);\n\n    // Get ALL possible event types from enum\n    const eventTypes = Object.values(AppEventType);\n\n    // Initialize event counts with zeros for all event types\n    const eventCounts: Record<string, number> = {};\n    eventTypes.forEach(eventType => {\n      eventCounts[eventType] = 0;\n    });\n\n    // Fill in actual event counts\n    events.forEach(event => {\n      if (eventCounts.hasOwnProperty(event.event)) {\n        eventCounts[event.event]++;\n      }\n    });\n\n    // Generate full date range\n    const dateRange: string[] = [];\n    for (let i = daysNum - 1; i >= 0; i--) {\n      const date = new Date(Date.now() - i * 24 * 60 * 60 * 1000);\n      dateRange.push(date.toISOString().split('T')[0]);\n    }\n\n    // Initialize timeline with all dates and zero counts for all event types\n    const timelineMap: Record<string, Record<string, number>> = {};\n    dateRange.forEach(date => {\n      timelineMap[date] = {};\n      eventTypes.forEach(eventType => {\n        timelineMap[date][eventType] = 0;\n      });\n    });\n\n    // Fill in actual event counts\n    events.forEach(event => {\n      const date = new Date(event.createdAt).toISOString().split('T')[0];\n      if (timelineMap[date]) {\n        timelineMap[date][event.event] = (timelineMap[date][event.event] || 0) + 1;\n      }\n    });\n\n    // Format timeline data\n    const timeline = dateRange.map(date => ({\n      date,\n      ...timelineMap[date],\n    }));\n\n    res.json({\n      total: events.length,\n      byType: eventCounts,\n      timeline,\n    });\n  } catch (error: any) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":5096},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/examples/Dashboard.tsx":{"content":"import Dashboard from \"../Dashboard\";\n\nexport default function DashboardExample() {\n  return <Dashboard />;\n}\n","size_bytes":110},"client/src/components/examples/NavBar.tsx":{"content":"import NavBar from \"../NavBar\";\n\nexport default function NavBarExample() {\n  return <NavBar />;\n}\n","size_bytes":98},"server/lib/dns-scanner.ts":{"content":"import { promises as dns } from \"dns\";\n\nexport interface DNSRecordStatus {\n  status: \"PASS\" | \"WARN\" | \"FAIL\";\n  record?: string;\n  issues: string[];\n  suggestions: string[];\n}\n\nexport interface DKIMSelectorResult {\n  selector: string;\n  status: \"PASS\" | \"WARN\" | \"FAIL\";\n  record?: string;\n  issues: string[];\n  suggestions: string[];\n}\n\nexport interface DNSScanResult {\n  domain: string;\n  spf: DNSRecordStatus;\n  dkim: {\n    status: \"PASS\" | \"WARN\" | \"FAIL\";\n    selectors: DKIMSelectorResult[];\n  };\n  dmarc: DNSRecordStatus;\n  bimi: DNSRecordStatus;\n  mx: DNSRecordStatus;\n  summary: {\n    overall: \"PASS\" | \"WARN\" | \"FAIL\";\n    criticalIssues: number;\n  };\n}\n\nasync function resolveTxt(domain: string): Promise<string[]> {\n  try {\n    const records = await dns.resolveTxt(domain);\n    return records.map((r) => r.join(\"\"));\n  } catch (error) {\n    return [];\n  }\n}\n\nasync function resolveMx(domain: string): Promise<string[]> {\n  try {\n    const records = await dns.resolveMx(domain);\n    return records.map((r) => `${r.priority} ${r.exchange}`);\n  } catch (error) {\n    return [];\n  }\n}\n\nexport async function scanDNS(domain: string): Promise<DNSScanResult> {\n  const result: DNSScanResult = {\n    domain,\n    spf: await scanSPF(domain),\n    dkim: await scanDKIM(domain),\n    dmarc: await scanDMARC(domain),\n    bimi: await scanBIMI(domain),\n    mx: await scanMX(domain),\n    summary: { overall: \"PASS\", criticalIssues: 0 },\n  };\n\n  let criticalIssues = 0;\n  let hasWarnings = false;\n\n  if (result.spf.status === \"FAIL\") criticalIssues++;\n  if (result.spf.status === \"WARN\") hasWarnings = true;\n\n  if (result.dkim.status === \"FAIL\") criticalIssues++;\n  if (result.dkim.status === \"WARN\") hasWarnings = true;\n\n  if (result.dmarc.status === \"FAIL\") criticalIssues++;\n  if (result.dmarc.status === \"WARN\") hasWarnings = true;\n\n  if (result.mx.status === \"FAIL\") criticalIssues++;\n\n  result.summary.criticalIssues = criticalIssues;\n  \n  if (criticalIssues > 0) {\n    result.summary.overall = \"FAIL\";\n  } else if (hasWarnings) {\n    result.summary.overall = \"WARN\";\n  } else {\n    result.summary.overall = \"PASS\";\n  }\n\n  return result;\n}\n\nasync function scanSPF(domain: string): Promise<DNSRecordStatus> {\n  const records = await resolveTxt(domain);\n  const spfRecords = records.filter((r) => r.startsWith(\"v=spf1\"));\n\n  if (spfRecords.length === 0) {\n    return {\n      status: \"FAIL\",\n      issues: [\"No SPF record found\"],\n      suggestions: [\n        \"Add an SPF record: v=spf1 include:_spf.google.com ~all\",\n        \"Consult your email provider for their recommended SPF configuration\",\n      ],\n    };\n  }\n\n  if (spfRecords.length > 1) {\n    return {\n      status: \"FAIL\",\n      record: spfRecords[0],\n      issues: [\"Multiple SPF records found - only one is allowed\"],\n      suggestions: [\"Combine all SPF records into a single record\"],\n    };\n  }\n\n  const spfRecord = spfRecords[0];\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n\n  if (!spfRecord.includes(\"include:\") && !spfRecord.includes(\"ip4:\") && !spfRecord.includes(\"ip6:\")) {\n    issues.push(\"SPF record doesn't specify any authorized senders\");\n    suggestions.push(\"Add include: or ip4:/ip6: mechanisms to authorize senders\");\n  }\n\n  if (spfRecord.endsWith(\"+all\")) {\n    issues.push(\"SPF record ends with +all (allows all senders)\");\n    suggestions.push(\"Change +all to ~all (soft fail) or -all (hard fail)\");\n  }\n\n  if (spfRecord.endsWith(\"?all\")) {\n    issues.push(\"SPF record ends with ?all (neutral policy)\");\n    suggestions.push(\"Change ?all to ~all (soft fail) or -all (hard fail)\");\n  }\n\n  const lookups = (spfRecord.match(/include:/g) || []).length;\n  if (lookups > 10) {\n    issues.push(`SPF record has ${lookups} DNS lookups (max 10 allowed)`);\n    suggestions.push(\"Reduce the number of include: statements to stay under the 10 lookup limit\");\n  }\n\n  if (issues.length > 0) {\n    return { status: \"WARN\", record: spfRecord, issues, suggestions };\n  }\n\n  return { status: \"PASS\", record: spfRecord, issues: [], suggestions: [] };\n}\n\nasync function scanDKIM(domain: string): Promise<{ status: \"PASS\" | \"WARN\" | \"FAIL\"; selectors: DKIMSelectorResult[] }> {\n  const commonSelectors = [\"default\", \"google\", \"k1\", \"s1\", \"s2\", \"selector1\", \"selector2\", \"dkim\"];\n  const selectors: DKIMSelectorResult[] = [];\n\n  for (const selector of commonSelectors) {\n    const dkimDomain = `${selector}._domainkey.${domain}`;\n    const records = await resolveTxt(dkimDomain);\n\n    if (records.length > 0) {\n      const dkimRecord = records[0];\n      const issues: string[] = [];\n      const suggestions: string[] = [];\n\n      if (dkimRecord.includes(\"k=rsa\") && dkimRecord.match(/p=[A-Za-z0-9+/]{100,200}/)) {\n        issues.push(\"Weak key size detected (likely 1024-bit)\");\n        suggestions.push(\"Upgrade to 2048-bit RSA key for better security\");\n      }\n\n      selectors.push({\n        selector,\n        status: issues.length > 0 ? \"WARN\" : \"PASS\",\n        record: dkimRecord.substring(0, 100) + \"...\",\n        issues,\n        suggestions,\n      });\n    }\n  }\n\n  if (selectors.length === 0) {\n    return {\n      status: \"FAIL\",\n      selectors: [{\n        selector: \"none\",\n        status: \"FAIL\",\n        issues: [\"No DKIM records found\"],\n        suggestions: [\n          \"Add DKIM signing to your email infrastructure\",\n          \"Check with your email provider for DKIM setup instructions\",\n          \"Common selectors: default, google, k1, s1, selector1\",\n        ],\n      }],\n    };\n  }\n\n  const hasWarnings = selectors.some((s) => s.status === \"WARN\");\n  return {\n    status: hasWarnings ? \"WARN\" : \"PASS\",\n    selectors,\n  };\n}\n\nasync function scanDMARC(domain: string): Promise<DNSRecordStatus> {\n  const dmarcDomain = `_dmarc.${domain}`;\n  const records = await resolveTxt(dmarcDomain);\n  const dmarcRecords = records.filter((r) => r.startsWith(\"v=DMARC1\"));\n\n  if (dmarcRecords.length === 0) {\n    return {\n      status: \"FAIL\",\n      issues: [\"No DMARC record found\"],\n      suggestions: [\n        \"Add a DMARC record: v=DMARC1; p=quarantine; rua=mailto:dmarc@\" + domain,\n        \"Start with p=none to monitor, then move to p=quarantine or p=reject\",\n      ],\n    };\n  }\n\n  const dmarcRecord = dmarcRecords[0];\n  const issues: string[] = [];\n  const suggestions: string[] = [];\n\n  if (dmarcRecord.includes(\"p=none\")) {\n    issues.push(\"DMARC policy is set to 'none' (monitoring only)\");\n    suggestions.push(\"Change policy to 'quarantine' or 'reject' for enforcement\");\n  }\n\n  if (!dmarcRecord.includes(\"rua=\")) {\n    issues.push(\"No aggregate reporting address (rua) configured\");\n    suggestions.push(\"Add rua=mailto:dmarc@\" + domain + \" to receive reports\");\n  }\n\n  if (!dmarcRecord.includes(\"ruf=\") && !dmarcRecord.includes(\"rua=\")) {\n    suggestions.push(\"Consider adding ruf= for forensic reports\");\n  }\n\n  if (issues.length > 0) {\n    return { status: \"WARN\", record: dmarcRecord, issues, suggestions };\n  }\n\n  return { status: \"PASS\", record: dmarcRecord, issues: [], suggestions: [] };\n}\n\nasync function scanBIMI(domain: string): Promise<DNSRecordStatus> {\n  const bimiDomain = `default._bimi.${domain}`;\n  const records = await resolveTxt(bimiDomain);\n  const bimiRecords = records.filter((r) => r.startsWith(\"v=BIMI1\"));\n\n  if (bimiRecords.length === 0) {\n    return {\n      status: \"WARN\",\n      issues: [\"No BIMI record found\"],\n      suggestions: [\n        \"BIMI is optional but displays your logo in supported email clients\",\n        \"Requires verified mark certificate (VMC) from authorized providers\",\n      ],\n    };\n  }\n\n  const bimiRecord = bimiRecords[0];\n  return { status: \"PASS\", record: bimiRecord, issues: [], suggestions: [] };\n}\n\nasync function scanMX(domain: string): Promise<DNSRecordStatus> {\n  const mxRecords = await resolveMx(domain);\n\n  if (mxRecords.length === 0) {\n    return {\n      status: \"FAIL\",\n      issues: [\"No MX records found\"],\n      suggestions: [\"Add MX records to receive email for this domain\"],\n    };\n  }\n\n  return {\n    status: \"PASS\",\n    record: mxRecords.join(\", \"),\n    issues: [],\n    suggestions: [],\n  };\n}\n","size_bytes":8071},"server/services/pdfExport.ts":{"content":"import { chromium } from \"playwright\";\nimport { storage } from \"../storage\";\nimport { randomBytes } from \"crypto\";\nimport { mkdir, writeFile } from \"fs/promises\";\nimport { join } from \"path\";\n\nconst EXPORTS_DIR = \"/data/exports\";\n\ninterface PdfExportOptions {\n  token: string;\n  teamId?: string;\n  brandLogo?: string;\n  brandColor?: string;\n}\n\nexport async function generatePdfExport(options: PdfExportOptions): Promise<{\n  filePath: string;\n  fileName: string;\n  bytesSize: number;\n}> {\n  const browser = await chromium.launch({\n    headless: true,\n  });\n\n  try {\n    const page = await browser.newPage();\n\n    const publicReport = await storage.getPublicReportByToken(options.token);\n    if (!publicReport) {\n      throw new Error(\"Public report not found\");\n    }\n\n    const domain = await storage.getDomain(publicReport.domainId);\n    if (!domain) {\n      throw new Error(\"Domain not found\");\n    }\n\n    const scanRun = await storage.getScanRun(publicReport.runId);\n    if (!scanRun) {\n      throw new Error(\"Scan run not found\");\n    }\n    \n    const runDate = scanRun\n      ? new Date(scanRun.createdAt).toISOString().split(\"T\")[0].replace(/-/g, \"\")\n      : new Date().toISOString().split(\"T\")[0].replace(/-/g, \"\");\n\n    let brandLogo = options.brandLogo;\n    let brandColor = options.brandColor;\n\n    if (options.teamId) {\n      const team = await storage.getTeamById(options.teamId);\n      if (team) {\n        brandLogo = team.brandLogo || brandLogo;\n        brandColor = team.brandColor || brandColor;\n      }\n    }\n\n    let url = `http://localhost:5000/r/${options.token}?pdf=1`;\n    \n    if (options.teamId) {\n      url += `&brand=${options.teamId}`;\n    }\n\n    await page.goto(url, {\n      waitUntil: \"networkidle\",\n      timeout: 30000,\n    });\n\n    await page.waitForSelector(\"#report-ready\", { timeout: 10000 }).catch(() => {\n      console.log(\"Report ready element not found, proceeding anyway\");\n    });\n\n    if (brandLogo || brandColor) {\n      await page.evaluate(\n        ({ logo, color }) => {\n          if (color) {\n            document.documentElement.style.setProperty(\"--brand-primary\", color);\n          }\n          if (logo) {\n            const logoEl = document.querySelector(\"[data-brand-logo]\");\n            if (logoEl) {\n              (logoEl as HTMLImageElement).src = logo;\n            }\n          }\n        },\n        { logo: brandLogo, color: brandColor }\n      );\n    }\n\n    await mkdir(EXPORTS_DIR, { recursive: true });\n\n    const fileName = `${domain.name}-${runDate}.pdf`;\n    const filePath = join(EXPORTS_DIR, fileName);\n\n    const pdfBuffer = await page.pdf({\n      format: \"A4\",\n      margin: {\n        top: \"12mm\",\n        right: \"12mm\",\n        bottom: \"12mm\",\n        left: \"12mm\",\n      },\n      printBackground: true,\n      preferCSSPageSize: false,\n    });\n\n    await writeFile(filePath, pdfBuffer);\n\n    return {\n      filePath,\n      fileName,\n      bytesSize: pdfBuffer.length,\n    };\n  } finally {\n    await browser.close();\n  }\n}\n","size_bytes":2985},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/services/diffEngine.ts":{"content":"import type { ScanRecord } from \"@shared/schema\";\nimport crypto from \"crypto\";\n\ninterface DiffResult {\n  added: Array<{ recordType: string; selector: string | null; value: string }>;\n  removed: Array<{ recordType: string; selector: string | null; value: string }>;\n  changed: Array<{ recordType: string; selector: string | null; oldValue: string; newValue: string }>;\n  severity: \"info\" | \"warn\" | \"fail\";\n}\n\nfunction generateValueHash(value: string): string {\n  return crypto.createHash(\"sha256\").update(value).digest(\"hex\").substring(0, 16);\n}\n\nexport function diffScanRecords(\n  oldRecords: ScanRecord[],\n  newRecords: ScanRecord[]\n): DiffResult {\n  const oldMap = new Map<string, ScanRecord>();\n  const newMap = new Map<string, ScanRecord>();\n\n  for (const record of oldRecords) {\n    const key = `${record.recordType}:${record.selector || \"\"}`;\n    oldMap.set(key, record);\n  }\n\n  for (const record of newRecords) {\n    const key = `${record.recordType}:${record.selector || \"\"}`;\n    newMap.set(key, record);\n  }\n\n  const added: Array<{ recordType: string; selector: string | null; value: string }> = [];\n  const removed: Array<{ recordType: string; selector: string | null; value: string }> = [];\n  const changed: Array<{ recordType: string; selector: string | null; oldValue: string; newValue: string }> = [];\n\n  for (const [key, newRecord] of newMap) {\n    const oldRecord = oldMap.get(key);\n    if (!oldRecord) {\n      added.push({\n        recordType: newRecord.recordType,\n        selector: newRecord.selector,\n        value: newRecord.rawValue,\n      });\n    } else if (oldRecord.valueHash !== newRecord.valueHash) {\n      changed.push({\n        recordType: newRecord.recordType,\n        selector: newRecord.selector,\n        oldValue: oldRecord.rawValue,\n        newValue: newRecord.rawValue,\n      });\n    }\n  }\n\n  for (const [key, oldRecord] of oldMap) {\n    if (!newMap.has(key)) {\n      removed.push({\n        recordType: oldRecord.recordType,\n        selector: oldRecord.selector,\n        value: oldRecord.rawValue,\n      });\n    }\n  }\n\n  let severity: \"info\" | \"warn\" | \"fail\" = \"info\";\n\n  for (const record of newRecords) {\n    if (record.verdict === \"FAIL\") {\n      severity = \"fail\";\n      break;\n    }\n    if (record.verdict === \"WARN\") {\n      severity = \"warn\";\n    }\n  }\n\n  if (changed.length > 0 && severity === \"info\") {\n    severity = \"warn\";\n  }\n\n  if (removed.length > 0 && severity === \"info\") {\n    severity = \"warn\";\n  }\n\n  return { added, removed, changed, severity };\n}\n\nexport { generateValueHash };\n","size_bytes":2537},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/pricing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function PricingPage() {\n  const [, setLocation] = useLocation();\n  const { isAuthenticated } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const { data: planData } = useQuery<{ plan: string }>({\n    queryKey: [\"/api/billing/plan\"],\n    enabled: isAuthenticated,\n    retry: 1,\n  });\n\n  const isPro = planData?.plan === \"pro\";\n\n  const handleUpgrade = async () => {\n    if (!isAuthenticated) {\n      setLocation(\"/login\");\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const res = await apiRequest(\"POST\", \"/api/stripe/checkout\", {});\n      const response = await res.json() as { url: string };\n\n      if (response.url) {\n        window.location.href = response.url;\n      } else {\n        throw new Error(\"No checkout URL returned\");\n      }\n    } catch (error: any) {\n      console.error(\"Checkout error:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to start checkout. Please try again.\",\n        variant: \"destructive\",\n      });\n      setIsLoading(false);\n    }\n  };\n\n  const handleManageBilling = () => {\n    window.location.href = \"/api/billing/portal\";\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-64px)] p-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"text-pricing-title\">\n            Choose Your Plan\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">\n            Get started with email deliverability monitoring\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n          <Card data-testid=\"card-plan-free\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Free</CardTitle>\n              <CardDescription>Perfect for getting started</CardDescription>\n              <div className=\"mt-4\">\n                <span className=\"text-4xl font-bold\">$0</span>\n                <span className=\"text-muted-foreground\">/month</span>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>1 scan per day</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Basic deliverability report</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Public shareable reports</span>\n                </div>\n              </div>\n              <Button \n                variant=\"outline\" \n                className=\"w-full\" \n                disabled\n                data-testid=\"button-free-plan\"\n              >\n                Current Plan\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-primary\" data-testid=\"card-plan-pro\">\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">Pro</CardTitle>\n              <CardDescription>For serious email senders</CardDescription>\n              <div className=\"mt-4\">\n                <span className=\"text-4xl font-bold\">$19</span>\n                <span className=\"text-muted-foreground\">/month</span>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span className=\"font-semibold\">Unlimited scans</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Advanced deliverability reports</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Email health alerts</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Team sharing & collaboration</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Check className=\"h-5 w-5 text-primary\" />\n                  <span>Priority support</span>\n                </div>\n              </div>\n              <Button \n                className=\"w-full\" \n                onClick={isPro ? handleManageBilling : handleUpgrade}\n                disabled={isLoading}\n                data-testid={isPro ? \"button-manage-billing\" : \"button-upgrade-pro\"}\n              >\n                {isLoading ? \"Redirecting...\" : (isPro ? \"Manage Billing\" : \"Upgrade to Pro\")}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5592},"replit.md":{"content":"# Inbox Deliverability Copilot\n\n## Overview\nThe Inbox Deliverability Copilot is a web application designed to help businesses comply with bulk-sender rules for email providers like Gmail and Yahoo. It achieves this by scanning DNS records (SPF, DKIM, DMARC, BIMI, MX), linting email templates for potential spam triggers, and tracking email deliverability metrics with a 0-100 scoring system. The application provides a comprehensive history of scans, including change detection, to ensure continuous compliance and deliverability. The project's ambition is to offer a full-featured solution with authentication, persistence, subscription management (via Stripe), automated daily monitoring, and an API for accessing scan data and diffs.\n\n## User Preferences\nI prefer simple language. I want iterative development. Ask before making major changes. I prefer detailed explanations.\n\n## Recent Changes (October 8, 2025)\n### Enterprise Features Expansion\n- **Multi-Tier Plans**: Added Free/Pro/Agency tiers with enforced domain limits (1/10/unlimited)\n  - New tables: `plan_limits`, plan-aware middleware for capacity checking\n- **Teams & Collaboration**: Complete ACL system with owner/admin/viewer roles\n  - New tables: `teams`, `team_members`, `team_domains`\n  - Access control middleware for permission checks\n- **Slack/Webhook Notifications**: User-configurable alert destinations\n  - New table: `destinations` with URL validation and SSRF protection\n  - Notification service delivers alerts to enabled channels\n- **Per-Domain Alert Preferences**: Override global settings per domain\n  - New table: `domain_alert_prefs` with field-by-field merging\n  - Threshold filtering (info/warn/fail) before alert creation\n- **Audit Logging**: Comprehensive event tracking across all operations\n  - New table: `audit_log` records all events with actor, resource, metadata\n  - Events: DOMAIN_CREATED, ALERT_SENT, TEAM_CREATED, MEMBER_ADDED, etc.\n- **Public Share Links**: Shareable scan reports with expiration support\n  - New table: `public_reports` with UUID-based anonymous access\n- **Admin Metrics Dashboard**: Platform-wide statistics dashboard with proper access control\n  - New routes: `/api/admin/metrics` for user/domain/scan/alert counts\n  - UI: `/admin` route with Agency-tier access control (plan-based proxy)\n  - Security: Loading state handling, stale error clearing, retry logic\n  - Access: Only Agency users can view platform metrics and admin dashboard\n- **Monitoring Job Updates**: Smart alerting with preference-aware notifications\n  - Loads domain + user preferences, merges field-by-field\n  - Filters channels, checks thresholds, only logs when actually sent\n- **Branded PDF Exports (Agency Tier)**: White-label PDF deliverability reports\n  - New tables: `report_exports`, `app_events`; added `brandLogo` and `brandColor` to teams\n  - Service: `services/pdfExport.ts` using Playwright for high-quality PDF generation\n  - Route: `POST /api/reports/:token/export` with auth, plan, and team membership validation\n  - UI: Download button on public reports (only visible to Agency users with pdf feature)\n  - Features: A4 format, team branding (logo/color), accurate file metadata, audit logging\n\n## System Architecture\n\n### UI/UX Decisions\nThe application features a dark mode primary theme with a professional blue accent. The UI is status-driven, utilizing green, amber, and red badges to indicate compliance levels. Deliverability scores are displayed with badges and sparklines for trend visualization. The Inter font is used for general UI elements, while JetBrains Mono is used for technical content, drawing inspiration from the aesthetics of Linear and Vercel.\n\n### Technical Implementations\nThe application is built with a React frontend (TypeScript, Vite) and an Express.js backend (TypeScript). It uses PostgreSQL for data persistence.\n\n**Key Features:**\n- **Free DNS Scanning**: Instant scan results without requiring a login.\n- **Deliverability Scoring**: A 0-100 point system with a detailed breakdown based on SPF, DKIM, DMARC, BIMI, and MX records, including penalties for warnings and failures.\n- **Scan History & Change Detection**: Stores a complete audit trail of all scans and automatically detects changes between runs, categorizing them by severity (info/warn/fail).\n- **Daily Monitoring**: For Pro users, automated daily scans are performed at midnight UTC.\n- **Public Reports**: Shareable scan reports with unique slugs for easy collaboration.\n- **Template Linting**: Identifies spam triggers within email templates.\n- **Subscription Management**: Integrated with Stripe for Pro, Agency, and Free tiers, enforcing plan limits and feature access.\n- **Teams & Access Control**: Collaboration features with role-based permissions (owner/admin/viewer) and shared domain access.\n- **Notifications**: Configurable Slack/webhook notifications with per-domain alert preferences and severity thresholds.\n- **Audit Logging**: Comprehensive event tracking for all operations.\n\n### System Design Choices\n- **Database Schema**: Comprehensive PostgreSQL schema with 20+ tables\n  - Core: users, domains, reports\n  - Monitoring: scan_runs, scan_records, scan_diffs, alerts\n  - Enterprise: plan_limits, teams, team_members, team_domains, destinations, domain_alert_prefs, public_reports, audit_log\n- **Backend Services**: \n  - `services/scoring.ts`: Deliverability score calculation (0-100 with breakdown)\n  - `services/diffEngine.ts`: Scan comparison and change detection\n  - `services/scanRunner.ts`: Complete scan workflow orchestration  \n  - `services/auditLog.ts`: Event tracking across all operations\n  - `services/notifications.ts`: Slack/webhook delivery with channel filtering\n  - `services/pdfExport.ts`: Branded PDF generation using Playwright (Agency tier only)\n- **Middleware**: \n  - `middleware/planLimits.ts`: Domain capacity and feature enforcement\n  - `middleware/accessControl.ts`: Team-based permission checking\n- **Routes**: Modular API structure\n  - `routes.ts`: Core domains, scans, reports, alert prefs, audit\n  - `routes/destinations.ts`: Slack/webhook destination CRUD\n  - `routes/publicReports.ts`: Public share links\n  - `routes/teams.ts`: Team management and ACL\n  - `routes/admin.ts`: Admin metrics dashboard\n- **Jobs**: `jobs/monitor.ts` - Daily UTC midnight cron with:\n  - Field-by-field preference merging (domain overrides user)\n  - Severity threshold checking before alert creation\n  - Channel filtering based on enablement flags\n  - Accurate audit logging (only logs when notifications sent)\n\n## External Dependencies\n- **PostgreSQL**: Primary database for all persistent data.\n- **Stripe**: For subscription management, checkout, and webhook event handling.\n- **Passport.js**: Used for user authentication (email/password).\n- **Nodemailer**: (Planned) for email notifications and weekly digests.\n- **Slack Webhooks**: For sending notifications to Slack channels.\n- **Generic HTTP Webhooks**: For sending notifications to custom endpoints.","size_bytes":6987},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\n\npassport.use(\n  new LocalStrategy(\n    { usernameField: \"email\", passwordField: \"password\" },\n    async (email, password, done) => {\n      try {\n        const user = await storage.getUserByEmail(email);\n        if (!user || !user.passwordHash) {\n          return done(null, false, { message: \"Invalid email or password\" });\n        }\n\n        const isValid = await bcrypt.compare(password, user.passwordHash);\n        if (!isValid) {\n          return done(null, false, { message: \"Invalid email or password\" });\n        }\n\n        return done(null, user);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  )\n);\n\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error);\n  }\n});\n\nexport { passport };\n","size_bytes":1062},"server/db-storage.ts":{"content":"import { eq, and, desc, sql } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport {\n  users,\n  domains,\n  reports,\n  healthPoints,\n  templateChecks,\n  scanRuns,\n  scanRecords,\n  scanDiffs,\n  alerts,\n  alertPrefs,\n  emailLog,\n  destinations,\n  planLimits,\n  teams,\n  teamMembers,\n  teamDomains,\n  auditLog,\n  publicReports,\n  reportExports,\n  domainAlertPrefs,\n  appEvents,\n  type User,\n  type InsertUser,\n  type Domain,\n  type InsertDomain,\n  type Report,\n  type InsertReport,\n  type HealthPoint,\n  type InsertHealthPoint,\n  type TemplateCheck,\n  type InsertTemplateCheck,\n  type ScanRun,\n  type InsertScanRun,\n  type ScanRecord,\n  type InsertScanRecord,\n  type ScanDiff,\n  type InsertScanDiff,\n  type Alert,\n  type InsertAlert,\n  type AlertPref,\n  type InsertAlertPref,\n  type EmailLog,\n  type InsertEmailLog,\n  type Destination,\n  type InsertDestination,\n  type PlanLimit,\n  type InsertPlanLimit,\n  type Team,\n  type InsertTeam,\n  type TeamMember,\n  type InsertTeamMember,\n  type TeamDomain,\n  type InsertTeamDomain,\n  type AuditLog,\n  type InsertAuditLog,\n  type PublicReport,\n  type InsertPublicReport,\n  type ReportExport,\n  type InsertReportExport,\n  type DomainAlertPref,\n  type InsertDomainAlertPref,\n  type AppEvent,\n  type InsertAppEvent,\n} from \"@shared/schema\";\nimport type { IStorage } from \"./storage\";\n\nexport class DbStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email));\n    return result[0];\n  }\n\n  async getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.stripeCustomerId, stripeCustomerId));\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({ stripeCustomerId, stripeSubscriptionId })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async updateUserProStatus(userId: string, isPro: boolean): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({ isPro: isPro ? \"true\" : \"false\" })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async upgradeUserToPro(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({ \n        stripeCustomerId, \n        stripeSubscriptionId,\n        isPro: \"true\"\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async getDomain(id: string): Promise<Domain | undefined> {\n    const result = await db.select().from(domains).where(eq(domains.id, id));\n    return result[0];\n  }\n\n  async getDomainsByUserId(userId: string): Promise<Domain[]> {\n    return await db.select().from(domains).where(eq(domains.userId, userId));\n  }\n\n  async getDomainByName(userId: string, name: string): Promise<Domain | undefined> {\n    const result = await db\n      .select()\n      .from(domains)\n      .where(and(eq(domains.userId, userId), eq(domains.name, name)));\n    return result[0];\n  }\n\n  async createDomain(domain: InsertDomain): Promise<Domain> {\n    const result = await db.insert(domains).values(domain).returning();\n    return result[0];\n  }\n\n  async deleteDomain(id: string): Promise<void> {\n    await db.delete(domains).where(eq(domains.id, id));\n  }\n\n  async getReport(id: string): Promise<Report | undefined> {\n    const result = await db.select().from(reports).where(eq(reports.id, id));\n    return result[0];\n  }\n\n  async getReportBySlug(slug: string): Promise<Report | undefined> {\n    const result = await db.select().from(reports).where(eq(reports.slug, slug));\n    return result[0];\n  }\n\n  async getReportsByDomainId(domainId: string): Promise<Report[]> {\n    return await db\n      .select()\n      .from(reports)\n      .where(eq(reports.domainId, domainId))\n      .orderBy(desc(reports.createdAt));\n  }\n\n  async createReport(report: InsertReport): Promise<Report> {\n    const result = await db.insert(reports).values(report).returning();\n    return result[0];\n  }\n\n  async getHealthPointsByDomainId(domainId: string): Promise<HealthPoint[]> {\n    return await db\n      .select()\n      .from(healthPoints)\n      .where(eq(healthPoints.domainId, domainId))\n      .orderBy(desc(healthPoints.createdAt));\n  }\n\n  async createHealthPoint(healthPoint: InsertHealthPoint): Promise<HealthPoint> {\n    const result = await db.insert(healthPoints).values(healthPoint).returning();\n    return result[0];\n  }\n\n  async getTemplateChecksByUserId(userId: string): Promise<TemplateCheck[]> {\n    return await db\n      .select()\n      .from(templateChecks)\n      .where(eq(templateChecks.userId, userId))\n      .orderBy(desc(templateChecks.createdAt));\n  }\n\n  async createTemplateCheck(templateCheck: InsertTemplateCheck): Promise<TemplateCheck> {\n    const result = await db.insert(templateChecks).values(templateCheck).returning();\n    return result[0];\n  }\n\n  async getScanRun(id: string): Promise<ScanRun | undefined> {\n    const result = await db.select().from(scanRuns).where(eq(scanRuns.id, id));\n    return result[0];\n  }\n\n  async getScanRunsByDomainId(domainId: string, limit?: number): Promise<ScanRun[]> {\n    const query = db\n      .select()\n      .from(scanRuns)\n      .where(eq(scanRuns.domainId, domainId))\n      .orderBy(desc(scanRuns.createdAt));\n    \n    return limit ? await query.limit(limit) : await query;\n  }\n\n  async getScansSince(userId: string, since: Date): Promise<ScanRun[]> {\n    const result = await db\n      .select()\n      .from(scanRuns)\n      .innerJoin(domains, eq(scanRuns.domainId, domains.id))\n      .where(and(\n        eq(domains.userId, userId),\n        sql`${scanRuns.createdAt} >= ${since.toISOString()}`\n      ))\n      .orderBy(desc(scanRuns.createdAt));\n    return result.map(r => r.scan_runs);\n  }\n\n  async getLatestScanRunByDomainId(domainId: string): Promise<ScanRun | undefined> {\n    const result = await db\n      .select()\n      .from(scanRuns)\n      .where(eq(scanRuns.domainId, domainId))\n      .orderBy(desc(scanRuns.createdAt))\n      .limit(1);\n    return result[0];\n  }\n\n  async getScanRunByDomainIdAndDate(domainId: string, date: string): Promise<ScanRun | undefined> {\n    const result = await db\n      .select()\n      .from(scanRuns)\n      .where(and(\n        eq(scanRuns.domainId, domainId),\n        sql`DATE(${scanRuns.startedAt}) = ${date}`\n      ))\n      .limit(1);\n    return result[0];\n  }\n\n  async createScanRun(scanRun: InsertScanRun): Promise<ScanRun> {\n    const result = await db.insert(scanRuns).values(scanRun).returning();\n    return result[0];\n  }\n\n  async updateScanRun(id: string, data: Partial<InsertScanRun>): Promise<ScanRun> {\n    const result = await db\n      .update(scanRuns)\n      .set(data)\n      .where(eq(scanRuns.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getScanRecordsByRunId(runId: string): Promise<ScanRecord[]> {\n    return await db\n      .select()\n      .from(scanRecords)\n      .where(eq(scanRecords.runId, runId));\n  }\n\n  async createScanRecord(scanRecord: InsertScanRecord): Promise<ScanRecord> {\n    const result = await db.insert(scanRecords).values(scanRecord).returning();\n    return result[0];\n  }\n\n  async getLatestScanDiffByDomainId(domainId: string): Promise<ScanDiff | undefined> {\n    const result = await db\n      .select()\n      .from(scanDiffs)\n      .innerJoin(scanRuns, eq(scanDiffs.runId, scanRuns.id))\n      .where(eq(scanRuns.domainId, domainId))\n      .orderBy(desc(scanRuns.createdAt))\n      .limit(1);\n    return result[0]?.scan_diffs;\n  }\n\n  async createScanDiff(scanDiff: InsertScanDiff): Promise<ScanDiff> {\n    const result = await db.insert(scanDiffs).values(scanDiff).returning();\n    return result[0];\n  }\n\n  async getAlertsByDomainId(domainId: string): Promise<Alert[]> {\n    return await db\n      .select()\n      .from(alerts)\n      .where(eq(alerts.domainId, domainId))\n      .orderBy(desc(alerts.sentAt));\n  }\n\n  async getAlertsByUserId(userId: string): Promise<Alert[]> {\n    const result = await db\n      .select()\n      .from(alerts)\n      .innerJoin(domains, eq(alerts.domainId, domains.id))\n      .where(eq(domains.userId, userId))\n      .orderBy(desc(alerts.sentAt));\n    return result.map(r => r.alerts);\n  }\n\n  async getAlertsSince(userId: string, since: Date): Promise<Alert[]> {\n    const result = await db\n      .select()\n      .from(alerts)\n      .innerJoin(domains, eq(alerts.domainId, domains.id))\n      .where(and(\n        eq(domains.userId, userId),\n        sql`${alerts.sentAt} >= ${since.toISOString()}`\n      ))\n      .orderBy(desc(alerts.sentAt));\n    return result.map(r => r.alerts);\n  }\n\n  async createAlert(alert: InsertAlert): Promise<Alert> {\n    const result = await db.insert(alerts).values(alert).returning();\n    return result[0];\n  }\n\n  async getAlertPref(userId: string): Promise<AlertPref | undefined> {\n    const result = await db\n      .select()\n      .from(alertPrefs)\n      .where(eq(alertPrefs.userId, userId));\n    return result[0];\n  }\n\n  async upsertAlertPref(alertPref: InsertAlertPref): Promise<AlertPref> {\n    const result = await db\n      .insert(alertPrefs)\n      .values(alertPref)\n      .onConflictDoUpdate({\n        target: alertPrefs.userId,\n        set: alertPref,\n      })\n      .returning();\n    return result[0];\n  }\n\n  async createEmailLog(log: InsertEmailLog): Promise<EmailLog> {\n    const result = await db.insert(emailLog).values(log).returning();\n    return result[0];\n  }\n\n  async getEmailLogsByUserId(userId: string, emailType?: string): Promise<EmailLog[]> {\n    if (emailType) {\n      return await db\n        .select()\n        .from(emailLog)\n        .where(and(eq(emailLog.userId, userId), eq(emailLog.type, emailType)))\n        .orderBy(desc(emailLog.sentAt));\n    }\n    return await db\n      .select()\n      .from(emailLog)\n      .where(eq(emailLog.userId, userId))\n      .orderBy(desc(emailLog.sentAt));\n  }\n\n  async updateDomainMonitoring(domainId: string, enabled: boolean): Promise<Domain> {\n    const result = await db\n      .update(domains)\n      .set({ monitoringEnabled: enabled ? \"true\" : \"false\" })\n      .where(eq(domains.id, domainId))\n      .returning();\n    return result[0];\n  }\n\n  async getMonitoredDomains(): Promise<Domain[]> {\n    const result = await db\n      .select({\n        id: domains.id,\n        userId: domains.userId,\n        name: domains.name,\n        monitoringEnabled: domains.monitoringEnabled,\n        createdAt: domains.createdAt,\n      })\n      .from(domains)\n      .innerJoin(users, eq(domains.userId, users.id))\n      .where(and(eq(domains.monitoringEnabled, \"true\"), eq(users.isPro, \"true\")));\n    return result;\n  }\n\n  async getDestinationsByUserId(userId: string): Promise<Destination[]> {\n    return await db.select().from(destinations).where(eq(destinations.userId, userId));\n  }\n\n  async createDestination(destination: InsertDestination): Promise<Destination> {\n    const result = await db.insert(destinations).values(destination).returning();\n    return result[0];\n  }\n\n  async deleteDestination(id: string): Promise<void> {\n    await db.delete(destinations).where(eq(destinations.id, id));\n  }\n\n  async updateDestinationEnabled(id: string, enabled: boolean): Promise<Destination> {\n    const result = await db\n      .update(destinations)\n      .set({ enabled: enabled ? \"true\" : \"false\" })\n      .where(eq(destinations.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async getPlanLimit(plan: string): Promise<PlanLimit | undefined> {\n    const result = await db.select().from(planLimits).where(eq(planLimits.plan, plan));\n    return result[0];\n  }\n\n  async getAllPlanLimits(): Promise<PlanLimit[]> {\n    return await db.select().from(planLimits);\n  }\n\n  async getTeamsByUserId(userId: string): Promise<Team[]> {\n    return await db.select().from(teams).where(eq(teams.ownerUserId, userId));\n  }\n\n  async getTeamById(id: string): Promise<Team | undefined> {\n    const result = await db.select().from(teams).where(eq(teams.id, id));\n    return result[0];\n  }\n\n  async createTeam(team: InsertTeam): Promise<Team> {\n    const result = await db.insert(teams).values(team).returning();\n    return result[0];\n  }\n\n  async deleteTeam(id: string): Promise<void> {\n    await db.delete(teams).where(eq(teams.id, id));\n  }\n\n  async getTeamMembersByTeamId(teamId: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).where(eq(teamMembers.teamId, teamId));\n  }\n\n  async getTeamMembersByUserId(userId: string): Promise<TeamMember[]> {\n    return await db.select().from(teamMembers).where(eq(teamMembers.userId, userId));\n  }\n\n  async createTeamMember(teamMember: InsertTeamMember): Promise<TeamMember> {\n    const result = await db.insert(teamMembers).values(teamMember).returning();\n    return result[0];\n  }\n\n  async deleteTeamMember(teamId: string, userId: string): Promise<void> {\n    await db.delete(teamMembers).where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.userId, userId)));\n  }\n\n  async updateTeamMemberRole(teamId: string, userId: string, role: string): Promise<TeamMember> {\n    const result = await db\n      .update(teamMembers)\n      .set({ role })\n      .where(and(eq(teamMembers.teamId, teamId), eq(teamMembers.userId, userId)))\n      .returning();\n    return result[0];\n  }\n\n  async getTeamDomainsByTeamId(teamId: string): Promise<TeamDomain[]> {\n    return await db.select().from(teamDomains).where(eq(teamDomains.teamId, teamId));\n  }\n\n  async getTeamDomainsByDomainId(domainId: string): Promise<TeamDomain[]> {\n    return await db.select().from(teamDomains).where(eq(teamDomains.domainId, domainId));\n  }\n\n  async createTeamDomain(teamDomain: InsertTeamDomain): Promise<TeamDomain> {\n    const result = await db.insert(teamDomains).values(teamDomain).returning();\n    return result[0];\n  }\n\n  async deleteTeamDomain(teamId: string, domainId: string): Promise<void> {\n    await db.delete(teamDomains).where(and(eq(teamDomains.teamId, teamId), eq(teamDomains.domainId, domainId)));\n  }\n\n  async createAuditLog(log: InsertAuditLog): Promise<AuditLog> {\n    const result = await db.insert(auditLog).values(log).returning();\n    return result[0];\n  }\n\n  async getAuditLogsByDomainId(domainId: string, limit?: number): Promise<AuditLog[]> {\n    let query = db\n      .select()\n      .from(auditLog)\n      .where(eq(auditLog.domainId, domainId))\n      .orderBy(desc(auditLog.createdAt));\n    \n    if (limit) {\n      query = query.limit(limit) as any;\n    }\n    \n    return await query;\n  }\n\n  async getAuditLogsByUserId(userId: string, limit?: number): Promise<AuditLog[]> {\n    let query = db\n      .select()\n      .from(auditLog)\n      .where(eq(auditLog.actorUserId, userId))\n      .orderBy(desc(auditLog.createdAt));\n    \n    if (limit) {\n      query = query.limit(limit) as any;\n    }\n    \n    return await query;\n  }\n\n  async getPublicReportByToken(token: string): Promise<PublicReport | undefined> {\n    const result = await db.select().from(publicReports).where(eq(publicReports.token, token));\n    return result[0];\n  }\n\n  async getPublicReportsByDomainId(domainId: string): Promise<PublicReport[]> {\n    return await db.select().from(publicReports).where(eq(publicReports.domainId, domainId));\n  }\n\n  async createPublicReport(publicReport: InsertPublicReport): Promise<PublicReport> {\n    const result = await db.insert(publicReports).values(publicReport).returning();\n    return result[0];\n  }\n\n  async deletePublicReport(id: string): Promise<void> {\n    await db.delete(publicReports).where(eq(publicReports.id, id));\n  }\n\n  async getReportExportsByDomainId(domainId: string): Promise<ReportExport[]> {\n    return await db.select().from(reportExports).where(eq(reportExports.domainId, domainId));\n  }\n\n  async createReportExport(reportExport: InsertReportExport): Promise<ReportExport> {\n    const result = await db.insert(reportExports).values(reportExport).returning();\n    return result[0];\n  }\n\n  async getDomainAlertPref(domainId: string): Promise<DomainAlertPref | undefined> {\n    const result = await db.select().from(domainAlertPrefs).where(eq(domainAlertPrefs.domainId, domainId));\n    return result[0];\n  }\n\n  async upsertDomainAlertPref(domainAlertPref: InsertDomainAlertPref): Promise<DomainAlertPref> {\n    const result = await db\n      .insert(domainAlertPrefs)\n      .values(domainAlertPref)\n      .onConflictDoUpdate({\n        target: domainAlertPrefs.domainId,\n        set: domainAlertPref,\n      })\n      .returning();\n    return result[0];\n  }\n\n  async updateUserPlan(userId: string, plan: string): Promise<User> {\n    const result = await db\n      .update(users)\n      .set({ plan })\n      .where(eq(users.id, userId))\n      .returning();\n    return result[0];\n  }\n\n  async createAppEvent(appEvent: InsertAppEvent): Promise<AppEvent> {\n    const result = await db.insert(appEvents).values(appEvent).returning();\n    return result[0];\n  }\n\n  async getAppEventsByUserId(userId: string, limit: number = 100): Promise<AppEvent[]> {\n    return await db\n      .select()\n      .from(appEvents)\n      .where(eq(appEvents.userId, userId))\n      .orderBy(desc(appEvents.createdAt))\n      .limit(limit);\n  }\n\n  async getAppEventsByEvent(event: string, limit: number = 100): Promise<AppEvent[]> {\n    return await db\n      .select()\n      .from(appEvents)\n      .where(eq(appEvents.event, event))\n      .orderBy(desc(appEvents.createdAt))\n      .limit(limit);\n  }\n}\n","size_bytes":17837},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NavBar from \"@/components/NavBar\";\nimport Home from \"@/pages/home\";\nimport DashboardPage from \"@/pages/dashboard\";\nimport ScanPage from \"@/pages/scan\";\nimport TemplateLintPage from \"@/pages/template-lint\";\nimport ReportPage from \"@/pages/report\";\nimport LoginPage from \"@/pages/login\";\nimport SignupPage from \"@/pages/signup\";\nimport PricingPage from \"@/pages/pricing\";\nimport SubscribePage from \"@/pages/subscribe\";\nimport SettingsPage from \"@/pages/settings\";\nimport AdminDashboard from \"@/pages/admin\";\nimport NotFound from \"@/pages/not-found\";\nimport Forbidden from \"@/pages/forbidden\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/pricing\" component={PricingPage} />\n      <Route path=\"/subscribe\" component={SubscribePage} />\n      <Route path=\"/dashboard\" component={DashboardPage} />\n      <Route path=\"/scan\" component={ScanPage} />\n      <Route path=\"/template-lint\" component={TemplateLintPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route path=\"/admin\" component={AdminDashboard} />\n      <Route path=\"/forbidden\" component={Forbidden} />\n      <Route path=\"/report/:slug\" component={ReportPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          <NavBar />\n          <Router />\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1943},"client/src/pages/home.tsx":{"content":"import LandingHero from \"@/components/LandingHero\";\n\nexport default function Home() {\n  return <LandingHero />;\n}\n","size_bytes":114},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/jobs/monitor.ts":{"content":"import cron from \"node-cron\";\nimport { storage } from \"../storage\";\nimport { runScan } from \"../services/scanRunner\";\nimport { sendAlertNotifications } from \"../services/notifications\";\nimport { logAuditEvent, AuditEvents } from \"../services/auditLog\";\n\nfunction getTodayDate(): string {\n  const today = new Date();\n  return today.toISOString().split('T')[0];\n}\n\nexport async function runMonitoring() {\n  console.log(\"[monitor] Starting daily DNS monitoring...\");\n\n  try {\n    const monitoredDomains = await storage.getMonitoredDomains();\n    console.log(`[monitor] Found ${monitoredDomains.length} monitored domains`);\n\n    for (const domain of monitoredDomains) {\n      try {\n        if (!domain.userId) {\n          console.log(`[monitor] ⚠ Skipping domain ${domain.name} (no user)`);\n          continue;\n        }\n\n        const user = await storage.getUser(domain.userId);\n        if (!user) {\n          console.log(`[monitor] ⚠ User not found for domain ${domain.name}`);\n          continue;\n        }\n\n        if (user.isPro !== \"true\") {\n          console.log(`[monitor] ⚠ Skipping domain ${domain.name} (user not Pro)`);\n          continue;\n        }\n\n        const today = getTodayDate();\n        const existingRun = await storage.getScanRunByDomainIdAndDate(domain.id, today);\n        \n        if (existingRun) {\n          console.log(`[monitor] ℹ Already scanned ${domain.name} today, skipping`);\n          continue;\n        }\n\n        console.log(`[monitor] Scanning domain: ${domain.name}`);\n        const { runId, score } = await runScan(domain.id, domain.name, storage);\n        \n        console.log(`[monitor] ✓ Completed scan for ${domain.name} (runId: ${runId}, score: ${score})`);\n        \n        const diff = await storage.getLatestScanDiffByDomainId(domain.id);\n        if (diff && (diff.severity === \"fail\" || diff.severity === \"warn\")) {\n          console.log(`[monitor] ⚠ ${diff.severity.toUpperCase()} severity detected for ${domain.name}`);\n          \n          // Load alert preferences (domain-specific overrides global)\n          const domainPrefs = await storage.getDomainAlertPref(domain.id);\n          const globalPrefs = await storage.getAlertPref(domain.userId);\n          \n          // Merge preferences field-by-field (domain overrides global, with defaults)\n          const mergedPrefs = {\n            emailEnabled: (domainPrefs?.emailEnabled ?? globalPrefs?.emailEnabled ?? \"true\"),\n            slackEnabled: (domainPrefs?.slackEnabled ?? globalPrefs?.slackEnabled ?? \"false\"),\n            threshold: (domainPrefs?.threshold ?? globalPrefs?.threshold ?? \"warn\"),\n          };\n          \n          // Check if severity meets threshold\n          const thresholdMap: Record<string, number> = {\n            info: 0,\n            warn: 1,\n            fail: 2,\n          };\n          \n          const severityLevel = thresholdMap[diff.severity.toLowerCase()] || 0;\n          const thresholdLevel = thresholdMap[mergedPrefs.threshold.toLowerCase()] || 1;\n          \n          if (severityLevel < thresholdLevel) {\n            console.log(`[monitor] ℹ Severity ${diff.severity} below threshold ${mergedPrefs.threshold}, skipping alert`);\n            continue;\n          }\n          \n          // Create alert\n          const changedCount = Array.isArray(diff.changedJson) ? diff.changedJson.length : 0;\n          const addedCount = Array.isArray(diff.addedJson) ? diff.addedJson.length : 0;\n          const removedCount = Array.isArray(diff.removedJson) ? diff.removedJson.length : 0;\n          \n          const alert = await storage.createAlert({\n            domainId: domain.id,\n            runId,\n            type: \"DNS_CHANGE_DETECTED\",\n            severity: diff.severity.toUpperCase(),\n            title: `DNS Changes Detected for ${domain.name}`,\n            body: `${changedCount} changed, ${addedCount} added, ${removedCount} removed records. Score: ${score}/100`,\n            sentAt: new Date(),\n          });\n          \n          // Send notifications to user's destinations (only if channels enabled)\n          const shouldAttemptNotifications = mergedPrefs.slackEnabled === \"true\" || mergedPrefs.emailEnabled === \"true\";\n          \n          if (shouldAttemptNotifications) {\n            try {\n              const notificationsSent = await sendAlertNotifications(alert, domain.name, {\n                emailEnabled: mergedPrefs.emailEnabled === \"true\",\n                slackEnabled: mergedPrefs.slackEnabled === \"true\",\n              });\n              \n              if (notificationsSent) {\n                console.log(`[monitor] ✓ Sent notifications for ${domain.name}`);\n                \n                // Log audit event only when notifications actually sent\n                await logAuditEvent({\n                  actorUserId: domain.userId,\n                  event: AuditEvents.ALERT_SENT,\n                  domainId: domain.id,\n                  meta: {\n                    alertId: alert.id,\n                    severity: diff.severity,\n                    runId,\n                    channels: {\n                      email: mergedPrefs.emailEnabled === \"true\",\n                      slack: mergedPrefs.slackEnabled === \"true\",\n                    },\n                  },\n                });\n              } else {\n                console.log(`[monitor] ℹ No destinations available for ${domain.name}`);\n              }\n            } catch (error) {\n              console.error(`[monitor] ✗ Failed to send notifications for ${domain.name}:`, error);\n            }\n          } else {\n            console.log(`[monitor] ℹ Notifications disabled for ${domain.name}`);\n          }\n        }\n      } catch (error) {\n        console.error(`[monitor] ✗ Error scanning ${domain.name}:`, error);\n      }\n    }\n\n    console.log(\"[monitor] ✓ Daily monitoring cycle completed\");\n  } catch (error) {\n    console.error(\"[monitor] ✗ Monitoring error:\", error);\n  }\n}\n\nexport function startMonitoring() {\n  const cronExpression = \"0 0 * * *\";\n  \n  console.log(\"[monitor] Scheduling daily monitoring at midnight UTC\");\n  console.log(`[monitor] Cron expression: ${cronExpression}`);\n  \n  cron.schedule(cronExpression, async () => {\n    console.log(`[monitor] Daily scan triggered at ${new Date().toISOString()}`);\n    await runMonitoring();\n  }, {\n    timezone: \"UTC\"\n  });\n\n  console.log(\"[monitor] ✓ Daily monitoring scheduler started\");\n}\n","size_bytes":6405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"server/routes/teams.ts":{"content":"import { Router } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth-routes\";\nimport { requireFeature } from \"../middleware/planLimits\";\nimport { canAccessDomain } from \"../middleware/accessControl\";\nimport { logAuditEvent, AuditEvents } from \"../services/auditLog\";\nimport { insertTeamSchema, insertTeamMemberSchema } from \"@shared/schema\";\n\nconst router = Router();\n\n// Get all teams for current user (owned or member of)\nrouter.get(\"/\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  const user = req.user as any;\n  \n  const ownedTeams = await storage.getTeamsByUserId(user.id);\n  const memberTeams = await storage.getTeamMembersByUserId(user.id);\n  \n  // Get full team details for member teams\n  const memberTeamDetails = await Promise.all(\n    memberTeams.map(async (tm) => {\n      const team = await storage.getTeamById(tm.teamId);\n      return { ...team, role: tm.role };\n    })\n  );\n\n  res.json({\n    owned: ownedTeams,\n    member: memberTeamDetails.filter(t => t.id),\n  });\n});\n\n// Create new team\nrouter.post(\"/\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    \n    const validatedData = insertTeamSchema.parse({\n      ...req.body,\n      ownerUserId: user.id,\n    });\n\n    const team = await storage.createTeam(validatedData);\n\n    // Add owner as team member\n    await storage.createTeamMember({\n      teamId: team.id,\n      userId: user.id,\n      role: \"owner\",\n    });\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.TEAM_CREATED,\n      meta: {\n        teamId: team.id,\n        teamName: team.name,\n      },\n    });\n\n    res.json(team);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Get team members\nrouter.get(\"/:teamId/members\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId } = req.params;\n\n    // Check if user is team member or owner\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const members = await storage.getTeamMembersByTeamId(teamId);\n    const isMember = members.some(m => m.userId === user.id) || team.ownerUserId === user.id;\n\n    if (!isMember) {\n      return res.status(403).json({ error: \"Access denied\" });\n    }\n\n    // Get user details for each member\n    const membersWithDetails = await Promise.all(\n      members.map(async (member) => {\n        const userDetails = await storage.getUser(member.userId);\n        return {\n          ...member,\n          email: userDetails?.email,\n        };\n      })\n    );\n\n    res.json(membersWithDetails);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Add team member\nrouter.post(\"/:teamId/members\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId } = req.params;\n    const { userId, role = \"viewer\" } = req.body;\n\n    // Check if user is team owner or admin\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const members = await storage.getTeamMembersByTeamId(teamId);\n    const currentMember = members.find(m => m.userId === user.id);\n    \n    const isOwner = team.ownerUserId === user.id;\n    const isAdmin = currentMember?.role === \"admin\";\n\n    if (!isOwner && !isAdmin) {\n      return res.status(403).json({ error: \"Only owners and admins can add members\" });\n    }\n\n    const validatedData = insertTeamMemberSchema.parse({\n      teamId,\n      userId,\n      role,\n    });\n\n    const member = await storage.createTeamMember(validatedData);\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.TEAM_MEMBER_ADDED,\n      meta: {\n        teamId,\n        newMemberId: userId,\n        role,\n      },\n    });\n\n    res.json(member);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Update team member role\nrouter.patch(\"/:teamId/members/:userId\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId, userId } = req.params;\n    const { role } = req.body;\n\n    // Check if user is team owner or admin\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const isOwner = team.ownerUserId === user.id;\n    if (!isOwner) {\n      return res.status(403).json({ error: \"Only owners can change member roles\" });\n    }\n\n    const updated = await storage.updateTeamMemberRole(teamId, userId, role);\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.TEAM_MEMBER_ROLE_CHANGED,\n      meta: {\n        teamId,\n        memberId: userId,\n        newRole: role,\n      },\n    });\n\n    res.json(updated);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Remove team member\nrouter.delete(\"/:teamId/members/:userId\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId, userId } = req.params;\n\n    // Check if user is team owner or admin\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const members = await storage.getTeamMembersByTeamId(teamId);\n    const currentMember = members.find(m => m.userId === user.id);\n    \n    const isOwner = team.ownerUserId === user.id;\n    const isAdmin = currentMember?.role === \"admin\";\n\n    if (!isOwner && !isAdmin && userId !== user.id) {\n      return res.status(403).json({ error: \"Access denied\" });\n    }\n\n    await storage.deleteTeamMember(teamId, userId);\n\n    // Log audit event\n    await logAuditEvent({\n      actorUserId: user.id,\n      event: AuditEvents.TEAM_MEMBER_REMOVED,\n      meta: {\n        teamId,\n        removedMemberId: userId,\n      },\n    });\n\n    res.json({ success: true });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Add domain to team\nrouter.post(\"/:teamId/domains\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId } = req.params;\n    const { domainId } = req.body;\n\n    // Check if user is team owner or admin\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const members = await storage.getTeamMembersByTeamId(teamId);\n    const currentMember = members.find(m => m.userId === user.id);\n    \n    const isOwner = team.ownerUserId === user.id;\n    const isAdmin = currentMember?.role === \"admin\";\n\n    if (!isOwner && !isAdmin) {\n      return res.status(403).json({ error: \"Only owners and admins can add domains\" });\n    }\n\n    // Check if user has access to the domain\n    const hasAccess = await canAccessDomain(user.id, domainId);\n    if (!hasAccess) {\n      return res.status(403).json({ error: \"You don't have access to this domain\" });\n    }\n\n    const teamDomain = await storage.createTeamDomain({\n      teamId,\n      domainId,\n    });\n\n    res.json(teamDomain);\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\n// Remove domain from team\nrouter.delete(\"/:teamId/domains/:domainId\", requireAuth, requireFeature(\"teams\"), async (req, res) => {\n  try {\n    const user = req.user as any;\n    const { teamId, domainId } = req.params;\n\n    // Check if user is team owner or admin\n    const team = await storage.getTeamById(teamId);\n    if (!team) {\n      return res.status(404).json({ error: \"Team not found\" });\n    }\n\n    const members = await storage.getTeamMembersByTeamId(teamId);\n    const currentMember = members.find(m => m.userId === user.id);\n    \n    const isOwner = team.ownerUserId === user.id;\n    const isAdmin = currentMember?.role === \"admin\";\n\n    if (!isOwner && !isAdmin) {\n      return res.status(403).json({ error: \"Only owners and admins can remove domains\" });\n    }\n\n    await storage.deleteTeamDomain(teamId, domainId);\n\n    res.json({ success: true });\n  } catch (error: any) {\n    res.status(400).json({ error: error.message });\n  }\n});\n\nexport default router;\n","size_bytes":8457},"client/src/pages/template-lint.tsx":{"content":"import TemplateLintTool from \"@/components/TemplateLintTool\";\n\nexport default function TemplateLintPage() {\n  return <TemplateLintTool />;\n}\n","size_bytes":141},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"server/middleware/accessControl.ts":{"content":"import type { Request, Response, NextFunction } from \"express\";\nimport { storage } from \"../storage\";\n\nexport interface AccessControlRequest extends Request {\n  hasAccess?: boolean;\n  userRole?: string;\n}\n\n/**\n * Check if user can access a domain\n * User has access if they are the owner OR a team member with access to the domain\n */\nexport async function canAccessDomain(userId: string, domainId: string): Promise<boolean> {\n  // Check direct ownership\n  const domain = await storage.getDomain(domainId);\n  if (!domain) return false;\n  \n  if (domain.userId === userId) {\n    return true;\n  }\n\n  // Check team access\n  const teamDomains = await storage.getTeamDomainsByDomainId(domainId);\n  \n  for (const teamDomain of teamDomains) {\n    const teamMembers = await storage.getTeamMembersByTeamId(teamDomain.teamId);\n    const isMember = teamMembers.some(member => member.userId === userId);\n    if (isMember) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Get user's role for a specific domain\n * Returns 'owner' if domain owner, or team role if team member\n */\nexport async function getUserDomainRole(userId: string, domainId: string): Promise<string | null> {\n  // Check direct ownership\n  const domain = await storage.getDomain(domainId);\n  if (!domain) return null;\n  \n  if (domain.userId === userId) {\n    return 'owner';\n  }\n\n  // Check team access and get role\n  const teamDomains = await storage.getTeamDomainsByDomainId(domainId);\n  \n  for (const teamDomain of teamDomains) {\n    const teamMembers = await storage.getTeamMembersByTeamId(teamDomain.teamId);\n    const member = teamMembers.find(m => m.userId === userId);\n    if (member) {\n      return member.role;\n    }\n  }\n\n  return null;\n}\n\n/**\n * Middleware to require domain access\n * Expects domainId in req.params.id or req.params.domainId\n */\nexport function requireDomainAccess() {\n  return async (req: AccessControlRequest, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = req.user as any;\n    const userId = user.id;\n    const domainId = req.params.id || req.params.domainId;\n\n    if (!domainId) {\n      return res.status(400).json({ error: \"Domain ID required\" });\n    }\n\n    const hasAccess = await canAccessDomain(userId, domainId);\n    \n    if (!hasAccess) {\n      return res.status(403).json({ error: \"Access denied to this domain\" });\n    }\n\n    const role = await getUserDomainRole(userId, domainId);\n    req.hasAccess = true;\n    req.userRole = role || undefined;\n\n    next();\n  };\n}\n\n/**\n * Middleware to require specific role for domain\n * Expects domainId in req.params.id or req.params.domainId\n */\nexport function requireDomainRole(requiredRole: 'owner' | 'admin' | 'viewer') {\n  return async (req: AccessControlRequest, res: Response, next: NextFunction) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ error: \"Not authenticated\" });\n    }\n\n    const user = req.user as any;\n    const userId = user.id;\n    const domainId = req.params.id || req.params.domainId;\n\n    if (!domainId) {\n      return res.status(400).json({ error: \"Domain ID required\" });\n    }\n\n    const role = await getUserDomainRole(userId, domainId);\n    \n    if (!role) {\n      return res.status(403).json({ error: \"Access denied to this domain\" });\n    }\n\n    // Role hierarchy: owner > admin > viewer\n    const roleHierarchy: Record<string, number> = {\n      owner: 3,\n      admin: 2,\n      viewer: 1,\n    };\n\n    const userLevel = roleHierarchy[role] || 0;\n    const requiredLevel = roleHierarchy[requiredRole] || 0;\n\n    if (userLevel < requiredLevel) {\n      return res.status(403).json({\n        error: `${requiredRole} role required`,\n        userRole: role,\n      });\n    }\n\n    req.userRole = role;\n    next();\n  };\n}\n","size_bytes":3833},"design_guidelines.md":{"content":"# Design Guidelines: Inbox Deliverability Copilot\n\n## Design Approach\n\n**Selected Approach:** Modern SaaS Design System with trust-focused aesthetics\n\n**Justification:** This is a technical B2B tool requiring clarity, trust, and professional credibility. Drawing inspiration from Linear, Vercel, and Stripe's clean, developer-focused interfaces while incorporating status-driven visual feedback from monitoring tools like Datadog.\n\n**Key Principles:**\n- Technical precision meets visual clarity\n- Trust through transparency and clear status indicators\n- Efficiency-first navigation and workflows\n- Data visualization that tells a story\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Primary Colors:**\n- Brand Primary: 217 91% 60% (Professional blue - trust and reliability)\n- Brand Dark: 217 91% 45% (Hover/active states)\n\n**Status Colors:**\n- Success (PASS): 142 76% 36% (Green - DNS records configured correctly)\n- Warning (WARN): 38 92% 50% (Amber - Needs attention)\n- Error (FAIL): 0 84% 60% (Red - Critical issues)\n- Info: 199 89% 48% (Cyan - Informational callouts)\n\n**Neutral Scale (Dark Mode Primary):**\n- Background: 222 47% 11% (Rich dark background)\n- Surface: 217 33% 17% (Cards, elevated surfaces)\n- Border: 217 20% 30% (Subtle dividers)\n- Text Primary: 210 40% 98%\n- Text Secondary: 215 20% 65%\n- Text Muted: 215 16% 47%\n\n**Light Mode (Free Checker Landing):**\n- Background: 0 0% 100%\n- Surface: 210 20% 98%\n- Border: 214 32% 91%\n- Text Primary: 222 47% 11%\n- Text Secondary: 215 16% 47%\n\n### B. Typography\n\n**Font Families:**\n- Primary: 'Inter' (via Google Fonts) - Clean, modern, excellent readability for technical content\n- Monospace: 'JetBrains Mono' - DNS records, code snippets, technical values\n\n**Type Scale:**\n- Hero Headline: text-5xl font-bold (Landing page)\n- Page Title: text-3xl font-bold\n- Section Heading: text-2xl font-semibold\n- Card Title: text-lg font-semibold\n- Body: text-base (16px baseline)\n- Caption/Meta: text-sm text-muted\n- Code/Technical: text-sm font-mono\n\n**Font Weights:**\n- Headings: font-semibold (600) or font-bold (700)\n- Body: font-normal (400)\n- Emphasis: font-medium (500)\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units of 2, 4, 6, 8, 12, 16, 20, 24\n- Micro spacing (between related elements): 2, 4\n- Component padding: 4, 6, 8\n- Section spacing: 12, 16, 20, 24\n- Page margins: 8, 12, 16\n\n**Grid System:**\n- Dashboard: 12-column grid with gap-6\n- Cards: 2-3 column layouts on desktop (grid-cols-1 md:grid-cols-2 lg:grid-cols-3)\n- Forms: Single column, max-w-2xl centered\n\n**Container Widths:**\n- Landing page: max-w-7xl\n- Dashboard: max-w-7xl with px-6\n- Reports: max-w-5xl (optimal for reading + print)\n- Forms: max-w-2xl\n\n### D. Component Library\n\n**Status Badges:**\n- PASS: Green background (142 76% 36%) with white text, rounded-full px-3 py-1\n- WARN: Amber background (38 92% 50%) with dark text, rounded-full px-3 py-1\n- FAIL: Red background (0 84% 60%) with white text, rounded-full px-3 py-1\n- Pill style with icon prefix (checkmark, warning triangle, X)\n\n**Cards:**\n- Dark surface background with subtle border\n- Rounded corners (rounded-lg)\n- Padding: p-6\n- Hover state: Slight border color intensification\n- Shadow: None (flat, modern aesthetic)\n\n**DNS Record Display:**\n- Monospace font for technical values\n- Copy button with clipboard icon (right-aligned)\n- Expandable sections for detailed information\n- Color-coded left border matching status\n\n**Navigation:**\n- Top navigation bar: Dark background, sticky positioning\n- Logo left, user menu right\n- Active page: Subtle underline or background highlight\n- Mobile: Hamburger menu with slide-out drawer\n\n**Forms:**\n- Input fields: Dark surface with lighter border, focus ring in brand blue\n- Labels: text-sm font-medium above inputs\n- Helper text: text-xs text-muted below inputs\n- Buttons: Primary (brand blue), Secondary (outline), Destructive (red)\n\n**Data Visualization:**\n- Chart.js line charts for health metrics\n- Brand blue for primary data series\n- Grid lines: Subtle, low contrast\n- Tooltips: Dark background with white text\n- Axes labels: text-sm text-muted\n\n**Report Layout:**\n- Clean, printable design\n- Header with logo and domain name\n- Summary section: Status badges in grid layout\n- Details sections: Collapsible accordions\n- Footer: Generation timestamp, share link\n\n**CTA Buttons:**\n- Primary: bg-[217 91% 60%] text-white, rounded-md px-6 py-3, font-medium\n- Secondary: border-2 variant with transparent background\n- Hover: Subtle brightness increase, no dramatic transformations\n\n**Tables:**\n- Striped rows (subtle background alternation)\n- Sticky headers on scroll\n- Monospace for technical columns\n- Action buttons (edit, delete) right-aligned\n\n### E. Animations\n\n**Minimal, Purposeful Only:**\n- Page transitions: None (instant)\n- Copy confirmation: Brief checkmark animation (200ms)\n- Chart loading: Smooth draw-in (400ms ease-out)\n- Accordion expand/collapse: 200ms ease\n- NO scroll-triggered animations, parallax, or decorative motion\n\n---\n\n## Page-Specific Layouts\n\n**Landing Page (Free Checker):**\n- Light mode for accessibility and trust\n- Hero: Centered headline + subheadline + domain input form (max-w-4xl)\n- Benefits section: 3-column grid showcasing key features (icons + titles + descriptions)\n- How it works: 3-step process with numbered icons\n- CTA section: \"Try the free checker\" with large input field\n- Footer: Minimal links, social proof (\"Trusted by X businesses\")\n\n**Dashboard:**\n- Sidebar navigation (collapsible on mobile)\n- Main content: Domain cards in grid (2-3 columns)\n- Each card: Domain name, last scan status, quick actions\n- Empty state: Illustration with \"Add your first domain\" CTA\n\n**DNS Scan Results:**\n- Top: Domain header with overall status\n- Grid of status cards (SPF, DKIM, DMARC, BIMI, MX)\n- Each card: Badge, record value (monospace), issues list, copy button\n- Bottom: \"Generate Report\" CTA\n\n**Public Report:**\n- Clean, print-optimized layout\n- Header: Logo, domain, generation date\n- Summary dashboard: Status badges in prominent grid\n- Detailed findings: Accordion sections per record type\n- Footer: Shareable link, \"Powered by\" branding\n\n**Template Lint:**\n- Split layout: Input (left) and results (right)\n- Subject/body text areas\n- Score display: Large circular score (0-100) with color gradient\n- Warning list: Itemized with severity icons\n- Suggestions: Action-oriented recommendations\n\n**Health Tracker:**\n- Chart.js line graph showing trends over time\n- Input form: Sent volume, open rate, spam rate, bounces (grid layout)\n- Data table: Recent entries with edit/delete actions\n- Empty state: Chart placeholder with \"Add your first data point\"\n\n---\n\n## Images\n\n**Hero Image (Landing Page):**\n- Abstract technical illustration showing interconnected mail servers and checkmarks\n- Placement: Right side of hero section (40% width on desktop)\n- Style: Gradient-colored line art matching brand blue palette\n- Alternative: Dashboard preview mockup showing DNS scan results\n\n**Feature Icons:**\n- Use Heroicons (outline style) via CDN\n- Size: 24px (w-6 h-6) for inline icons, 48px (w-12 h-12) for feature cards\n- Color: Brand blue for active, muted for inactive\n\n**Empty States:**\n- Custom illustrations for: No domains, no health data, no templates\n- Style: Simple line drawings with brand color accents\n- Placement: Centered in empty content areas\n\n---\n\n## Accessibility & Quality Standards\n\n- WCAG AA contrast ratios minimum\n- Focus indicators: 2px ring in brand blue with offset\n- Keyboard navigation: Logical tab order, skip links\n- Screen reader labels: Descriptive aria-labels for status badges\n- Print styles: Reports render cleanly in grayscale\n- Responsive breakpoints: Mobile (< 768px), Tablet (768-1024px), Desktop (> 1024px)","size_bytes":7747},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Link } from \"wouter\";\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/auth/login\", { email, password });\n      return await res.json();\n    },\n    onSuccess: async () => {\n      await queryClient.refetchQueries({ queryKey: [\"/api/auth/session\"] });\n      toast({\n        title: \"Welcome back!\",\n        description: \"You've successfully logged in.\",\n      });\n      setLocation(\"/dashboard\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-[calc(100vh-64px)] flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle>Sign In</CardTitle>\n          <CardDescription>Enter your email and password to access your account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"you@example.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n          <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n            Don't have an account?{\" \"}\n            <Link href=\"/signup\" data-testid=\"link-signup\">\n              <span className=\"text-primary hover:underline cursor-pointer\">Sign up</span>\n            </Link>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3362},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/examples/PublicReport.tsx":{"content":"import PublicReport from \"../PublicReport\";\n\nexport default function PublicReportExample() {\n  const mockRecords = [\n    {\n      type: \"SPF\",\n      status: \"PASS\" as const,\n      record: \"v=spf1 include:_spf.google.com ~all\",\n    },\n    {\n      type: \"DKIM\",\n      status: \"PASS\" as const,\n      record: \"v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4...\",\n    },\n    {\n      type: \"DMARC\",\n      status: \"WARN\" as const,\n      record: \"v=DMARC1; p=none; rua=mailto:dmarc@example.com\",\n      issues: [\"Policy set to 'none'\"],\n      suggestions: [\"Change to 'quarantine' or 'reject'\"],\n    },\n    {\n      type: \"MX\",\n      status: \"PASS\" as const,\n      record: \"10 mx1.example.com\",\n    },\n  ];\n\n  return (\n    <PublicReport\n      domain=\"example.com\"\n      scanDate=\"Oct 1, 2025\"\n      overallStatus=\"PASS\"\n      records={mockRecords}\n    />\n  );\n}\n","size_bytes":848},"client/src/components/examples/LandingHero.tsx":{"content":"import LandingHero from \"../LandingHero\";\n\nexport default function LandingHeroExample() {\n  return <LandingHero />;\n}\n","size_bytes":118},"server/stripe-routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { requireAuth } from \"./auth-routes\";\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\nlet stripe: Stripe | null = null;\n\nif (stripeSecretKey) {\n  try {\n    stripe = new Stripe(stripeSecretKey, {\n      apiVersion: \"2025-09-30.clover\",\n    });\n  } catch (e: any) {\n    console.error(\"Failed to initialize Stripe:\", e?.message);\n  }\n}\n\n// Cache for billing portal sessions (5 minute TTL)\nconst portalSessionCache = new Map<string, { url: string; expiry: number }>();\nconst PORTAL_CACHE_TTL = 5 * 60 * 1000; // 5 minutes in milliseconds\n\nexport function registerStripeRoutes(app: Express) {\n  // POST /api/portal/create-session - Create billing portal session with 5min cache\n  app.post(\"/api/portal/create-session\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.id) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      // Check cache first\n      const cacheKey = user.id;\n      const cached = portalSessionCache.get(cacheKey);\n      if (cached && cached.expiry > Date.now()) {\n        console.log(`[portal.create-session] ✓ Cache hit for user ${user.email}`);\n        return res.json({ url: cached.url });\n      }\n\n      const sk = process.env.STRIPE_SECRET_KEY;\n      if (!sk) {\n        console.error(\"[portal.create-session] STRIPE_SECRET_KEY missing\");\n        return res.status(500).json({ error: \"Stripe not configured\" });\n      }\n\n      const stripeClient = new Stripe(sk, { apiVersion: \"2025-09-30.clover\" });\n      const userData = await storage.getUser(user.id);\n      \n      if (!userData?.stripeCustomerId) {\n        console.error(\"[portal.create-session] No Stripe customer ID for user:\", user.id);\n        return res.status(400).json({ error: \"No billing account found. Please subscribe first.\" });\n      }\n\n      const baseUrl = (process.env.NEXTAUTH_URL || process.env.REPLIT_DEV_DOMAIN || \"\").replace(/\\/$/, \"\");\n      const formattedBaseUrl = baseUrl.startsWith(\"http://\") || baseUrl.startsWith(\"https://\") \n        ? baseUrl \n        : `https://${baseUrl}`;\n\n      const portalSession = await stripeClient.billingPortal.sessions.create({\n        customer: userData.stripeCustomerId,\n        return_url: `${formattedBaseUrl}/settings`,\n      });\n\n      // Cache the session URL for 5 minutes\n      portalSessionCache.set(cacheKey, {\n        url: portalSession.url,\n        expiry: Date.now() + PORTAL_CACHE_TTL,\n      });\n\n      console.log(`[portal.create-session] ✓ Portal session created and cached for user ${user.email}`);\n      return res.json({ url: portalSession.url });\n    } catch (error: any) {\n      console.error(\"[portal.create-session] Error:\", error);\n      return res.status(500).json({ error: \"Failed to create billing portal session\" });\n    }\n  });\n\n  app.get(\"/api/billing/verify\", async (req, res) => {\n    const sessionId = req.query.session_id as string;\n    console.log(`[billing.verify] 🔍 Starting verification for session_id: ${sessionId}`);\n    \n    if (!sessionId) {\n      console.error(\"[billing.verify] ❌ No session_id provided\");\n      return res.redirect(\"/pricing?error=no_session\");\n    }\n\n    const sk = process.env.STRIPE_SECRET_KEY;\n    const baseUrl = (process.env.NEXTAUTH_URL || process.env.REPLIT_DEV_DOMAIN || \"\").replace(/\\/$/, \"\");\n    \n    if (!baseUrl) {\n      console.error(\"[billing.verify] Base URL not configured (NEXTAUTH_URL or REPLIT_DEV_DOMAIN required)\");\n      return res.status(500).send(\"Server configuration error: Base URL not set\");\n    }\n\n    const formattedBaseUrl = baseUrl.startsWith(\"http://\") || baseUrl.startsWith(\"https://\") \n      ? baseUrl \n      : `https://${baseUrl}`;\n\n    if (!sk) {\n      console.error(\"[billing.verify] STRIPE_SECRET_KEY missing\");\n      return res.redirect(`${formattedBaseUrl}/pricing?error=no_stripe_key`);\n    }\n\n    let stripeClient: Stripe;\n    try {\n      stripeClient = new Stripe(sk, { apiVersion: \"2025-09-30.clover\" });\n    } catch (e: any) {\n      console.error(\"[billing.verify] Stripe init failed:\", e?.message);\n      return res.redirect(`${formattedBaseUrl}/pricing?error=stripe_init_failed`);\n    }\n\n    try {\n      console.log(`[billing.verify] 📡 Retrieving Stripe session...`);\n      const session = await stripeClient.checkout.sessions.retrieve(sessionId, {\n        expand: [\"customer\", \"subscription\"],\n      });\n\n      console.log(`[billing.verify] 💳 Payment status: ${session.payment_status}`);\n      if (session.payment_status !== \"paid\") {\n        console.error(\"[billing.verify] ❌ Payment not completed, status:\", session.payment_status);\n        return res.redirect(`${formattedBaseUrl}/pricing?error=payment_incomplete`);\n      }\n\n      const email =\n        session.customer_details?.email ||\n        (typeof session.customer === \"object\" && session.customer && \"email\" in session.customer ? session.customer.email : undefined);\n\n      console.log(`[billing.verify] 📧 Customer email: ${email}`);\n      if (!email) {\n        console.error(\"[billing.verify] ❌ No email found in session\");\n        return res.redirect(`${formattedBaseUrl}/pricing?error=no_email_on_session`);\n      }\n\n      const stripeCustomerId = typeof session.customer === \"string\" ? session.customer : (session.customer?.id || \"\");\n      const stripeSubscriptionId = typeof session.subscription === \"string\" ? session.subscription : (session.subscription?.id || \"\");\n\n      console.log(`[billing.verify] 🆔 Stripe Customer ID: ${stripeCustomerId}`);\n      console.log(`[billing.verify] 🆔 Stripe Subscription ID: ${stripeSubscriptionId}`);\n\n      if (!stripeCustomerId || !stripeSubscriptionId) {\n        console.error(\"[billing.verify] ❌ Missing customer or subscription ID\");\n        return res.redirect(`${formattedBaseUrl}/pricing?error=missing_stripe_data`);\n      }\n\n      console.log(`[billing.verify] 🔍 Looking up user by email: ${email}`);\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        console.error(\"[billing.verify] ❌ User not found for email:\", email);\n        return res.redirect(`${formattedBaseUrl}/pricing?error=user_not_found`);\n      }\n\n      console.log(`[billing.verify] 👤 Found user: id=${user.id}, email=${user.email}, current isPro=${user.isPro}`);\n      console.log(`[billing.verify] 💾 Writing to database: upgrading user to Pro...`);\n      \n      const updatedUser = await storage.upgradeUserToPro(user.id, stripeCustomerId, stripeSubscriptionId);\n      \n      console.log(`[billing.verify] ✅ Database write complete!`);\n      console.log(`[billing.verify] 📊 Updated user data:`, {\n        id: updatedUser.id,\n        email: updatedUser.email,\n        isPro: updatedUser.isPro,\n        stripeCustomerId: updatedUser.stripeCustomerId,\n        stripeSubscriptionId: updatedUser.stripeSubscriptionId\n      });\n      console.log(`[billing.verify] ✓ User ${email} successfully upgraded to Pro (isPro=${updatedUser.isPro})`);\n\n      return res.redirect(`${formattedBaseUrl}/dashboard?upgraded=true`);\n    } catch (e: any) {\n      console.error(\"[billing.verify] ❌ Error:\", e?.message || e);\n      console.error(\"[billing.verify] Stack:\", e?.stack);\n      return res.redirect(`${formattedBaseUrl}/pricing?error=verify_failed`);\n    }\n  });\n\n  app.get(\"/api/billing/plan\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.id) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      const userData = await storage.getUser(user.id);\n      if (!userData) {\n        console.error(\"[billing.plan] User not found in database:\", user.id);\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      const plan = userData.isPro === \"true\" ? \"pro\" : \"free\";\n      console.log(`[billing.plan] User ${userData.email}: plan=${plan}, isPro=${userData.isPro}`);\n      \n      res.setHeader(\"Cache-Control\", \"no-store, no-cache, must-revalidate, private\");\n      res.json({ plan });\n    } catch (error: any) {\n      console.error(\"[billing.plan] Error fetching plan:\", error);\n      return res.status(500).json({ error: \"Failed to fetch plan status\" });\n    }\n  });\n\n  app.get(\"/api/stripe/diag\", async (req, res) => {\n    const ok = (v?: string) => (v && v.length > 8 ? \"present\" : \"missing\");\n    const baseUrl = process.env.NEXTAUTH_URL || process.env.REPLIT_DEV_DOMAIN || \"\";\n    const formattedUrl = baseUrl.startsWith(\"https://\") \n      ? baseUrl.replace(/\\/$/, \"\")\n      : (baseUrl ? `https://${baseUrl}` : \"missing/invalid\");\n    \n    res.json({\n      stripeSecretKey: ok(process.env.STRIPE_SECRET_KEY),\n      stripePublicKey: ok(process.env.VITE_STRIPE_PUBLIC_KEY),\n      priceId: ok(process.env.STRIPE_PRICE_ID),\n      nextauthUrl: formattedUrl\n    });\n  });\n\n  app.post(\"/api/stripe/checkout\", requireAuth, async (req, res) => {\n    const user = req.user as any;\n    if (!user || !user.id || !user.email) {\n      console.error(\"[checkout] User not authenticated\");\n      return res.status(401).json({ error: \"User not authenticated\" });\n    }\n\n    const sk = process.env.STRIPE_SECRET_KEY;\n    const baseUrl = (process.env.NEXTAUTH_URL || process.env.REPLIT_DEV_DOMAIN || \"\").replace(/\\/$/, \"\");\n    \n    if (!sk) {\n      console.error(\"[checkout] STRIPE_SECRET_KEY missing\");\n      return res.status(400).json({ error: \"STRIPE_SECRET_KEY missing\" });\n    }\n    \n    if (!baseUrl) {\n      console.error(\"[checkout] NEXTAUTH_URL missing or invalid\");\n      return res.status(400).json({ error: \"NEXTAUTH_URL missing or invalid\" });\n    }\n\n    let stripeClient: Stripe;\n    try {\n      stripeClient = new Stripe(sk, { apiVersion: \"2025-09-30.clover\" });\n    } catch (e: any) {\n      console.error(\"[checkout] Stripe init failed:\", e?.message);\n      return res.status(500).json({ error: \"Stripe init failed: \" + e?.message });\n    }\n\n    const priceId = process.env.STRIPE_PRICE_ID;\n    const formattedBaseUrl = baseUrl.startsWith(\"http://\") || baseUrl.startsWith(\"https://\") \n      ? baseUrl \n      : `https://${baseUrl}`;\n\n    try {\n      console.log(`[checkout] Creating session for user: ${user.email} (id: ${user.id})`);\n      \n      const session = await stripeClient.checkout.sessions.create({\n        mode: \"subscription\",\n        payment_method_types: [\"card\"],\n        client_reference_id: user.id,\n        customer_email: user.email,\n        line_items: priceId ? [{ price: priceId, quantity: 1 }] : [{\n          price_data: {\n            currency: \"usd\",\n            unit_amount: 1900,\n            recurring: { interval: \"month\" },\n            product_data: { name: \"Deliverability Copilot Pro\" }\n          },\n          quantity: 1\n        }],\n        success_url: `${formattedBaseUrl}/api/billing/verify?session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${formattedBaseUrl}/pricing?canceled=true`,\n      });\n      \n      if (!session?.url) {\n        console.error(\"[checkout] No checkout URL returned from Stripe\");\n        return res.status(500).json({ error: \"No checkout URL returned from Stripe\" });\n      }\n      \n      console.log(`[checkout] ✓ Session created: ${session.id}, redirect URL: ${session.url}`);\n      return res.json({ url: session.url });\n    } catch (e: any) {\n      console.error(\"[checkout] Stripe error:\", e?.message || \"unknown\");\n      return res.status(500).json({ error: \"Stripe error: \" + (e?.message || \"unknown\") });\n    }\n  });\n\n  app.post(\"/api/get-or-create-subscription\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n\n      if (!user || !user.id || !user.email) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      if (!stripe) {\n        return res.status(500).json({ error: \"Stripe not initialized\" });\n      }\n\n      if (user.stripeSubscriptionId) {\n        const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId, {\n          expand: [\"latest_invoice.payment_intent\"],\n        });\n        \n        if (subscription.status === \"active\" || subscription.status === \"trialing\") {\n          return res.json({\n            subscriptionId: subscription.id,\n            status: \"active\",\n            clientSecret: null,\n          });\n        }\n        \n        const latestInvoice = subscription.latest_invoice as any;\n        \n        return res.json({\n          subscriptionId: subscription.id,\n          status: subscription.status,\n          clientSecret: latestInvoice?.payment_intent?.client_secret || null,\n        });\n      }\n\n      let customerId = user.stripeCustomerId;\n\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email,\n        });\n        customerId = customer.id;\n      }\n\n      let productId = process.env.STRIPE_PRODUCT_ID;\n      \n      if (!productId) {\n        const products = await stripe.products.list({ limit: 1 });\n        if (products.data.length > 0 && products.data[0].name === \"Deliverability Copilot Pro\") {\n          productId = products.data[0].id;\n        } else {\n          const product = await stripe.products.create({\n            name: \"Deliverability Copilot Pro\",\n          });\n          productId = product.id;\n        }\n      }\n\n      const subscription = await stripe.subscriptions.create({\n        customer: customerId,\n        items: [\n          {\n            price_data: {\n              currency: \"usd\",\n              unit_amount: 1900,\n              recurring: { interval: \"month\" },\n              product: productId,\n            },\n          },\n        ],\n        payment_behavior: \"default_incomplete\",\n        payment_settings: { save_default_payment_method: \"on_subscription\" },\n        expand: [\"latest_invoice.payment_intent\"],\n      });\n\n      await storage.updateUserStripeInfo(user.id, customerId, subscription.id);\n\n      const latestInvoice = subscription.latest_invoice as any;\n      const paymentIntent = latestInvoice?.payment_intent as any;\n\n      res.json({\n        subscriptionId: subscription.id,\n        clientSecret: paymentIntent?.client_secret || null,\n      });\n    } catch (error: any) {\n      console.error(\"Subscription error:\", error);\n      res.status(500).json({ error: \"Failed to create subscription\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/subscription-status\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      \n      if (!user || !user.id) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      if (!user.stripeSubscriptionId) {\n        return res.json({ isPro: false, status: \"none\" });\n      }\n\n      if (!stripe) {\n        return res.status(500).json({ error: \"Stripe not initialized\" });\n      }\n\n      const subscription = await stripe.subscriptions.retrieve(user.stripeSubscriptionId);\n      \n      const isPro = subscription.status === \"active\" || subscription.status === \"trialing\";\n      \n      if (user.isPro !== (isPro ? \"true\" : \"false\")) {\n        await storage.updateUserProStatus(user.id, isPro);\n      }\n\n      res.json({ \n        isPro, \n        status: subscription.status,\n        currentPeriodEnd: (subscription as any).current_period_end \n      });\n    } catch (error: any) {\n      console.error(\"Subscription status error:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscription status\" });\n    }\n  });\n\n  app.get(\"/api/billing/portal\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      if (!user || !user.id) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      const sk = process.env.STRIPE_SECRET_KEY;\n      if (!sk) {\n        console.error(\"[billing.portal] STRIPE_SECRET_KEY missing\");\n        return res.status(500).json({ error: \"Stripe not configured\" });\n      }\n\n      const stripeClient = new Stripe(sk, { apiVersion: \"2025-09-30.clover\" });\n      const userData = await storage.getUser(user.id);\n      \n      if (!userData?.stripeCustomerId) {\n        console.error(\"[billing.portal] No Stripe customer ID for user:\", user.id);\n        return res.status(400).json({ error: \"No billing account found. Please subscribe first.\" });\n      }\n\n      const baseUrl = (process.env.NEXTAUTH_URL || process.env.REPLIT_DEV_DOMAIN || \"\").replace(/\\/$/, \"\");\n      const formattedBaseUrl = baseUrl.startsWith(\"http://\") || baseUrl.startsWith(\"https://\") \n        ? baseUrl \n        : `https://${baseUrl}`;\n\n      const portalSession = await stripeClient.billingPortal.sessions.create({\n        customer: userData.stripeCustomerId,\n        return_url: `${formattedBaseUrl}/dashboard`,\n      });\n\n      console.log(`[billing.portal] ✓ Portal session created for user ${user.email}`);\n      return res.redirect(portalSession.url);\n    } catch (error: any) {\n      console.error(\"[billing.portal] Error:\", error);\n      return res.status(500).json({ error: \"Failed to create billing portal session\" });\n    }\n  });\n\n  app.post(\"/api/stripe/webhook\", express.raw({ type: \"application/json\" }), async (req, res) => {\n    const sig = req.headers[\"stripe-signature\"];\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n\n    if (!webhookSecret) {\n      console.error(\"[webhook] STRIPE_WEBHOOK_SECRET not configured\");\n      return res.status(500).send(\"Webhook secret not configured\");\n    }\n\n    if (!sig) {\n      console.error(\"[webhook] No signature provided\");\n      return res.status(400).send(\"No signature\");\n    }\n\n    const sk = process.env.STRIPE_SECRET_KEY;\n    if (!sk) {\n      console.error(\"[webhook] STRIPE_SECRET_KEY missing\");\n      return res.status(500).send(\"Stripe not configured\");\n    }\n\n    let event: Stripe.Event;\n    try {\n      const stripeClient = new Stripe(sk, { apiVersion: \"2025-09-30.clover\" });\n      event = stripeClient.webhooks.constructEvent(req.body, sig as string, webhookSecret);\n      console.log(`[webhook] ✓ Verified event: ${event.type}`);\n    } catch (err: any) {\n      console.error(\"[webhook] Signature verification failed:\", err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    try {\n      switch (event.type) {\n        case \"checkout.session.completed\": {\n          const session = event.data.object as Stripe.Checkout.Session;\n          console.log(`[webhook] checkout.session.completed: ${session.id}`);\n          \n          const customerId = typeof session.customer === \"string\" ? session.customer : session.customer?.id;\n          const subscriptionId = typeof session.subscription === \"string\" ? session.subscription : session.subscription?.id;\n          const clientReferenceId = session.client_reference_id;\n          const email = session.customer_details?.email;\n\n          if (clientReferenceId) {\n            const user = await storage.getUser(clientReferenceId);\n            if (user && customerId && subscriptionId) {\n              await storage.upgradeUserToPro(user.id, customerId, subscriptionId);\n              console.log(`[webhook] ✓ User ${user.email} upgraded to Pro via client_reference_id`);\n            }\n          } else if (email) {\n            const user = await storage.getUserByEmail(email);\n            if (user && customerId && subscriptionId) {\n              await storage.upgradeUserToPro(user.id, customerId, subscriptionId);\n              console.log(`[webhook] ✓ User ${email} upgraded to Pro via email`);\n            }\n          }\n          break;\n        }\n\n        case \"customer.subscription.updated\": {\n          const subscription = event.data.object as Stripe.Subscription;\n          console.log(`[webhook] customer.subscription.updated: ${subscription.id}, status: ${subscription.status}`);\n          \n          const customerId = typeof subscription.customer === \"string\" ? subscription.customer : subscription.customer?.id;\n          if (customerId) {\n            const user = await storage.getUserByStripeCustomerId(customerId);\n            if (user) {\n              const isPro = [\"active\", \"trialing\", \"past_due\"].includes(subscription.status);\n              await storage.updateUserProStatus(user.id, isPro);\n              console.log(`[webhook] ✓ Updated user ${user.email} to isPro=${isPro} (status: ${subscription.status})`);\n            } else {\n              console.log(`[webhook] No user found with customer ID: ${customerId}`);\n            }\n          }\n          break;\n        }\n\n        case \"customer.subscription.deleted\": {\n          const subscription = event.data.object as Stripe.Subscription;\n          console.log(`[webhook] customer.subscription.deleted: ${subscription.id}`);\n          \n          const customerId = typeof subscription.customer === \"string\" ? subscription.customer : subscription.customer?.id;\n          if (customerId) {\n            const user = await storage.getUserByStripeCustomerId(customerId);\n            if (user) {\n              await storage.updateUserProStatus(user.id, false);\n              console.log(`[webhook] ✓ Downgraded user ${user.email} to free (subscription deleted)`);\n            } else {\n              console.log(`[webhook] No user found with customer ID: ${customerId}`);\n            }\n          }\n          break;\n        }\n\n        default:\n          console.log(`[webhook] Unhandled event type: ${event.type}`);\n      }\n\n      res.json({ received: true });\n    } catch (error: any) {\n      console.error(\"[webhook] Error processing event:\", error);\n      res.status(500).send(\"Webhook processing failed\");\n    }\n  });\n}\n","size_bytes":21604},"client/src/components/DNSRecordCard.tsx":{"content":"import { Copy, Check } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport StatusBadge from \"./StatusBadge\";\nimport { useState } from \"react\";\nimport { sanitize } from \"@/lib/sanitize\";\n\ninterface DNSRecordCardProps {\n  type: string;\n  status: \"PASS\" | \"WARN\" | \"FAIL\";\n  record?: string;\n  issues?: string[];\n  suggestions?: string[];\n}\n\nexport default function DNSRecordCard({\n  type,\n  status,\n  record,\n  issues = [],\n  suggestions = [],\n}: DNSRecordCardProps) {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    if (record) {\n      navigator.clipboard.writeText(record);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <Card className=\"p-6\" data-testid={`card-dns-${sanitize(type).toLowerCase().replace(/[^a-z0-9-]/g, '-')}`}>\n      <div className=\"flex items-start justify-between gap-4 mb-4\">\n        <div>\n          <h3 className=\"text-lg font-semibold mb-2\">{sanitize(type)}</h3>\n          <StatusBadge status={status} />\n        </div>\n        {record && (\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={handleCopy}\n            data-testid={`button-copy-${sanitize(type).toLowerCase().replace(/[^a-z0-9-]/g, '-')}`}\n          >\n            {copied ? (\n              <Check className=\"h-4 w-4 text-success\" />\n            ) : (\n              <Copy className=\"h-4 w-4\" />\n            )}\n          </Button>\n        )}\n      </div>\n\n      {record && (\n        <div className=\"mb-4 p-3 bg-muted rounded-md\">\n          <code className=\"text-sm font-mono break-all\" data-testid={`text-record-${sanitize(type).toLowerCase().replace(/[^a-z0-9-]/g, '-')}`}>\n            {sanitize(record)}\n          </code>\n        </div>\n      )}\n\n      {issues?.length > 0 && (\n        <div className=\"mb-3\">\n          <h4 className=\"text-sm font-medium text-destructive mb-2\">Issues:</h4>\n          <ul className=\"space-y-1\">\n            {issues.map((issue, i) => (\n              <li key={i} className=\"text-sm text-muted-foreground\">\n                • {sanitize(issue)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {suggestions?.length > 0 && (\n        <div>\n          <h4 className=\"text-sm font-medium text-primary mb-2\">Suggestions:</h4>\n          <ul className=\"space-y-1\">\n            {suggestions.map((suggestion, i) => (\n              <li key={i} className=\"text-sm text-muted-foreground\">\n                • {sanitize(suggestion)}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":2658},"server/lib/cron.ts":{"content":"import { storage } from \"../storage\";\nimport { scanDNS } from \"./dns-scanner\";\n\nexport async function runDailyRescans() {\n  try {\n    console.log(\"[CRON] Starting daily re-scans...\");\n    \n    const allDomains = await Promise.all(\n      (await storage.getDomainsByUserId(\"*\")).map((domain) => domain)\n    ).catch(() => []);\n\n    for (const domain of allDomains) {\n      try {\n        const latestReports = await storage.getReportsByDomainId(domain.id);\n        const previousReport = latestReports[0];\n\n        const newScan = await scanDNS(domain.name);\n\n        if (previousReport) {\n          const oldSeverity = (previousReport.scanJson as any).summary?.overall || \"PASS\";\n          const newSeverity = newScan.summary?.overall || \"PASS\";\n\n          const severityLevel: Record<string, number> = {\n            PASS: 0,\n            WARNING: 1,\n            FAIL: 2,\n          };\n\n          if (severityLevel[newSeverity] > severityLevel[oldSeverity]) {\n            console.log(\n              `[ALERT] Domain ${domain.name} status worsened from ${oldSeverity} to ${newSeverity}`\n            );\n          }\n        }\n      } catch (error) {\n        console.error(`[CRON] Failed to re-scan ${domain.name}:`, error);\n      }\n    }\n\n    console.log(\"[CRON] Daily re-scans completed\");\n    return { success: true, message: \"Re-scans completed\" };\n  } catch (error) {\n    console.error(\"[CRON] Re-scan job failed:\", error);\n    throw error;\n  }\n}\n","size_bytes":1442},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useEffect, useState } from \"react\";\n\nexport default function ThemeToggle() {\n  const [theme, setTheme] = useState<\"light\" | \"dark\">(\"dark\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as \"light\" | \"dark\" | null;\n    const initialTheme = savedTheme || \"dark\";\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle(\"dark\", initialTheme === \"dark\");\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === \"light\" ? \"dark\" : \"light\";\n    setTheme(newTheme);\n    localStorage.setItem(\"theme\", newTheme);\n    document.documentElement.classList.toggle(\"dark\", newTheme === \"dark\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      aria-label=\"Toggle theme\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n    </Button>\n  );\n}\n","size_bytes":1062},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ScanResults.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Share2, FileText, Save, LogIn } from \"lucide-react\";\nimport DNSRecordCard from \"./DNSRecordCard\";\nimport StatusBadge from \"./StatusBadge\";\nimport { Link } from \"wouter\";\n\ninterface ScanResultsProps {\n  domain: string;\n  overallStatus: \"PASS\" | \"WARN\" | \"FAIL\";\n  criticalIssues: number;\n  records: Array<{\n    type: string;\n    status: \"PASS\" | \"WARN\" | \"FAIL\";\n    record?: string;\n    issues?: string[];\n    suggestions?: string[];\n  }>;\n  onGenerateReport?: () => void;\n  onSaveAndShare?: () => void;\n  onShare?: () => void;\n  isAuthenticated?: boolean;\n}\n\nexport default function ScanResults({\n  domain,\n  overallStatus,\n  criticalIssues,\n  records,\n  onGenerateReport,\n  onSaveAndShare,\n  onShare,\n  isAuthenticated,\n}: ScanResultsProps) {\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-12\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-scan-domain\">\n              {domain}\n            </h1>\n            <div className=\"flex items-center gap-4\">\n              <StatusBadge status={overallStatus} />\n              {criticalIssues > 0 && (\n                <span className=\"text-sm text-destructive font-medium\">\n                  {criticalIssues} critical {criticalIssues === 1 ? \"issue\" : \"issues\"}\n                </span>\n              )}\n            </div>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              onClick={onShare}\n              data-testid=\"button-share\"\n            >\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              Share\n            </Button>\n            {isAuthenticated ? (\n              <Button\n                onClick={onSaveAndShare}\n                data-testid=\"button-save-share\"\n              >\n                <Save className=\"h-4 w-4 mr-2\" />\n                Save & Share\n              </Button>\n            ) : (\n              <>\n                <Button\n                  onClick={onGenerateReport}\n                  data-testid=\"button-generate-report\"\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Generate Report\n                </Button>\n                <Link href=\"/login\">\n                  <Button variant=\"outline\" data-testid=\"button-login-to-save\">\n                    <LogIn className=\"h-4 w-4 mr-2\" />\n                    Login to Save\n                  </Button>\n                </Link>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        {records.map((record, index) => (\n          <DNSRecordCard key={index} {...record} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2833},"client/src/components/examples/ThemeToggle.tsx":{"content":"import ThemeToggle from \"../ThemeToggle\";\n\nexport default function ThemeToggleExample() {\n  return <ThemeToggle />;\n}\n","size_bytes":118},"server/services/scanRunner.ts":{"content":"import crypto from \"crypto\";\nimport type { IStorage } from \"../storage\";\nimport { scanDNS } from \"../lib/dns-scanner\";\nimport { calculateDeliverabilityScore } from \"./scoring\";\nimport { diffScanRecords } from \"./diffEngine\";\n\ninterface DnsRecord {\n  type: string;\n  selector?: string;\n  value: string;\n  verdict: \"PASS\" | \"WARN\" | \"FAIL\" | \"INFO\";\n  meta?: Record<string, any>;\n}\n\nfunction hashValue(value: string): string {\n  return crypto.createHash(\"sha256\").update(value).digest(\"hex\").substring(0, 16);\n}\n\nfunction normalizeRecords(scanResult: any): DnsRecord[] {\n  const records: DnsRecord[] = [];\n\n  if (scanResult.spf) {\n    records.push({\n      type: \"spf\",\n      value: scanResult.spf.record || \"\",\n      verdict: scanResult.spf.status || \"INFO\",\n      meta: {\n        issues: scanResult.spf.issues,\n        suggestions: scanResult.spf.suggestions,\n      },\n    });\n  }\n\n  if (scanResult.dkim && Array.isArray(scanResult.dkim.selectors)) {\n    for (const sel of scanResult.dkim.selectors) {\n      records.push({\n        type: \"dkim\",\n        selector: sel.selector,\n        value: sel.record || \"\",\n        verdict: sel.status || \"INFO\",\n        meta: {\n          issues: sel.issues,\n          suggestions: sel.suggestions,\n        },\n      });\n    }\n  }\n\n  if (scanResult.dmarc) {\n    records.push({\n      type: \"dmarc\",\n      value: scanResult.dmarc.record || \"\",\n      verdict: scanResult.dmarc.status || \"INFO\",\n      meta: {\n        issues: scanResult.dmarc.issues,\n        suggestions: scanResult.dmarc.suggestions,\n      },\n    });\n  }\n\n  if (scanResult.bimi) {\n    records.push({\n      type: \"bimi\",\n      value: scanResult.bimi.record || \"\",\n      verdict: scanResult.bimi.status || \"INFO\",\n      meta: {\n        issues: scanResult.bimi.issues,\n        suggestions: scanResult.bimi.suggestions,\n      },\n    });\n  }\n\n  if (scanResult.mx) {\n    records.push({\n      type: \"mx\",\n      value: scanResult.mx.record || \"\",\n      verdict: scanResult.mx.status || \"INFO\",\n      meta: {\n        issues: scanResult.mx.issues,\n        suggestions: scanResult.mx.suggestions,\n      },\n    });\n  }\n\n  return records;\n}\n\nexport async function runScan(\n  domainId: string,\n  domain: string,\n  storage: IStorage\n): Promise<{ runId: string; score: number }> {\n  const run = await storage.createScanRun({\n    domainId,\n    startedAt: new Date(),\n    finishedAt: null,\n    status: \"running\",\n    errorText: null,\n    score: null,\n    scoreBreakdown: null,\n  });\n\n  const runId = run.id;\n\n  try {\n    const scanResult = await scanDNS(domain);\n    const records = normalizeRecords(scanResult);\n\n    for (const record of records) {\n      await storage.createScanRecord({\n        runId,\n        recordType: record.type,\n        selector: record.selector || null,\n        valueHash: hashValue(record.value),\n        rawValue: record.value,\n        verdict: record.verdict,\n        metaJson: record.meta || null,\n      });\n    }\n\n    const { score, breakdown } = calculateDeliverabilityScore(scanResult);\n\n    await storage.updateScanRun(runId, {\n      status: \"completed\",\n      finishedAt: new Date(),\n      score,\n      scoreBreakdown: breakdown,\n    });\n\n    const previousRuns = await storage.getScanRunsByDomainId(domainId, 2);\n    if (previousRuns.length === 2) {\n      const oldRun = previousRuns[1];\n      const oldRecords = await storage.getScanRecordsByRunId(oldRun.id);\n      const newRecords = await storage.getScanRecordsByRunId(runId);\n\n      const diff = diffScanRecords(oldRecords, newRecords);\n\n      if (diff.added.length > 0 || diff.removed.length > 0 || diff.changed.length > 0) {\n        await storage.createScanDiff({\n          runId,\n          addedJson: diff.added,\n          removedJson: diff.removed,\n          changedJson: diff.changed,\n          severity: diff.severity,\n        });\n      }\n    }\n\n    return { runId, score };\n  } catch (error: any) {\n    await storage.updateScanRun(runId, {\n      status: \"failed\",\n      finishedAt: new Date(),\n      errorText: error.message || \"Unknown error\",\n    });\n    throw error;\n  }\n}\n","size_bytes":4053},"client/src/components/Dashboard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Plus, Loader2, AlertCircle, Crown } from \"lucide-react\";\nimport DomainCard from \"./DomainCard\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { sanitizeDomain } from \"@/lib/sanitize\";\nimport UsageWidget from \"./UsageWidget\";\n\nexport default function Dashboard() {\n  const { user, isAuthenticated, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [newDomain, setNewDomain] = useState(\"\");\n\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    if (params.get(\"upgraded\") === \"true\") {\n      toast({\n        title: \"Welcome to Pro!\",\n        description: \"Your account has been upgraded successfully.\",\n      });\n      window.history.replaceState({}, \"\", \"/dashboard\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/billing/plan\"] });\n    }\n  }, [toast]);\n\n  const { data: dashboardData, isLoading } = useQuery<any>({\n    queryKey: [\"/api/dashboard\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: planData } = useQuery<{ plan: string }>({\n    queryKey: [\"/api/billing/plan\"],\n    enabled: isAuthenticated,\n    staleTime: 5000,\n    retry: 1,\n  });\n\n  const addDomainMutation = useMutation({\n    mutationFn: async (name: string) => {\n      const res = await apiRequest(\"POST\", \"/api/domain\", { name });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/usage\"] });\n      setShowAddDialog(false);\n      setNewDomain(\"\");\n      toast({\n        title: \"Domain added\",\n        description: \"You can now scan this domain\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to add domain\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddDomain = () => {\n    if (newDomain.trim()) {\n      addDomainMutation.mutate(newDomain.trim());\n    }\n  };\n\n  if (authLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"text-center py-12\">\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Authentication Required</h2>\n          <p className=\"text-muted-foreground mb-6\">Please sign in to access your dashboard</p>\n          <Button onClick={() => setLocation(\"/login\")}>Sign In</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        {/* Usage widget skeleton */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <Skeleton className=\"h-4 w-64 mb-2\" />\n                <Skeleton className=\"h-2 w-full max-w-md\" />\n              </div>\n              <Skeleton className=\"h-9 w-24\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Skeleton className=\"h-9 w-48 mb-2\" />\n            <Skeleton className=\"h-5 w-80\" />\n          </div>\n          <Skeleton className=\"h-10 w-32\" />\n        </div>\n\n        <Skeleton className=\"h-24 w-full mb-8\" />\n\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {[...Array(3)].map((_, i) => (\n            <Card key={i} className=\"p-6\">\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex-1\">\n                  <Skeleton className=\"h-6 w-40 mb-2\" />\n                  <Skeleton className=\"h-5 w-24\" />\n                </div>\n                <Skeleton className=\"h-6 w-16\" />\n              </div>\n              <Skeleton className=\"h-4 w-32 mb-3\" />\n              <div className=\"flex gap-2\">\n                <Skeleton className=\"h-9 flex-1\" />\n                <Skeleton className=\"h-9 flex-1\" />\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const domains = dashboardData?.domains || [];\n  const isPro = user?.isPro === \"true\" || planData?.plan === \"pro\";\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-12\">\n      <UsageWidget />\n\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold mb-2\">Your Domains</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and monitor your domain deliverability\n          </p>\n        </div>\n        <Button onClick={() => setShowAddDialog(true)} data-testid=\"button-add-domain\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Domain\n        </Button>\n      </div>\n\n      <Card className=\"mb-8\" data-testid=\"card-subscription-status\">\n        <CardContent className=\"flex items-center justify-between p-6\">\n          <div className=\"flex items-center gap-3\">\n            {isPro ? (\n              <>\n                <Crown className=\"h-6 w-6 text-primary\" />\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-semibold\">Pro Plan</h3>\n                    <Badge variant=\"default\" data-testid=\"badge-pro\">Active</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Unlimited scans, email alerts, and team sharing\n                  </p>\n                </div>\n              </>\n            ) : (\n              <>\n                <div>\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-semibold\">Free Plan</h3>\n                    <Badge variant=\"secondary\" data-testid=\"badge-free\">Active</Badge>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    1 scan per day, basic reports\n                  </p>\n                </div>\n              </>\n            )}\n          </div>\n          {!isPro && (\n            <Button onClick={() => setLocation(\"/pricing\")} data-testid=\"button-upgrade-dashboard\">\n              <Crown className=\"h-4 w-4 mr-2\" />\n              Upgrade to Pro\n            </Button>\n          )}\n        </CardContent>\n      </Card>\n\n      {domains.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground mb-4\">No domains yet</p>\n          <Button onClick={() => setShowAddDialog(true)}>Add your first domain</Button>\n        </div>\n      ) : (\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {domains.map((domain: any) => (\n            <DomainCard\n              key={domain.id}\n              domain={sanitizeDomain(domain?.name)}\n              lastScanDate={domain.latestReport ? formatDistanceToNow(new Date(domain.latestReport.createdAt), { addSuffix: true }) : \"Never\"}\n              status={domain.latestReport?.scanJson?.summary?.overall || \"WARN\"}\n              criticalIssues={domain.latestReport?.scanJson?.summary?.criticalIssues || 0}\n              onRescan={() => setLocation(`/?domain=${sanitizeDomain(domain?.name)}&scan=true`)}\n              onViewDetails={() => domain.latestReport && setLocation(`/report/${domain.latestReport.slug}`)}\n            />\n          ))}\n        </div>\n      )}\n\n      <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Domain</DialogTitle>\n            <DialogDescription>Enter the domain name you want to monitor</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"domain\">Domain Name</Label>\n              <Input\n                id=\"domain\"\n                placeholder=\"example.com\"\n                value={newDomain}\n                onChange={(e) => setNewDomain(e.target.value)}\n                data-testid=\"input-add-domain\"\n              />\n            </div>\n            <Button \n              onClick={handleAddDomain} \n              className=\"w-full\"\n              disabled={addDomainMutation.isPending || !newDomain.trim()}\n              data-testid=\"button-confirm-add-domain\"\n            >\n              {addDomainMutation.isPending ? \"Adding...\" : \"Add Domain\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":9475},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"server/lib/template-linter.ts":{"content":"export interface TemplateLintResult {\n  score: number;\n  warnings: string[];\n  suggestions: string[];\n}\n\nconst SPAM_WORDS = [\n  \"FREE\", \"CLICK HERE\", \"WINNER\", \"CONGRATULATIONS\", \"URGENT\",\n  \"ACT NOW\", \"LIMITED TIME\", \"GUARANTEED\", \"NO OBLIGATION\",\n  \"RISK FREE\", \"CASH BONUS\", \"MILLION DOLLARS\"\n];\n\nconst SPAM_PATTERNS = [\n  { pattern: /!!!+/, message: \"Multiple exclamation marks\" },\n  { pattern: /\\$\\$\\$/, message: \"Multiple dollar signs\" },\n  { pattern: /[A-Z]{10,}/, message: \"Excessive use of capital letters\" },\n];\n\nexport function lintTemplate(subject: string, body: string = \"\", html: string = \"\"): TemplateLintResult {\n  const warnings: string[] = [];\n  const suggestions: string[] = [];\n  let score = 100;\n\n  const fullText = `${subject} ${body}`;\n\n  if (subject.toUpperCase() === subject && subject.length > 0) {\n    warnings.push(\"Subject line is in ALL CAPS\");\n    score -= 15;\n  }\n\n  for (const word of SPAM_WORDS) {\n    if (fullText.toUpperCase().includes(word)) {\n      warnings.push(`Contains spam trigger word: \"${word}\"`);\n      score -= 10;\n    }\n  }\n\n  for (const { pattern, message } of SPAM_PATTERNS) {\n    if (pattern.test(fullText)) {\n      warnings.push(message);\n      score -= 10;\n    }\n  }\n\n  const httpLinks = (fullText.match(/http:\\/\\//g) || []).length;\n  if (httpLinks > 0) {\n    warnings.push(`Contains ${httpLinks} non-HTTPS link(s)`);\n    score -= 10;\n  }\n\n  if (subject.length > 60) {\n    suggestions.push(`Subject line is ${subject.length} characters (consider keeping under 60)`);\n    score -= 5;\n  }\n\n  if (subject.length < 10 && subject.length > 0) {\n    suggestions.push(\"Subject line is very short (under 10 characters)\");\n    score -= 5;\n  }\n\n  const urlMatches = fullText.match(/https?:\\/\\/[^\\s]+/g) || [];\n  if (urlMatches.length > 10) {\n    warnings.push(`Contains ${urlMatches.length} links (high link count can trigger spam filters)`);\n    score -= 15;\n  }\n\n  if (html) {\n    if (html.includes(\"<script\")) {\n      warnings.push(\"Contains <script> tags (will be stripped by most email clients)\");\n      score -= 20;\n    }\n\n    if (html.includes(\"javascript:\")) {\n      warnings.push(\"Contains javascript: protocol (security risk)\");\n      score -= 20;\n    }\n  }\n\n  const imageCount = (html.match(/<img/g) || []).length;\n  if (imageCount > 0 && fullText.length < 100) {\n    warnings.push(\"Image-heavy email with little text (can trigger spam filters)\");\n    score -= 10;\n  }\n\n  if (fullText.includes(\"unsubscribe\") === false && fullText.length > 50) {\n    suggestions.push(\"Consider adding an unsubscribe link (required for bulk email)\");\n  }\n\n  if (warnings.length === 0 && suggestions.length === 0) {\n    suggestions.push(\"Template looks good! No issues detected.\");\n  }\n\n  return {\n    score: Math.max(0, Math.min(100, score)),\n    warnings,\n    suggestions,\n  };\n}\n","size_bytes":2816},"server/storage.ts":{"content":"import {\n  type User,\n  type InsertUser,\n  type Domain,\n  type InsertDomain,\n  type Report,\n  type InsertReport,\n  type HealthPoint,\n  type InsertHealthPoint,\n  type TemplateCheck,\n  type InsertTemplateCheck,\n  type ScanRun,\n  type InsertScanRun,\n  type ScanRecord,\n  type InsertScanRecord,\n  type ScanDiff,\n  type InsertScanDiff,\n  type Alert,\n  type InsertAlert,\n  type AlertPref,\n  type InsertAlertPref,\n  type EmailLog,\n  type InsertEmailLog,\n  type Destination,\n  type InsertDestination,\n  type PlanLimit,\n  type InsertPlanLimit,\n  type Team,\n  type InsertTeam,\n  type TeamMember,\n  type InsertTeamMember,\n  type TeamDomain,\n  type InsertTeamDomain,\n  type AuditLog,\n  type InsertAuditLog,\n  type PublicReport,\n  type InsertPublicReport,\n  type ReportExport,\n  type InsertReportExport,\n  type DomainAlertPref,\n  type InsertDomainAlertPref,\n  type AppEvent,\n  type InsertAppEvent,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n  updateUserProStatus(userId: string, isPro: boolean): Promise<User>;\n  upgradeUserToPro(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n\n  getDomain(id: string): Promise<Domain | undefined>;\n  getDomainsByUserId(userId: string): Promise<Domain[]>;\n  getDomainByName(userId: string, name: string): Promise<Domain | undefined>;\n  createDomain(domain: InsertDomain): Promise<Domain>;\n  deleteDomain(id: string): Promise<void>;\n  updateDomainMonitoring(domainId: string, enabled: boolean): Promise<Domain>;\n  getMonitoredDomains(): Promise<Domain[]>;\n\n  getReport(id: string): Promise<Report | undefined>;\n  getReportBySlug(slug: string): Promise<Report | undefined>;\n  getReportsByDomainId(domainId: string): Promise<Report[]>;\n  createReport(report: InsertReport): Promise<Report>;\n\n  getHealthPointsByDomainId(domainId: string): Promise<HealthPoint[]>;\n  createHealthPoint(healthPoint: InsertHealthPoint): Promise<HealthPoint>;\n\n  getTemplateChecksByUserId(userId: string): Promise<TemplateCheck[]>;\n  createTemplateCheck(templateCheck: InsertTemplateCheck): Promise<TemplateCheck>;\n\n  getScanRun(id: string): Promise<ScanRun | undefined>;\n  getScanRunsByDomainId(domainId: string, limit?: number): Promise<ScanRun[]>;\n  getScansSince(userId: string, since: Date): Promise<ScanRun[]>;\n  getLatestScanRunByDomainId(domainId: string): Promise<ScanRun | undefined>;\n  getScanRunByDomainIdAndDate(domainId: string, date: string): Promise<ScanRun | undefined>;\n  createScanRun(scanRun: InsertScanRun): Promise<ScanRun>;\n  updateScanRun(id: string, data: Partial<InsertScanRun>): Promise<ScanRun>;\n\n  getScanRecordsByRunId(runId: string): Promise<ScanRecord[]>;\n  createScanRecord(scanRecord: InsertScanRecord): Promise<ScanRecord>;\n\n  getLatestScanDiffByDomainId(domainId: string): Promise<ScanDiff | undefined>;\n  createScanDiff(scanDiff: InsertScanDiff): Promise<ScanDiff>;\n\n  getAlertsByDomainId(domainId: string): Promise<Alert[]>;\n  getAlertsByUserId(userId: string): Promise<Alert[]>;\n  getAlertsSince(userId: string, since: Date): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n\n  getAlertPref(userId: string): Promise<AlertPref | undefined>;\n  upsertAlertPref(alertPref: InsertAlertPref): Promise<AlertPref>;\n\n  createEmailLog(emailLog: InsertEmailLog): Promise<EmailLog>;\n  getEmailLogsByUserId(userId: string, type?: string): Promise<EmailLog[]>;\n\n  getDestinationsByUserId(userId: string): Promise<Destination[]>;\n  createDestination(destination: InsertDestination): Promise<Destination>;\n  deleteDestination(id: string): Promise<void>;\n  updateDestinationEnabled(id: string, enabled: boolean): Promise<Destination>;\n\n  getPlanLimit(plan: string): Promise<PlanLimit | undefined>;\n  getAllPlanLimits(): Promise<PlanLimit[]>;\n\n  getTeamsByUserId(userId: string): Promise<Team[]>;\n  getTeamById(id: string): Promise<Team | undefined>;\n  createTeam(team: InsertTeam): Promise<Team>;\n  deleteTeam(id: string): Promise<void>;\n\n  getTeamMembersByTeamId(teamId: string): Promise<TeamMember[]>;\n  getTeamMembersByUserId(userId: string): Promise<TeamMember[]>;\n  createTeamMember(teamMember: InsertTeamMember): Promise<TeamMember>;\n  deleteTeamMember(teamId: string, userId: string): Promise<void>;\n  updateTeamMemberRole(teamId: string, userId: string, role: string): Promise<TeamMember>;\n\n  getTeamDomainsByTeamId(teamId: string): Promise<TeamDomain[]>;\n  getTeamDomainsByDomainId(domainId: string): Promise<TeamDomain[]>;\n  createTeamDomain(teamDomain: InsertTeamDomain): Promise<TeamDomain>;\n  deleteTeamDomain(teamId: string, domainId: string): Promise<void>;\n\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogsByDomainId(domainId: string, limit?: number): Promise<AuditLog[]>;\n  getAuditLogsByUserId(userId: string, limit?: number): Promise<AuditLog[]>;\n\n  getPublicReportByToken(token: string): Promise<PublicReport | undefined>;\n  getPublicReportsByDomainId(domainId: string): Promise<PublicReport[]>;\n  createPublicReport(publicReport: InsertPublicReport): Promise<PublicReport>;\n  deletePublicReport(id: string): Promise<void>;\n\n  getReportExportsByDomainId(domainId: string): Promise<ReportExport[]>;\n  createReportExport(reportExport: InsertReportExport): Promise<ReportExport>;\n\n  getDomainAlertPref(domainId: string): Promise<DomainAlertPref | undefined>;\n  upsertDomainAlertPref(domainAlertPref: InsertDomainAlertPref): Promise<DomainAlertPref>;\n  updateUserPlan(userId: string, plan: string): Promise<User>;\n\n  createAppEvent(appEvent: InsertAppEvent): Promise<AppEvent>;\n  getAppEventsByUserId(userId: string, limit?: number): Promise<AppEvent[]>;\n  getAppEventsByEvent(event: string, limit?: number): Promise<AppEvent[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private domains: Map<string, Domain>;\n  private reports: Map<string, Report>;\n  private healthPoints: Map<string, HealthPoint>;\n  private templateChecks: Map<string, TemplateCheck>;\n  private scanRuns: Map<string, ScanRun>;\n  private scanRecords: Map<string, ScanRecord>;\n  private scanDiffs: Map<string, ScanDiff>;\n  private alerts: Map<string, Alert>;\n  private alertPrefs: Map<string, AlertPref>;\n  private emailLogs: Map<string, EmailLog>;\n\n  constructor() {\n    this.users = new Map();\n    this.domains = new Map();\n    this.reports = new Map();\n    this.healthPoints = new Map();\n    this.templateChecks = new Map();\n    this.scanRuns = new Map();\n    this.scanRecords = new Map();\n    this.scanDiffs = new Map();\n    this.alerts = new Map();\n    this.alertPrefs = new Map();\n    this.emailLogs = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.email === email);\n  }\n\n  async getUserByStripeCustomerId(stripeCustomerId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find((user) => user.stripeCustomerId === stripeCustomerId);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      id,\n      email: insertUser.email,\n      passwordHash: insertUser.passwordHash ?? null,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      isPro: \"false\",\n      plan: \"Free\",\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.stripeCustomerId = stripeCustomerId;\n    user.stripeSubscriptionId = stripeSubscriptionId;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async updateUserProStatus(userId: string, isPro: boolean): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.isPro = isPro ? \"true\" : \"false\";\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async upgradeUserToPro(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.stripeCustomerId = stripeCustomerId;\n    user.stripeSubscriptionId = stripeSubscriptionId;\n    user.isPro = \"true\";\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async getDomain(id: string): Promise<Domain | undefined> {\n    return this.domains.get(id);\n  }\n\n  async getDomainsByUserId(userId: string): Promise<Domain[]> {\n    return Array.from(this.domains.values()).filter((domain) => domain.userId === userId);\n  }\n\n  async getDomainByName(userId: string, name: string): Promise<Domain | undefined> {\n    return Array.from(this.domains.values()).find(\n      (domain) => domain.userId === userId && domain.name === name\n    );\n  }\n\n  async createDomain(insertDomain: InsertDomain): Promise<Domain> {\n    const id = randomUUID();\n    const domain: Domain = {\n      id,\n      name: insertDomain.name,\n      userId: insertDomain.userId ?? null,\n      monitoringEnabled: insertDomain.monitoringEnabled ?? \"false\",\n      createdAt: new Date(),\n    };\n    this.domains.set(id, domain);\n    return domain;\n  }\n\n  async deleteDomain(id: string): Promise<void> {\n    this.domains.delete(id);\n  }\n\n  async getReport(id: string): Promise<Report | undefined> {\n    return this.reports.get(id);\n  }\n\n  async getReportBySlug(slug: string): Promise<Report | undefined> {\n    return Array.from(this.reports.values()).find((report) => report.slug === slug);\n  }\n\n  async getReportsByDomainId(domainId: string): Promise<Report[]> {\n    return Array.from(this.reports.values()).filter((report) => report.domainId === domainId);\n  }\n\n  async createReport(insertReport: InsertReport): Promise<Report> {\n    const id = randomUUID();\n    const report: Report = {\n      id,\n      slug: insertReport.slug,\n      domainId: insertReport.domainId ?? null,\n      scanJson: insertReport.scanJson,\n      createdAt: new Date(),\n    };\n    this.reports.set(id, report);\n    return report;\n  }\n\n  async getHealthPointsByDomainId(domainId: string): Promise<HealthPoint[]> {\n    return Array.from(this.healthPoints.values())\n      .filter((hp) => hp.domainId === domainId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createHealthPoint(insertHealthPoint: InsertHealthPoint): Promise<HealthPoint> {\n    const id = randomUUID();\n    const healthPoint: HealthPoint = {\n      id,\n      domainId: insertHealthPoint.domainId,\n      sent: insertHealthPoint.sent,\n      openRate: insertHealthPoint.openRate,\n      spamRate: insertHealthPoint.spamRate,\n      hardBounces: insertHealthPoint.hardBounces,\n      softBounces: insertHealthPoint.softBounces,\n      note: insertHealthPoint.note ?? null,\n      createdAt: new Date(),\n    };\n    this.healthPoints.set(id, healthPoint);\n    return healthPoint;\n  }\n\n  async getTemplateChecksByUserId(userId: string): Promise<TemplateCheck[]> {\n    return Array.from(this.templateChecks.values())\n      .filter((tc) => tc.userId === userId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createTemplateCheck(insertTemplateCheck: InsertTemplateCheck): Promise<TemplateCheck> {\n    const id = randomUUID();\n    const templateCheck: TemplateCheck = {\n      id,\n      userId: insertTemplateCheck.userId ?? null,\n      subject: insertTemplateCheck.subject,\n      html: insertTemplateCheck.html ?? null,\n      text: insertTemplateCheck.text ?? null,\n      resultJson: insertTemplateCheck.resultJson,\n      createdAt: new Date(),\n    };\n    this.templateChecks.set(id, templateCheck);\n    return templateCheck;\n  }\n\n  async getScanRun(): Promise<ScanRun | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getScanRunsByDomainId(): Promise<ScanRun[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getScansSince(): Promise<ScanRun[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getLatestScanRunByDomainId(): Promise<ScanRun | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getScanRunByDomainIdAndDate(): Promise<ScanRun | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createScanRun(): Promise<ScanRun> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async updateScanRun(): Promise<ScanRun> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getScanRecordsByRunId(): Promise<ScanRecord[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createScanRecord(): Promise<ScanRecord> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getLatestScanDiffByDomainId(): Promise<ScanDiff | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createScanDiff(): Promise<ScanDiff> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAlertsByDomainId(): Promise<Alert[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAlertsByUserId(): Promise<Alert[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAlertsSince(): Promise<Alert[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createAlert(): Promise<Alert> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAlertPref(): Promise<AlertPref | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async upsertAlertPref(): Promise<AlertPref> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createEmailLog(): Promise<EmailLog> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getEmailLogsByUserId(): Promise<EmailLog[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async updateDomainMonitoring(domainId: string, enabled: boolean): Promise<Domain> {\n    const domain = this.domains.get(domainId);\n    if (!domain) throw new Error(\"Domain not found\");\n    domain.monitoringEnabled = enabled ? \"true\" : \"false\";\n    this.domains.set(domainId, domain);\n    return domain;\n  }\n\n  async getMonitoredDomains(): Promise<Domain[]> {\n    return Array.from(this.domains.values()).filter((domain) => {\n      if (domain.monitoringEnabled !== \"true\" || !domain.userId) return false;\n      const user = this.users.get(domain.userId);\n      return user?.isPro === \"true\";\n    });\n  }\n\n  async getDestinationsByUserId(): Promise<Destination[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createDestination(): Promise<Destination> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async deleteDestination(): Promise<void> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async updateDestinationEnabled(): Promise<Destination> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getPlanLimit(): Promise<PlanLimit | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAllPlanLimits(): Promise<PlanLimit[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamsByUserId(): Promise<Team[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamById(): Promise<Team | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createTeam(): Promise<Team> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async deleteTeam(): Promise<void> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamMembersByTeamId(): Promise<TeamMember[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamMembersByUserId(): Promise<TeamMember[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createTeamMember(): Promise<TeamMember> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async deleteTeamMember(): Promise<void> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async updateTeamMemberRole(): Promise<TeamMember> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamDomainsByTeamId(): Promise<TeamDomain[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getTeamDomainsByDomainId(): Promise<TeamDomain[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createTeamDomain(): Promise<TeamDomain> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async deleteTeamDomain(): Promise<void> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createAuditLog(): Promise<AuditLog> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAuditLogsByDomainId(): Promise<AuditLog[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAuditLogsByUserId(): Promise<AuditLog[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getPublicReportByToken(): Promise<PublicReport | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getPublicReportsByDomainId(): Promise<PublicReport[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createPublicReport(): Promise<PublicReport> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async deletePublicReport(): Promise<void> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getReportExportsByDomainId(): Promise<ReportExport[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async createReportExport(): Promise<ReportExport> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getDomainAlertPref(): Promise<DomainAlertPref | undefined> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async upsertDomainAlertPref(): Promise<DomainAlertPref> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async updateUserPlan(userId: string, plan: string): Promise<User> {\n    const user = this.users.get(userId);\n    if (!user) throw new Error(\"User not found\");\n    user.plan = plan;\n    this.users.set(userId, user);\n    return user;\n  }\n\n  async createAppEvent(): Promise<AppEvent> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAppEventsByUserId(): Promise<AppEvent[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n\n  async getAppEventsByEvent(): Promise<AppEvent[]> {\n    throw new Error(\"MemStorage: Not implemented - use DbStorage\");\n  }\n}\n\nimport { DbStorage } from \"./db-storage\";\n\nexport const storage = process.env.NODE_ENV === \"test\" ? new MemStorage() : new DbStorage();\n","size_bytes":19673},"client/src/components/PublicReport.tsx":{"content":"import { Card, CardHeader, CardTitle, CardDescription, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Printer, Share2, Download, Settings, Bell } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport StatusBadge from \"./StatusBadge\";\nimport DNSRecordCard from \"./DNSRecordCard\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState } from \"react\";\nimport { sanitizeDomain } from \"@/lib/sanitize\";\n\ninterface PublicReportProps {\n  slug: string;\n  domain: string;\n  domainId?: string;\n  domainUserId?: string;\n  scanDate: string;\n  overallStatus: \"PASS\" | \"WARN\" | \"FAIL\";\n  records: Array<{\n    type: string;\n    status: \"PASS\" | \"WARN\" | \"FAIL\";\n    record?: string;\n    issues?: string[];\n    suggestions?: string[];\n  }>;\n}\n\nexport default function PublicReport({\n  slug,\n  domain,\n  domainId,\n  domainUserId,\n  scanDate,\n  overallStatus,\n  records,\n}: PublicReportProps) {\n  const { isAuthenticated, user } = useAuth();\n  const { toast } = useToast();\n  \n  // Check if current user owns this domain\n  const isOwner = isAuthenticated && domainId && user?.id === domainUserId;\n  const [showAlertPrefs, setShowAlertPrefs] = useState(false);\n\n  const { data: planData } = useQuery<{ plan: string; features: Record<string, boolean> }>({\n    queryKey: [\"/api/billing/plan\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: alertPrefs, isLoading: alertPrefsLoading } = useQuery<{\n    emailEnabled: string | boolean;\n    slackEnabled: string | boolean;\n    threshold: string;\n    digest: string | boolean;\n  }>({\n    queryKey: [\"/api/domains\", domainId, \"alert-prefs\"],\n    enabled: Boolean(isOwner && domainId),\n  });\n\n  // Helper to normalize preferences to string values for API\n  const normalizePrefs = (prefs: any) => ({\n    emailEnabled: String(prefs.emailEnabled === true || prefs.emailEnabled === \"true\" ? \"true\" : \"false\"),\n    slackEnabled: String(prefs.slackEnabled === true || prefs.slackEnabled === \"true\" ? \"true\" : \"false\"),\n    threshold: String(prefs.threshold || \"warn\"),\n    digest: String(prefs.digest === true || prefs.digest === \"true\" ? \"true\" : \"false\"),\n  });\n\n  const updateAlertPrefsMutation = useMutation({\n    mutationFn: async (prefs: any) => {\n      const normalized = normalizePrefs(prefs);\n      const res = await apiRequest(\"PUT\", `/api/domains/${domainId}/alert-prefs`, normalized);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/domains\", domainId, \"alert-prefs\"] });\n      toast({\n        title: \"Alert Preferences Saved\",\n        description: \"Your notification settings have been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update alert preferences.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadPdfMutation = useMutation({\n    mutationFn: async (teamId?: string) => {\n      const res = await apiRequest(\"POST\", `/api/reports/${slug}/export`, {\n        teamId: teamId || undefined,\n      });\n      \n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.error || \"Failed to generate PDF\");\n      }\n\n      const blob = await res.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = `${sanitizeDomain(domain)}-deliverability-report.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"PDF Downloaded\",\n        description: \"Your deliverability report has been downloaded successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Download Failed\",\n        description: error.message || \"Unable to download PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleShare = () => {\n    navigator.clipboard.writeText(window.location.href);\n    toast({\n      title: \"Link Copied\",\n      description: \"Report link has been copied to your clipboard.\",\n    });\n  };\n\n  const handleDownloadPdf = () => {\n    downloadPdfMutation.mutate(undefined);\n  };\n\n  const canDownloadPdf = isAuthenticated && planData?.features?.pdf === true;\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-6 py-12\">\n      <Card className=\"p-8 mb-6 print:border-0\">\n        <div className=\"flex items-start justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-report-domain\">\n              {sanitizeDomain(domain)}\n            </h1>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Deliverability Report • Generated {scanDate}\n            </p>\n            <StatusBadge status={overallStatus} />\n          </div>\n          <div className=\"flex gap-2 print:hidden\">\n            <Button variant=\"outline\" size=\"icon\" onClick={handleShare} data-testid=\"button-share-report\">\n              <Share2 className=\"h-4 w-4\" />\n            </Button>\n            {canDownloadPdf && (\n              <Button \n                variant=\"outline\" \n                size=\"icon\" \n                onClick={handleDownloadPdf}\n                disabled={downloadPdfMutation.isPending}\n                data-testid=\"button-download-pdf\"\n              >\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            )}\n            <Button variant=\"outline\" size=\"icon\" onClick={handlePrint} data-testid=\"button-print-report\">\n              <Printer className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-4 mb-8 p-4 bg-muted rounded-lg\">\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">Total Records</p>\n            <p className=\"text-2xl font-bold\">{records?.length || 0}</p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">Passed</p>\n            <p className=\"text-2xl font-bold text-success\">\n              {records?.filter((r) => r?.status === \"PASS\")?.length || 0}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-1\">Issues</p>\n            <p className=\"text-2xl font-bold text-destructive\">\n              {records?.filter((r) => r?.status === \"FAIL\")?.length || 0}\n            </p>\n          </div>\n        </div>\n      </Card>\n\n      <div className=\"space-y-6\">\n        <h2 className=\"text-2xl font-bold\">DNS Records Analysis</h2>\n        <div className=\"grid gap-6 md:grid-cols-2\">\n          {records?.map((record, index) => (\n            <DNSRecordCard key={index} {...record} />\n          )) || (\n            <p className=\"text-muted-foreground\">No DNS records found</p>\n          )}\n        </div>\n      </div>\n\n      {isOwner && (\n        <Card className=\"mt-8 print:hidden\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5 text-muted-foreground\" />\n                <CardTitle>Alert Preferences</CardTitle>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowAlertPrefs(!showAlertPrefs)}\n                data-testid=\"button-toggle-alert-prefs\"\n              >\n                {showAlertPrefs ? \"Hide\" : \"Show\"}\n              </Button>\n            </div>\n            <CardDescription>\n              Configure notifications for this domain (overrides global settings)\n            </CardDescription>\n          </CardHeader>\n          \n          {showAlertPrefs && (\n            <CardContent className=\"space-y-6\">\n              {alertPrefsLoading ? (\n                <div className=\"flex justify-center py-4\">\n                  <div className=\"animate-pulse text-muted-foreground\">Loading preferences...</div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"email-enabled\" data-testid=\"label-email-enabled\">Email Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive alerts via email\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"email-enabled\"\n                      checked={alertPrefs?.emailEnabled === \"true\" || alertPrefs?.emailEnabled === true}\n                      onCheckedChange={(checked) =>\n                        updateAlertPrefsMutation.mutate({\n                          ...alertPrefs,\n                          emailEnabled: checked ? \"true\" : \"false\",\n                        })\n                      }\n                      data-testid=\"switch-email-enabled\"\n                    />\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"slack-enabled\" data-testid=\"label-slack-enabled\">Slack Alerts</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Receive alerts via Slack webhook\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"slack-enabled\"\n                      checked={alertPrefs?.slackEnabled === \"true\" || alertPrefs?.slackEnabled === true}\n                      onCheckedChange={(checked) =>\n                        updateAlertPrefsMutation.mutate({\n                          ...alertPrefs,\n                          slackEnabled: checked ? \"true\" : \"false\",\n                        })\n                      }\n                      data-testid=\"switch-slack-enabled\"\n                    />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"threshold\" data-testid=\"label-threshold\">Alert Threshold</Label>\n                    <Select\n                      value={alertPrefs?.threshold || \"warn\"}\n                      onValueChange={(value) =>\n                        updateAlertPrefsMutation.mutate({\n                          ...alertPrefs,\n                          threshold: value,\n                        })\n                      }\n                    >\n                      <SelectTrigger id=\"threshold\" data-testid=\"select-threshold\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"info\">Info (all changes)</SelectItem>\n                        <SelectItem value=\"warn\">Warning (warnings & failures)</SelectItem>\n                        <SelectItem value=\"fail\">Critical (failures only)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Minimum severity level to trigger alerts\n                    </p>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <Label htmlFor=\"digest-enabled\" data-testid=\"label-digest-enabled\">Weekly Digest</Label>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Include in weekly summary email\n                      </p>\n                    </div>\n                    <Switch\n                      id=\"digest-enabled\"\n                      checked={alertPrefs?.digest === \"true\" || alertPrefs?.digest === true}\n                      onCheckedChange={(checked) =>\n                        updateAlertPrefsMutation.mutate({\n                          ...alertPrefs,\n                          digest: checked ? \"true\" : \"false\",\n                        })\n                      }\n                      data-testid=\"switch-digest-enabled\"\n                    />\n                  </div>\n                </>\n              )}\n            </CardContent>\n          )}\n        </Card>\n      )}\n\n      <div className=\"mt-12 text-center text-sm text-muted-foreground print:hidden\">\n        <p>Powered by Inbox Deliverability Copilot</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12853},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 214 32% 91%;\n\n  --card: 210 20% 98%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 214 32% 91%;\n\n  --sidebar: 0 0% 100%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 214 32% 91%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 210 20% 96%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 214 32% 85%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 210 20% 94%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 210 20% 96%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 210 17% 93%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 214 32% 85%;\n  --ring: 217 91% 60%;\n\n  --chart-1: 217 91% 45%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 38 92% 50%;\n  --chart-4: 199 89% 48%;\n  --chart-5: 271 81% 56%;\n\n  --success: 142 76% 36%;\n  --success-foreground: 210 40% 98%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 222 47% 11%;\n  --info: 199 89% 48%;\n  --info-foreground: 210 40% 98%;\n\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Menlo', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 47% 11% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 47% 11% / 0.1);\n  --shadow-sm: 0px 2px 4px -1px hsl(222 47% 11% / 0.06), 0px 1px 2px -1px hsl(222 47% 11% / 0.06);\n  --shadow: 0px 4px 6px -1px hsl(222 47% 11% / 0.1), 0px 2px 4px -1px hsl(222 47% 11% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(222 47% 11% / 0.12), 0px 3px 6px -2px hsl(222 47% 11% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(222 47% 11% / 0.15), 0px 4px 8px -2px hsl(222 47% 11% / 0.1);\n  --shadow-xl: 0px 20px 30px -6px hsl(222 47% 11% / 0.18), 0px 8px 12px -4px hsl(222 47% 11% / 0.12);\n  --shadow-2xl: 0px 30px 40px -8px hsl(222 47% 11% / 0.22);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 20% 30%;\n\n  --card: 217 33% 17%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 20% 30%;\n\n  --sidebar: 222 47% 11%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 20% 25%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 210 40% 98%;\n\n  --sidebar-accent: 217 33% 22%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 217 33% 20%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 20% 35%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 210 40% 98%;\n\n  --secondary: 217 20% 26%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 20% 24%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 15% 25%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 210 40% 98%;\n\n  --input: 217 20% 35%;\n  --ring: 217 91% 60%;\n\n  --chart-1: 217 91% 70%;\n  --chart-2: 142 76% 55%;\n  --chart-3: 38 92% 65%;\n  --chart-4: 199 89% 65%;\n  --chart-5: 271 81% 70%;\n\n  --success: 142 76% 36%;\n  --success-foreground: 210 40% 98%;\n  --warning: 38 92% 50%;\n  --warning-foreground: 222 47% 11%;\n  --info: 199 89% 48%;\n  --info-foreground: 210 40% 98%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.2), 0px 1px 2px -1px hsl(0 0% 0% / 0.2);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.3), 0px 2px 4px -1px hsl(0 0% 0% / 0.2);\n  --shadow-md: 0px 6px 12px -2px hsl(0 0% 0% / 0.35), 0px 3px 6px -2px hsl(0 0% 0% / 0.25);\n  --shadow-lg: 0px 10px 20px -4px hsl(0 0% 0% / 0.4), 0px 4px 8px -2px hsl(0 0% 0% / 0.3);\n  --shadow-xl: 0px 20px 30px -6px hsl(0 0% 0% / 0.45), 0px 8px 12px -4px hsl(0 0% 0% / 0.35);\n  --shadow-2xl: 0px 30px 40px -8px hsl(0 0% 0% / 0.5);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11000},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/examples/DomainCard.tsx":{"content":"import DomainCard from \"../DomainCard\";\n\nexport default function DomainCardExample() {\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n      <DomainCard\n        domain=\"example.com\"\n        lastScanDate=\"2 hours ago\"\n        status=\"PASS\"\n        criticalIssues={0}\n        onRescan={() => console.log(\"Rescan triggered\")}\n        onViewDetails={() => console.log(\"View details triggered\")}\n      />\n      <DomainCard\n        domain=\"marketing.co\"\n        lastScanDate=\"1 day ago\"\n        status=\"WARN\"\n        criticalIssues={2}\n        onRescan={() => console.log(\"Rescan triggered\")}\n        onViewDetails={() => console.log(\"View details triggered\")}\n      />\n      <DomainCard\n        domain=\"startup.io\"\n        lastScanDate=\"3 days ago\"\n        status=\"FAIL\"\n        criticalIssues={5}\n        onRescan={() => console.log(\"Rescan triggered\")}\n        onViewDetails={() => console.log(\"View details triggered\")}\n      />\n    </div>\n  );\n}\n","size_bytes":971},"client/src/components/examples/DNSRecordCard.tsx":{"content":"import DNSRecordCard from \"../DNSRecordCard\";\n\nexport default function DNSRecordCardExample() {\n  return (\n    <div className=\"grid gap-6 md:grid-cols-2\">\n      <DNSRecordCard\n        type=\"SPF\"\n        status=\"PASS\"\n        record=\"v=spf1 include:_spf.google.com ~all\"\n      />\n      <DNSRecordCard\n        type=\"DMARC\"\n        status=\"WARN\"\n        record=\"v=DMARC1; p=none; rua=mailto:dmarc@example.com\"\n        issues={[\"Policy set to 'none' - not enforcing\"]}\n        suggestions={[\"Change policy to 'quarantine' or 'reject'\"]}\n      />\n      <DNSRecordCard\n        type=\"DKIM\"\n        status=\"FAIL\"\n        issues={[\"No DKIM record found\"]}\n        suggestions={[\"Add DKIM selector 'default._domainkey.example.com'\"]}\n      />\n    </div>\n  );\n}\n","size_bytes":751},"client/src/components/TemplateLintTool.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { AlertTriangle, CheckCircle2, Lightbulb } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport ScoreBadge from \"./ScoreBadge\";\n\nexport default function TemplateLintTool() {\n  const [subject, setSubject] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [results, setResults] = useState<{\n    score: number;\n    warnings: string[];\n    suggestions: string[];\n  } | null>(null);\n\n  const lintMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/template-lint\", {\n        subject,\n        text: body,\n      });\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      setResults(data);\n    },\n  });\n\n  const handleLint = () => {\n    lintMutation.mutate();\n  };\n\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-12\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Email Template Linter</h1>\n        <p className=\"text-muted-foreground\">\n          Check your email templates for spam triggers and deliverability issues\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Subject Line</label>\n            <Input\n              placeholder=\"Enter email subject...\"\n              value={subject}\n              onChange={(e) => setSubject(e.target.value)}\n              data-testid=\"input-subject\"\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Email Body</label>\n            <Textarea\n              placeholder=\"Enter email body content...\"\n              value={body}\n              onChange={(e) => setBody(e.target.value)}\n              className=\"min-h-[300px]\"\n              data-testid=\"input-body\"\n            />\n          </div>\n          <Button\n            onClick={handleLint}\n            className=\"w-full\"\n            data-testid=\"button-lint\"\n            disabled={lintMutation.isPending || !subject}\n          >\n            {lintMutation.isPending ? \"Analyzing...\" : \"Analyze Template\"}\n          </Button>\n        </div>\n\n        <div>\n          {results ? (\n            <Card className=\"p-6\">\n              <div className=\"flex flex-col items-center mb-6\">\n                <ScoreBadge score={results.score} className=\"text-lg px-4 py-2\" />\n                <p className=\"text-sm text-muted-foreground mt-2\">Deliverability Score</p>\n              </div>\n\n              {results.warnings.length > 0 && (\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <AlertTriangle className=\"h-5 w-5 text-destructive\" />\n                    <h3 className=\"font-semibold\">Warnings</h3>\n                  </div>\n                  <ul className=\"space-y-2\">\n                    {results.warnings.map((warning, i) => (\n                      <li key={i} className=\"text-sm text-muted-foreground pl-7\">\n                        • {warning}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {results.suggestions.length > 0 && (\n                <div className=\"mb-6\">\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <Lightbulb className=\"h-5 w-5 text-primary\" />\n                    <h3 className=\"font-semibold\">Suggestions</h3>\n                  </div>\n                  <ul className=\"space-y-2\">\n                    {results.suggestions.map((suggestion, i) => (\n                      <li key={i} className=\"text-sm text-muted-foreground pl-7\">\n                        • {suggestion}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              {results.warnings.length === 0 && results.suggestions.length === 0 && (\n                <div className=\"text-center py-6\">\n                  <CheckCircle2 className=\"h-12 w-12 text-success mx-auto mb-3\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    No issues found! Your template looks good.\n                  </p>\n                </div>\n              )}\n            </Card>\n          ) : (\n            <Card className=\"p-12 flex items-center justify-center h-full\">\n              <div className=\"text-center text-muted-foreground\">\n                <p>Enter your template details and click Analyze</p>\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4876},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"server/routes/alerts.ts":{"content":"import type { Express } from \"express\";\nimport { storage } from \"../storage\";\nimport { requireAuth } from \"../auth-routes\";\n\nexport function registerAlertRoutes(app: Express) {\n  app.get(\"/api/alerts\", requireAuth, async (req, res) => {\n    try {\n      const user = req.user as any;\n      const alerts = await storage.getAlertsByUserId(user.id);\n      res.json(alerts);\n    } catch (error: any) {\n      console.error(\"Get alerts error:\", error);\n      res.status(500).json({ error: \"Failed to get alerts\", details: error.message });\n    }\n  });\n\n  app.get(\"/api/alerts/:domainId\", requireAuth, async (req, res) => {\n    try {\n      const { domainId } = req.params;\n      const user = req.user as any;\n\n      const domain = await storage.getDomain(domainId);\n      if (!domain || domain.userId !== user.id) {\n        return res.status(404).json({ error: \"Domain not found\" });\n      }\n\n      const alerts = await storage.getAlertsByDomainId(domainId);\n      res.json(alerts);\n    } catch (error: any) {\n      console.error(\"Get domain alerts error:\", error);\n      res.status(500).json({ error: \"Failed to get alerts\", details: error.message });\n    }\n  });\n}\n","size_bytes":1159},"server/services/auditLog.ts":{"content":"import { storage } from \"../storage\";\nimport type { InsertAuditLog } from \"@shared/schema\";\n\nexport const AuditEvents = {\n  DOMAIN_ADDED: \"DOMAIN_ADDED\",\n  DOMAIN_DELETED: \"DOMAIN_DELETED\",\n  DNS_SCAN_RUN: \"DNS_SCAN_RUN\",\n  DIFF_FOUND: \"DIFF_FOUND\",\n  ALERT_SENT: \"ALERT_SENT\",\n  PREFS_CHANGED: \"PREFS_CHANGED\",\n  DESTINATION_ADDED: \"DESTINATION_ADDED\",\n  DESTINATION_DELETED: \"DESTINATION_DELETED\",\n  TEAM_CREATED: \"TEAM_CREATED\",\n  TEAM_DELETED: \"TEAM_DELETED\",\n  TEAM_MEMBER_ADDED: \"TEAM_MEMBER_ADDED\",\n  TEAM_MEMBER_REMOVED: \"TEAM_MEMBER_REMOVED\",\n  TEAM_MEMBER_ROLE_CHANGED: \"TEAM_MEMBER_ROLE_CHANGED\",\n  PUBLIC_LINK_CREATED: \"PUBLIC_LINK_CREATED\",\n  PUBLIC_LINK_REVOKED: \"PUBLIC_LINK_REVOKED\",\n  PDF_EXPORTED: \"PDF_EXPORTED\",\n  MONITORING_ENABLED: \"MONITORING_ENABLED\",\n  MONITORING_DISABLED: \"MONITORING_DISABLED\",\n} as const;\n\nexport type AuditEvent = typeof AuditEvents[keyof typeof AuditEvents];\n\ninterface AuditLogOptions {\n  actorUserId: string;\n  event: AuditEvent;\n  domainId?: string;\n  meta?: Record<string, any>;\n}\n\nexport async function logAuditEvent(options: AuditLogOptions): Promise<void> {\n  const { actorUserId, event, domainId, meta } = options;\n\n  const auditLog: InsertAuditLog = {\n    actorUserId,\n    domainId: domainId ?? null,\n    event,\n    metaJson: meta ? meta : null,\n  };\n\n  await storage.createAuditLog(auditLog);\n}\n","size_bytes":1352},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"server/services/diffChecker.ts":{"content":"import type { DNSScanResult } from \"../lib/dns-scanner\";\n\ninterface RecordChange {\n  recordType: string;\n  oldValue: string;\n  newValue: string;\n}\n\nexport function detectChanges(oldScan: DNSScanResult, newScan: DNSScanResult): RecordChange[] {\n  const changes: RecordChange[] = [];\n\n  if (oldScan.spf?.record !== newScan.spf?.record) {\n    changes.push({\n      recordType: \"SPF\",\n      oldValue: oldScan.spf?.record || \"none\",\n      newValue: newScan.spf?.record || \"none\",\n    });\n  }\n\n  const oldDkim = JSON.stringify(oldScan.dkim?.selectors || []);\n  const newDkim = JSON.stringify(newScan.dkim?.selectors || []);\n  if (oldDkim !== newDkim) {\n    changes.push({\n      recordType: \"DKIM\",\n      oldValue: oldDkim,\n      newValue: newDkim,\n    });\n  }\n\n  if (oldScan.dmarc?.record !== newScan.dmarc?.record) {\n    changes.push({\n      recordType: \"DMARC\",\n      oldValue: oldScan.dmarc?.record || \"none\",\n      newValue: newScan.dmarc?.record || \"none\",\n    });\n  }\n\n  if (oldScan.bimi?.record !== newScan.bimi?.record) {\n    changes.push({\n      recordType: \"BIMI\",\n      oldValue: oldScan.bimi?.record || \"none\",\n      newValue: newScan.bimi?.record || \"none\",\n    });\n  }\n\n  if (oldScan.mx?.record !== newScan.mx?.record) {\n    changes.push({\n      recordType: \"MX\",\n      oldValue: oldScan.mx?.record || \"none\",\n      newValue: newScan.mx?.record || \"none\",\n    });\n  }\n\n  return changes;\n}\n","size_bytes":1396},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/LandingHero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Shield, Zap, BarChart3 } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function LandingHero() {\n  const [domain, setDomain] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const scanMutation = useMutation({\n    mutationFn: async (domain: string) => {\n      const res = await apiRequest(\"POST\", \"/api/scan\", { domain });\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      sessionStorage.setItem(\"scanResult\", JSON.stringify(data));\n      setLocation(\"/scan\");\n    },\n    onError: () => {\n      toast({\n        title: \"Scan failed\",\n        description: \"Failed to scan domain. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScan = () => {\n    if (domain) {\n      toast({\n        title: \"Scan Started\",\n        description: `Analyzing DNS records for ${domain}...`,\n      });\n      scanMutation.mutate(domain);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"max-w-7xl mx-auto px-6 py-16\">\n        <div className=\"text-center max-w-4xl mx-auto mb-16\">\n          <h1 className=\"text-5xl font-bold mb-6\" data-testid=\"text-hero-title\">\n            Pass Gmail & Yahoo Bulk Sender Rules\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8\">\n            Scan your domain's DNS records for SPF, DKIM, DMARC, and BIMI. Get instant deliverability reports and actionable fixes.\n          </p>\n\n          <div className=\"flex gap-3 max-w-2xl mx-auto mb-4\">\n            <Input\n              type=\"text\"\n              placeholder=\"Enter your domain (e.g., example.com)\"\n              value={domain}\n              onChange={(e) => setDomain(e.target.value)}\n              onKeyDown={(e) => e.key === \"Enter\" && handleScan()}\n              className=\"flex-1\"\n              data-testid=\"input-domain\"\n              disabled={scanMutation.isPending}\n            />\n            <Button\n              onClick={handleScan}\n              size=\"default\"\n              className=\"px-8\"\n              data-testid=\"button-scan\"\n              disabled={scanMutation.isPending || !domain}\n            >\n              <Search className=\"h-4 w-4 mr-2\" />\n              {scanMutation.isPending ? \"Scanning...\" : \"Scan Now\"}\n            </Button>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Free instant scan • No signup required • Get shareable reports\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 mb-16\">\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-primary/10 mb-4\">\n              <Shield className=\"h-6 w-6 text-primary\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">DNS Security Scan</h3>\n            <p className=\"text-muted-foreground\">\n              Comprehensive SPF, DKIM, DMARC, BIMI, and MX record analysis\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-success/10 mb-4\">\n              <Zap className=\"h-6 w-6 text-success\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Template Linting</h3>\n            <p className=\"text-muted-foreground\">\n              Detect spam triggers, verify links, and optimize deliverability\n            </p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"inline-flex items-center justify-center w-12 h-12 rounded-lg bg-warning/10 mb-4\">\n              <BarChart3 className=\"h-6 w-6 text-warning\" />\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Health Tracking</h3>\n            <p className=\"text-muted-foreground\">\n              Monitor delivery rates, bounces, and spam complaints over time\n            </p>\n          </div>\n        </div>\n\n        <div className=\"bg-card border border-card-border rounded-lg p-8\">\n          <h2 className=\"text-2xl font-bold mb-6 text-center\">How It Works</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                1\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-1\">Enter Your Domain</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Type your domain name to start the DNS scan\n                </p>\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                2\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-1\">Get Instant Results</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  View PASS/WARN/FAIL status for all DNS records\n                </p>\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <div className=\"flex-shrink-0 w-8 h-8 rounded-full bg-primary text-primary-foreground flex items-center justify-center font-bold\">\n                3\n              </div>\n              <div>\n                <h4 className=\"font-semibold mb-1\">Fix & Share</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Copy DNS records and share reports with your team\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6058},"client/src/components/StatusBadge.tsx":{"content":"import { CheckCircle2, AlertTriangle, XCircle } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype StatusType = \"PASS\" | \"WARN\" | \"FAIL\";\n\ninterface StatusBadgeProps {\n  status: StatusType;\n  className?: string;\n}\n\nexport default function StatusBadge({ status, className = \"\" }: StatusBadgeProps) {\n  const config = {\n    PASS: {\n      icon: CheckCircle2,\n      className: \"bg-success text-success-foreground\",\n      label: \"PASS\",\n    },\n    WARN: {\n      icon: AlertTriangle,\n      className: \"bg-warning text-warning-foreground\",\n      label: \"WARN\",\n    },\n    FAIL: {\n      icon: XCircle,\n      className: \"bg-destructive text-destructive-foreground\",\n      label: \"FAIL\",\n    },\n  };\n\n  const { icon: Icon, className: badgeClassName, label } = config[status];\n\n  return (\n    <Badge\n      className={`${badgeClassName} ${className} flex items-center gap-1 rounded-full px-3 py-1`}\n      data-testid={`badge-status-${status.toLowerCase()}`}\n    >\n      <Icon className=\"h-3 w-3\" />\n      <span className=\"text-xs font-medium\">{label}</span>\n    </Badge>\n  );\n}\n","size_bytes":1089},"client/src/pages/settings/index.tsx":{"content":"import { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Loader2, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport TeamsTab from \"./teams-tab\";\nimport DestinationsTab from \"./destinations-tab\";\nimport AlertPrefsTab from \"./alert-prefs-tab\";\nimport BillingTab from \"./billing-tab\";\n\nexport default function SettingsPage() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: planData } = useQuery<{ plan: string; features: Record<string, boolean> }>({\n    queryKey: [\"/api/billing/plan\"],\n    enabled: isAuthenticated,\n  });\n\n  if (authLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"text-center py-12\">\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Authentication Required</h2>\n          <p className=\"text-muted-foreground mb-6\">Please sign in to access settings</p>\n          <Button onClick={() => setLocation(\"/login\")}>Sign In</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const hasTeamsFeature = planData?.features?.teams === true;\n  const hasSlackFeature = planData?.features?.slack === true;\n  const hasWebhookFeature = planData?.features?.webhook === true;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-12\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-settings-title\">Settings</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account preferences and integrations\n        </p>\n      </div>\n\n      <Tabs defaultValue=\"alert-prefs\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n          <TabsTrigger value=\"alert-prefs\" data-testid=\"tab-alert-prefs\">\n            Alert Preferences\n          </TabsTrigger>\n          <TabsTrigger value=\"billing\" data-testid=\"tab-billing\">\n            Billing\n          </TabsTrigger>\n          {(hasSlackFeature || hasWebhookFeature) && (\n            <TabsTrigger value=\"destinations\" data-testid=\"tab-destinations\">\n              Destinations\n            </TabsTrigger>\n          )}\n          {hasTeamsFeature && (\n            <TabsTrigger value=\"teams\" data-testid=\"tab-teams\">\n              Teams\n            </TabsTrigger>\n          )}\n        </TabsList>\n\n        <TabsContent value=\"alert-prefs\">\n          <AlertPrefsTab />\n        </TabsContent>\n\n        <TabsContent value=\"billing\">\n          <BillingTab />\n        </TabsContent>\n\n        {(hasSlackFeature || hasWebhookFeature) && (\n          <TabsContent value=\"destinations\">\n            <DestinationsTab />\n          </TabsContent>\n        )}\n\n        {hasTeamsFeature && (\n          <TabsContent value=\"teams\">\n            <TeamsTab />\n          </TabsContent>\n        )}\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":3322},"client/src/pages/settings/teams-tab.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, Users, Crown, Shield, Eye, Trash2, UserPlus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Team {\n  id: string;\n  name: string;\n  ownerUserId: string;\n  brandLogo?: string | null;\n  brandColor?: string | null;\n  createdAt: string;\n  role?: string;\n}\n\ninterface TeamMember {\n  id: string;\n  teamId: string;\n  userId: string;\n  role: string;\n  email?: string;\n  createdAt: string;\n}\n\nexport default function TeamsTab() {\n  const { toast } = useToast();\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showInviteDialog, setShowInviteDialog] = useState(false);\n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\n  const [newTeamName, setNewTeamName] = useState(\"\");\n  const [brandLogo, setBrandLogo] = useState(\"\");\n  const [brandColor, setBrandColor] = useState(\"\");\n  const [inviteEmail, setInviteEmail] = useState(\"\");\n  const [inviteRole, setInviteRole] = useState<\"admin\" | \"viewer\">(\"viewer\");\n\n  const { data: teamsData, isLoading } = useQuery<{ owned: Team[]; member: Team[] }>({\n    queryKey: [\"/api/teams\"],\n  });\n\n  const { data: membersData } = useQuery<TeamMember[]>({\n    queryKey: [\"/api/teams\", selectedTeam?.id, \"members\"],\n    enabled: !!selectedTeam,\n    queryFn: () =>\n      fetch(`/api/teams/${selectedTeam?.id}/members`).then((r) => r.json()),\n  });\n\n  const createTeamMutation = useMutation({\n    mutationFn: async (data: { name: string; brandLogo?: string; brandColor?: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/teams\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      setShowCreateDialog(false);\n      setNewTeamName(\"\");\n      setBrandLogo(\"\");\n      setBrandColor(\"\");\n      toast({\n        title: \"Team Created\",\n        description: \"Your new team has been created successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Create Team\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const inviteMemberMutation = useMutation({\n    mutationFn: async (data: { teamId: string; email: string; role: string }) => {\n      const res = await apiRequest(\"POST\", `/api/teams/${data.teamId}/members`, {\n        email: data.email,\n        role: data.role,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\", selectedTeam?.id, \"members\"] });\n      setShowInviteDialog(false);\n      setInviteEmail(\"\");\n      setInviteRole(\"viewer\");\n      toast({\n        title: \"Member Invited\",\n        description: \"Team member has been added successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Invite Member\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (data: { teamId: string; userId: string }) => {\n      const res = await apiRequest(\"DELETE\", `/api/teams/${data.teamId}/members/${data.userId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\", selectedTeam?.id, \"members\"] });\n      toast({\n        title: \"Member Removed\",\n        description: \"Team member has been removed successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Remove Member\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTeamMutation = useMutation({\n    mutationFn: async (data: { teamId: string; brandLogo?: string; brandColor?: string }) => {\n      const res = await apiRequest(\"PATCH\", `/api/teams/${data.teamId}`, {\n        brandLogo: data.brandLogo,\n        brandColor: data.brandColor,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({\n        title: \"Team Updated\",\n        description: \"Team branding has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Team\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTeam = () => {\n    if (!newTeamName.trim()) {\n      toast({\n        title: \"Team Name Required\",\n        description: \"Please enter a team name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTeamMutation.mutate({\n      name: newTeamName.trim(),\n      brandLogo: brandLogo || undefined,\n      brandColor: brandColor || undefined,\n    });\n  };\n\n  const handleInviteMember = () => {\n    if (!selectedTeam || !inviteEmail.trim()) return;\n\n    inviteMemberMutation.mutate({\n      teamId: selectedTeam.id,\n      email: inviteEmail.trim(),\n      role: inviteRole,\n    });\n  };\n\n  const handleRemoveMember = (userId: string) => {\n    if (!selectedTeam) return;\n\n    removeMemberMutation.mutate({\n      teamId: selectedTeam.id,\n      userId,\n    });\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"owner\":\n        return <Crown className=\"h-4 w-4\" />;\n      case \"admin\":\n        return <Shield className=\"h-4 w-4\" />;\n      case \"viewer\":\n        return <Eye className=\"h-4 w-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getRoleBadgeVariant = (role: string): \"default\" | \"secondary\" | \"outline\" => {\n    switch (role) {\n      case \"owner\":\n        return \"default\";\n      case \"admin\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-muted-foreground\">Loading teams...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>My Teams</CardTitle>\n              <CardDescription>Manage your teams and collaboration</CardDescription>\n            </div>\n            <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-team\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Create Team\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Team</DialogTitle>\n                  <DialogDescription>\n                    Create a team to collaborate with others on domain monitoring\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4 py-4\">\n                  <div>\n                    <Label htmlFor=\"team-name\">Team Name</Label>\n                    <Input\n                      id=\"team-name\"\n                      value={newTeamName}\n                      onChange={(e) => setNewTeamName(e.target.value)}\n                      placeholder=\"Acme Corp Team\"\n                      data-testid=\"input-team-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"brand-logo\">Brand Logo URL (optional)</Label>\n                    <Input\n                      id=\"brand-logo\"\n                      value={brandLogo}\n                      onChange={(e) => setBrandLogo(e.target.value)}\n                      placeholder=\"https://example.com/logo.png\"\n                      data-testid=\"input-brand-logo\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"brand-color\">Brand Color (optional)</Label>\n                    <Input\n                      id=\"brand-color\"\n                      value={brandColor}\n                      onChange={(e) => setBrandColor(e.target.value)}\n                      placeholder=\"#0066FF\"\n                      data-testid=\"input-brand-color\"\n                    />\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowCreateDialog(false)}\n                    data-testid=\"button-cancel-create\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleCreateTeam}\n                    disabled={createTeamMutation.isPending}\n                    data-testid=\"button-confirm-create\"\n                  >\n                    {createTeamMutation.isPending ? \"Creating...\" : \"Create Team\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {teamsData?.owned && teamsData.owned.length > 0 ? (\n              <>\n                <h3 className=\"text-sm font-medium\">Teams You Own</h3>\n                <div className=\"grid gap-4\">\n                  {teamsData.owned.map((team) => (\n                    <Card key={team.id} className=\"p-4\" data-testid={`card-team-${team.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"h-5 w-5 text-muted-foreground\" />\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-team-name-${team.id}`}>\n                              {team.name}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Created {new Date(team.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"default\">\n                            <Crown className=\"h-3 w-3 mr-1\" />\n                            Owner\n                          </Badge>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedTeam(team)}\n                            data-testid={`button-manage-team-${team.id}`}\n                          >\n                            Manage\n                          </Button>\n                        </div>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </>\n            ) : null}\n\n            {teamsData?.member && teamsData.member.length > 0 ? (\n              <>\n                <h3 className=\"text-sm font-medium mt-6\">Teams You're In</h3>\n                <div className=\"grid gap-4\">\n                  {teamsData.member.map((team) => (\n                    <Card key={team.id} className=\"p-4\" data-testid={`card-member-team-${team.id}`}>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <Users className=\"h-5 w-5 text-muted-foreground\" />\n                          <div>\n                            <p className=\"font-medium\">{team.name}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Joined {new Date(team.createdAt).toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge variant={getRoleBadgeVariant(team.role || \"viewer\")}>\n                          {getRoleIcon(team.role || \"viewer\")}\n                          <span className=\"ml-1 capitalize\">{team.role}</span>\n                        </Badge>\n                      </div>\n                    </Card>\n                  ))}\n                </div>\n              </>\n            ) : null}\n\n            {(!teamsData?.owned || teamsData.owned.length === 0) &&\n              (!teamsData?.member || teamsData.member.length === 0) && (\n                <div className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">No teams yet</p>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Create a team to collaborate with others\n                  </p>\n                </div>\n              )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {selectedTeam && (\n        <Dialog open={!!selectedTeam} onOpenChange={() => setSelectedTeam(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Manage {selectedTeam.name}</DialogTitle>\n              <DialogDescription>Manage team members and branding</DialogDescription>\n            </DialogHeader>\n\n            <div className=\"space-y-6 py-4\">\n              <div>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-sm font-medium\">Team Members</h3>\n                  <Dialog open={showInviteDialog} onOpenChange={setShowInviteDialog}>\n                    <DialogTrigger asChild>\n                      <Button size=\"sm\" data-testid=\"button-invite-member\">\n                        <UserPlus className=\"h-4 w-4 mr-2\" />\n                        Invite Member\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Invite Team Member</DialogTitle>\n                        <DialogDescription>Add a new member to your team</DialogDescription>\n                      </DialogHeader>\n                      <div className=\"space-y-4 py-4\">\n                        <div>\n                          <Label htmlFor=\"invite-email\">Email Address</Label>\n                          <Input\n                            id=\"invite-email\"\n                            type=\"email\"\n                            value={inviteEmail}\n                            onChange={(e) => setInviteEmail(e.target.value)}\n                            placeholder=\"user@example.com\"\n                            data-testid=\"input-invite-email\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"invite-role\">Role</Label>\n                          <Select\n                            value={inviteRole}\n                            onValueChange={(value) => setInviteRole(value as \"admin\" | \"viewer\")}\n                          >\n                            <SelectTrigger data-testid=\"select-invite-role\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"admin\">Admin - Can manage team and members</SelectItem>\n                              <SelectItem value=\"viewer\">Viewer - Read-only access</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                      <div className=\"flex justify-end gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setShowInviteDialog(false)}\n                          data-testid=\"button-cancel-invite\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          onClick={handleInviteMember}\n                          disabled={inviteMemberMutation.isPending}\n                          data-testid=\"button-confirm-invite\"\n                        >\n                          {inviteMemberMutation.isPending ? \"Inviting...\" : \"Invite\"}\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {membersData?.map((member) => (\n                    <div\n                      key={member.id}\n                      className=\"flex items-center justify-between p-3 rounded-md bg-muted\"\n                      data-testid={`row-member-${member.id}`}\n                    >\n                      <div>\n                        <p className=\"text-sm font-medium\">{member.email}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Joined {new Date(member.createdAt).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={getRoleBadgeVariant(member.role)}>\n                          {getRoleIcon(member.role)}\n                          <span className=\"ml-1 capitalize\">{member.role}</span>\n                        </Badge>\n                        {member.role !== \"owner\" && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleRemoveMember(member.userId)}\n                            disabled={removeMemberMutation.isPending}\n                            data-testid={`button-remove-member-${member.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h3 className=\"text-sm font-medium mb-4\">Team Branding</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"edit-brand-logo\">Brand Logo URL</Label>\n                    <Input\n                      id=\"edit-brand-logo\"\n                      value={selectedTeam.brandLogo || \"\"}\n                      onChange={(e) =>\n                        setSelectedTeam({ ...selectedTeam, brandLogo: e.target.value })\n                      }\n                      placeholder=\"https://example.com/logo.png\"\n                      data-testid=\"input-edit-brand-logo\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-brand-color\">Brand Color</Label>\n                    <Input\n                      id=\"edit-brand-color\"\n                      value={selectedTeam.brandColor || \"\"}\n                      onChange={(e) =>\n                        setSelectedTeam({ ...selectedTeam, brandColor: e.target.value })\n                      }\n                      placeholder=\"#0066FF\"\n                      data-testid=\"input-edit-brand-color\"\n                    />\n                  </div>\n                  <Button\n                    onClick={() =>\n                      updateTeamMutation.mutate({\n                        teamId: selectedTeam.id,\n                        brandLogo: selectedTeam.brandLogo || undefined,\n                        brandColor: selectedTeam.brandColor || undefined,\n                      })\n                    }\n                    disabled={updateTeamMutation.isPending}\n                    data-testid=\"button-update-branding\"\n                  >\n                    {updateTeamMutation.isPending ? \"Updating...\" : \"Update Branding\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n    </div>\n  );\n}\n","size_bytes":20633},"client/src/pages/settings/alert-prefs-tab.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Bell } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AlertPref {\n  userId: string;\n  emailEnabled: boolean;\n  slackEnabled: boolean;\n  webhookEnabled: boolean;\n  threshold: \"info\" | \"warn\" | \"fail\";\n}\n\nexport default function AlertPrefsTab() {\n  const { toast } = useToast();\n\n  const { data: alertPrefs, isLoading } = useQuery<AlertPref>({\n    queryKey: [\"/api/alert-prefs\"],\n  });\n\n  const updatePrefsMutation = useMutation({\n    mutationFn: async (data: Partial<AlertPref>) => {\n      const res = await apiRequest(\"POST\", \"/api/alert-prefs\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alert-prefs\"] });\n      toast({\n        title: \"Preferences Updated\",\n        description: \"Your alert preferences have been saved.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Preferences\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggle = (field: keyof AlertPref, value: boolean) => {\n    updatePrefsMutation.mutate({ [field]: value });\n  };\n\n  const handleThresholdChange = (value: string) => {\n    updatePrefsMutation.mutate({ threshold: value as \"info\" | \"warn\" | \"fail\" });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-muted-foreground\">Loading preferences...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const prefs = alertPrefs || {\n    emailEnabled: false,\n    slackEnabled: false,\n    webhookEnabled: false,\n    threshold: \"warn\" as const,\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Global Alert Preferences</CardTitle>\n        <CardDescription>\n          Configure how you want to receive notifications about domain issues\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        <div>\n          <h3 className=\"text-sm font-medium mb-4\">Notification Channels</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"email-enabled\">Email Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive alerts via email\n                </p>\n              </div>\n              <Switch\n                id=\"email-enabled\"\n                checked={prefs.emailEnabled}\n                onCheckedChange={(checked) => handleToggle(\"emailEnabled\", checked)}\n                disabled={updatePrefsMutation.isPending}\n                data-testid=\"switch-email-enabled\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"slack-enabled\">Slack Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Send alerts to configured Slack channels\n                </p>\n              </div>\n              <Switch\n                id=\"slack-enabled\"\n                checked={prefs.slackEnabled}\n                onCheckedChange={(checked) => handleToggle(\"slackEnabled\", checked)}\n                disabled={updatePrefsMutation.isPending}\n                data-testid=\"switch-slack-enabled\"\n              />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"webhook-enabled\">Webhook Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Send alerts to configured webhook endpoints\n                </p>\n              </div>\n              <Switch\n                id=\"webhook-enabled\"\n                checked={prefs.webhookEnabled}\n                onCheckedChange={(checked) => handleToggle(\"webhookEnabled\", checked)}\n                disabled={updatePrefsMutation.isPending}\n                data-testid=\"switch-webhook-enabled\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-sm font-medium mb-4\">Alert Threshold</h3>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"threshold\">Minimum Severity Level</Label>\n            <Select\n              value={prefs.threshold}\n              onValueChange={handleThresholdChange}\n              disabled={updatePrefsMutation.isPending}\n            >\n              <SelectTrigger id=\"threshold\" data-testid=\"select-threshold\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"info\">Info - All notifications</SelectItem>\n                <SelectItem value=\"warn\">Warning - Only warnings and failures</SelectItem>\n                <SelectItem value=\"fail\">Failure - Only critical failures</SelectItem>\n              </SelectContent>\n            </Select>\n            <p className=\"text-sm text-muted-foreground\">\n              You'll only receive alerts that meet or exceed this severity level\n            </p>\n          </div>\n        </div>\n\n        <div className=\"pt-4 border-t\">\n          <div className=\"flex items-start gap-3 p-4 bg-muted rounded-lg\">\n            <Bell className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium\">Per-Domain Overrides</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                You can override these global settings for individual domains from the domain\n                detail page. Domain-specific settings will take precedence over these global\n                preferences.\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6389},"client/src/pages/settings/destinations-tab.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Plus, Webhook, Trash2 } from \"lucide-react\";\nimport { SiSlack } from \"react-icons/si\";\nimport { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\ninterface Destination {\n  id: string;\n  userId: string;\n  type: \"slack\" | \"webhook\";\n  url: string;\n  enabled: boolean;\n  createdAt: string;\n}\n\nexport default function DestinationsTab() {\n  const { toast } = useToast();\n  const [showAddDialog, setShowAddDialog] = useState(false);\n  const [destType, setDestType] = useState<\"slack\" | \"webhook\">(\"slack\");\n  const [destUrl, setDestUrl] = useState(\"\");\n\n  const { data: destinations, isLoading } = useQuery<Destination[]>({\n    queryKey: [\"/api/destinations\"],\n  });\n\n  const addDestinationMutation = useMutation({\n    mutationFn: async (data: { type: string; url: string; enabled: boolean }) => {\n      const res = await apiRequest(\"POST\", \"/api/destinations\", data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      setShowAddDialog(false);\n      setDestUrl(\"\");\n      toast({\n        title: \"Destination Added\",\n        description: \"Your notification destination has been added successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Add Destination\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleDestinationMutation = useMutation({\n    mutationFn: async (data: { id: string; enabled: boolean }) => {\n      const res = await apiRequest(\"PATCH\", `/api/destinations/${data.id}`, {\n        enabled: data.enabled,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      toast({\n        title: \"Destination Updated\",\n        description: \"Notification destination has been updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Update Destination\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDestinationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/destinations/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/destinations\"] });\n      toast({\n        title: \"Destination Deleted\",\n        description: \"Notification destination has been removed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Delete Destination\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddDestination = () => {\n    if (!destUrl.trim()) {\n      toast({\n        title: \"URL Required\",\n        description: \"Please enter a webhook URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    addDestinationMutation.mutate({\n      type: destType,\n      url: destUrl.trim(),\n      enabled: true,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-muted-foreground\">Loading destinations...</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Notification Destinations</CardTitle>\n            <CardDescription>\n              Configure where alerts are sent when issues are detected\n            </CardDescription>\n          </div>\n          <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-destination\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Destination\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add Notification Destination</DialogTitle>\n                <DialogDescription>\n                  Add a Slack or webhook destination for alert notifications\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"space-y-4 py-4\">\n                <div>\n                  <Label htmlFor=\"dest-type\">Destination Type</Label>\n                  <Select value={destType} onValueChange={(v) => setDestType(v as \"slack\" | \"webhook\")}>\n                    <SelectTrigger data-testid=\"select-dest-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"slack\">Slack Webhook</SelectItem>\n                      <SelectItem value=\"webhook\">Generic Webhook</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <Label htmlFor=\"dest-url\">Webhook URL</Label>\n                  <Input\n                    id=\"dest-url\"\n                    value={destUrl}\n                    onChange={(e) => setDestUrl(e.target.value)}\n                    placeholder=\"https://hooks.slack.com/services/...\"\n                    data-testid=\"input-dest-url\"\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {destType === \"slack\"\n                      ? \"Get your Slack webhook URL from your workspace settings\"\n                      : \"Enter the URL where notifications should be sent\"}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowAddDialog(false)}\n                  data-testid=\"button-cancel-add-dest\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleAddDestination}\n                  disabled={addDestinationMutation.isPending}\n                  data-testid=\"button-confirm-add-dest\"\n                >\n                  {addDestinationMutation.isPending ? \"Adding...\" : \"Add Destination\"}\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {destinations && destinations.length > 0 ? (\n            destinations.map((dest) => (\n              <Card key={dest.id} className=\"p-4\" data-testid={`card-dest-${dest.id}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    {dest.type === \"slack\" ? (\n                      <SiSlack className=\"h-5 w-5 text-[#4A154B]\" />\n                    ) : (\n                      <Webhook className=\"h-5 w-5 text-muted-foreground\" />\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2\">\n                        <p className=\"text-sm font-medium capitalize\">{dest.type}</p>\n                        <Badge variant={dest.enabled ? \"default\" : \"secondary\"}>\n                          {dest.enabled ? \"Enabled\" : \"Disabled\"}\n                        </Badge>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground truncate max-w-md\">\n                        {dest.url}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() =>\n                        toggleDestinationMutation.mutate({\n                          id: dest.id,\n                          enabled: !dest.enabled,\n                        })\n                      }\n                      disabled={toggleDestinationMutation.isPending}\n                      data-testid={`button-toggle-dest-${dest.id}`}\n                    >\n                      {dest.enabled ? \"Disable\" : \"Enable\"}\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteDestinationMutation.mutate(dest.id)}\n                      disabled={deleteDestinationMutation.isPending}\n                      data-testid={`button-delete-dest-${dest.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </Card>\n            ))\n          ) : (\n            <div className=\"text-center py-8\">\n              <Webhook className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No destinations configured</p>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                Add a destination to receive alert notifications\n              </p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9889},"client/src/pages/admin/index.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Loader2,\n  AlertCircle,\n  Users,\n  Globe,\n  Activity,\n  Bell,\n  MailWarning,\n  TrendingUp,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\n\ninterface AdminMetrics {\n  users: {\n    byPlan: Record<string, number>;\n    total: number;\n  };\n  domains: {\n    total: number;\n    monitored: number;\n  };\n  scans: {\n    last24h: number;\n    last7d: number;\n  };\n  alerts: {\n    last24h: number;\n  };\n  email: {\n    failuresLast24h: number;\n  };\n}\n\ninterface EventMetrics {\n  total: number;\n  byType: Record<string, number>;\n  timeline: Array<{\n    date: string;\n    [key: string]: any;\n  }>;\n}\n\nexport default function AdminDashboard() {\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: planData, isLoading: planLoading } = useQuery<{ plan: string }>({\n    queryKey: [\"/api/billing/plan\"],\n    enabled: isAuthenticated,\n  });\n\n  // For launch: use Agency plan as admin access proxy\n  // TODO: In production, add isAdmin field to user schema\n  const isAdmin = planData?.plan === \"Agency\";\n\n  const { data: metrics, isLoading: metricsLoading, error } = useQuery<AdminMetrics>({\n    queryKey: [\"/api/admin/metrics\"],\n    enabled: isAuthenticated && isAdmin,\n    retry: 1,\n  });\n\n  const { data: events, isLoading: eventsLoading } = useQuery<EventMetrics>({\n    queryKey: [\"/api/admin/metrics/events\"],\n    enabled: isAuthenticated && isAdmin,\n    retry: 1,\n  });\n\n  // Reset metrics query when admin status changes to clear stale errors\n  useEffect(() => {\n    if (isAdmin) {\n      queryClient.resetQueries({ queryKey: [\"/api/admin/metrics\"] });\n      queryClient.resetQueries({ queryKey: [\"/api/admin/metrics/events\"] });\n    }\n  }, [isAdmin]);\n\n  if (authLoading || planLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12 flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"text-center py-12\">\n          <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Authentication Required</h2>\n          <p className=\"text-muted-foreground mb-6\">Please sign in to access the admin dashboard</p>\n          <Button onClick={() => setLocation(\"/login\")}>Sign In</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (isAuthenticated && planData && !isAdmin) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"text-center py-12\">\n          <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Access Denied</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            You don't have permission to access the admin dashboard\n          </p>\n          <Button onClick={() => setLocation(\"/dashboard\")}>Go to Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (metricsLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Platform-wide metrics and statistics</p>\n        </div>\n        <div className=\"flex items-center justify-center py-12\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !metrics) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-6 py-12\">\n        <div className=\"text-center py-12\">\n          <AlertCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold mb-2\">Failed to Load Metrics</h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Unable to fetch admin metrics. Please try again later.\n          </p>\n          <Button onClick={() => setLocation(\"/dashboard\")}>Go to Dashboard</Button>\n        </div>\n      </div>\n    );\n  }\n\n  const activePlanRatio =\n    metrics.domains.total > 0\n      ? Math.round((metrics.domains.monitored / metrics.domains.total) * 100)\n      : 0;\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-6 py-12\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"text-admin-title\">\n          Admin Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\">Platform-wide metrics and statistics</p>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8\">\n        <Card data-testid=\"card-total-users\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Users</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.users.total}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Registered accounts</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-total-domains\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Domains</CardTitle>\n            <Globe className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.domains.total}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {metrics.domains.monitored} actively monitored ({activePlanRatio}%)\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-scans-24h\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Scans (24h)</CardTitle>\n            <Activity className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.scans.last24h}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {metrics.scans.last7d} in last 7 days\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-alerts-24h\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Alerts (24h)</CardTitle>\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.alerts.last24h}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Notifications sent</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-email-failures\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Email Failures</CardTitle>\n            <MailWarning className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{metrics.email.failuresLast24h}</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Failed deliveries (24h)</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"card-monitoring-rate\">\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monitoring Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activePlanRatio}%</div>\n            <p className=\"text-xs text-muted-foreground mt-1\">Domains with monitoring enabled</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid gap-6 md:grid-cols-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Users by Plan</CardTitle>\n            <CardDescription>Distribution of users across subscription tiers</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Object.entries(metrics.users.byPlan)\n                .sort((a, b) => b[1] - a[1])\n                .map(([plan, count]) => (\n                  <div\n                    key={plan}\n                    className=\"flex items-center justify-between\"\n                    data-testid={`row-plan-${plan.toLowerCase()}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <Badge\n                        variant={\n                          plan === \"Agency\" ? \"default\" : plan === \"Pro\" ? \"secondary\" : \"outline\"\n                        }\n                      >\n                        {plan}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <span className=\"text-sm text-muted-foreground\">\n                        {Math.round((count / metrics.users.total) * 100)}%\n                      </span>\n                      <span className=\"text-lg font-semibold\">{count}</span>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Activity Summary</CardTitle>\n            <CardDescription>Recent platform activity highlights</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Average scans per day</span>\n                <span className=\"text-lg font-semibold\">\n                  {Math.round(metrics.scans.last7d / 7)}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Alerts per scan (24h)</span>\n                <span className=\"text-lg font-semibold\">\n                  {metrics.scans.last24h > 0\n                    ? (metrics.alerts.last24h / metrics.scans.last24h).toFixed(2)\n                    : \"0\"}\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Email delivery rate</span>\n                <span className=\"text-lg font-semibold\">\n                  {metrics.alerts.last24h > 0\n                    ? (\n                        ((metrics.alerts.last24h - metrics.email.failuresLast24h) /\n                          metrics.alerts.last24h) *\n                        100\n                      ).toFixed(1)\n                    : \"100\"}\n                  %\n                </span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-muted-foreground\">Domains per user</span>\n                <span className=\"text-lg font-semibold\">\n                  {metrics.users.total > 0\n                    ? (metrics.domains.total / metrics.users.total).toFixed(1)\n                    : \"0\"}\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Events Analytics Section */}\n      <div className=\"mt-8\">\n        <h2 className=\"text-2xl font-bold mb-4\">Product Analytics</h2>\n        \n        {eventsLoading && (\n          <div className=\"flex items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        )}\n\n        {!eventsLoading && !events && (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center py-8\">\n                <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">Failed to load events data</p>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {!eventsLoading && events && (\n          <div className=\"space-y-6\">\n            <div className=\"grid gap-6 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Event Activity (Last 30 Days)</CardTitle>\n                  <CardDescription>Total tracked events: {events.total}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {Object.entries(events.byType)\n                      .sort((a, b) => b[1] - a[1])\n                      .map(([eventType, count]) => (\n                        <div\n                          key={eventType}\n                          className=\"flex items-center justify-between\"\n                          data-testid={`row-event-${eventType.toLowerCase()}`}\n                        >\n                          <span className=\"text-sm font-medium\">{eventType.replace(/_/g, ' ')}</span>\n                          <Badge variant=\"secondary\">{count}</Badge>\n                        </div>\n                      ))}\n                    {Object.keys(events.byType).length === 0 && (\n                      <p className=\"text-sm text-muted-foreground text-center py-4\">\n                        No events tracked yet\n                      </p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Event Distribution</CardTitle>\n                  <CardDescription>Breakdown by event type</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {events.total === 0 ? (\n                      <p className=\"text-sm text-muted-foreground text-center py-4\">\n                        No events to display\n                      </p>\n                    ) : (\n                      Object.entries(events.byType)\n                        .sort((a, b) => b[1] - a[1])\n                        .map(([eventType, count]) => {\n                          const percentage = events.total > 0 \n                            ? Math.round((count / events.total) * 100) \n                            : 0;\n                          return (\n                            <div key={eventType} className=\"space-y-1\">\n                              <div className=\"flex items-center justify-between text-sm\">\n                                <span className=\"text-muted-foreground\">{eventType.replace(/_/g, ' ')}</span>\n                                <span className=\"font-medium\">{percentage}%</span>\n                              </div>\n                              <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                                <div\n                                  className=\"h-full bg-primary transition-all\"\n                                  style={{ width: `${percentage}%` }}\n                                />\n                              </div>\n                            </div>\n                          );\n                        })\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Timeline Chart */}\n            {events.timeline.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>Events Timeline</CardTitle>\n                  <CardDescription>Daily event activity over the last 30 days</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={events.timeline}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        className=\"text-xs\"\n                        tickFormatter={(value) => new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                      />\n                      <YAxis className=\"text-xs\" />\n                      <Tooltip \n                        labelFormatter={(label) => new Date(label).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' })}\n                      />\n                      <Legend />\n                      {Object.keys(events.byType).map((eventType, index) => {\n                        const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];\n                        return (\n                          <Line\n                            key={eventType}\n                            type=\"monotone\"\n                            dataKey={eventType}\n                            name={eventType.replace(/_/g, ' ')}\n                            stroke={colors[index % colors.length]}\n                            strokeWidth={2}\n                            dot={{ r: 3 }}\n                            activeDot={{ r: 5 }}\n                          />\n                        );\n                      })}\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":18031},"client/src/pages/forbidden.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ShieldAlert } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Forbidden() {\n  return (\n    <div className=\"flex items-center justify-center min-h-[70vh] px-6\">\n      <Card className=\"max-w-md w-full\">\n        <CardContent className=\"flex flex-col items-center text-center p-8\">\n          <ShieldAlert className=\"h-16 w-16 text-destructive mb-4\" />\n          <h1 className=\"text-3xl font-bold mb-2\">403 - Access Denied</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You don't have permission to access this resource. Please contact the owner or sign in with an authorized account.\n          </p>\n          <Link href=\"/dashboard\">\n            <Button data-testid=\"button-back-dashboard\">\n              Back to Dashboard\n            </Button>\n          </Link>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":982},"client/src/components/ScoreBadge.tsx":{"content":"interface ScoreBadgeProps {\n  score: number;\n  className?: string;\n  showLabel?: boolean;\n}\n\nexport default function ScoreBadge({ score, className = \"\", showLabel = true }: ScoreBadgeProps) {\n  const getGradientColor = (score: number) => {\n    // Normalize score to 0-1\n    const normalized = Math.max(0, Math.min(100, score)) / 100;\n    \n    // Calculate hue from red (0) to yellow (60) to green (120)\n    const hue = normalized * 120;\n    \n    // Calculate saturation and lightness for better visibility\n    const saturation = 70;\n    const lightness = 45;\n    \n    return `hsl(${hue}, ${saturation}%, ${lightness}%)`;\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent\";\n    if (score >= 60) return \"Good\";\n    if (score >= 40) return \"Fair\";\n    return \"Poor\";\n  };\n\n  const backgroundColor = getGradientColor(score);\n\n  return (\n    <div\n      className={`inline-flex items-center gap-2 px-3 py-1.5 rounded-full transition-all duration-300 ${className}`}\n      style={{ backgroundColor }}\n      data-testid=\"badge-score\"\n    >\n      <span className=\"text-white font-bold text-sm\" data-testid=\"text-score-value\">\n        {score}\n      </span>\n      {showLabel && (\n        <span className=\"text-white text-xs opacity-90\" data-testid=\"text-score-label\">\n          {getScoreLabel(score)}\n        </span>\n      )}\n    </div>\n  );\n}\n","size_bytes":1372},"server/jobs/weeklyDigest.ts":{"content":"import cron from \"node-cron\";\nimport { storage } from \"../storage\";\nimport { sendWeeklyDigest, DigestData } from \"../services/weeklyDigest\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport async function runWeeklyDigest() {\n  console.log(\"[weekly-digest] Starting weekly digest generation...\");\n\n  try {\n    // Get all monitored domains (these belong to Pro/Agency users)\n    const monitoredDomains = await storage.getMonitoredDomains();\n    \n    // Get unique user IDs\n    const userIds = Array.from(new Set(monitoredDomains.map(d => d.userId).filter((id): id is string => !!id)));\n    console.log(`[weekly-digest] Found ${userIds.length} users with monitored domains`);\n\n    for (const userId of userIds) {\n      const user = await storage.getUser(userId);\n      if (!user) continue;\n      try {\n        // Check user alert preferences\n        const alertPref = await storage.getAlertPref(user.id);\n        if (alertPref && alertPref.emailEnabled === \"false\") {\n          console.log(`[weekly-digest] ℹ Skipping ${user.email} (email disabled)`);\n          continue;\n        }\n\n        // Get user's domains\n        const userDomains = await storage.getDomainsByUserId(user.id);\n        if (userDomains.length === 0) {\n          console.log(`[weekly-digest] ℹ Skipping ${user.email} (no domains)`);\n          continue;\n        }\n\n        // Calculate 7 days ago\n        const sevenDaysAgo = new Date();\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n        // Get weekly stats\n        const weeklyScans = await storage.getScansSince(user.id, sevenDaysAgo);\n        const weeklyAlerts = await storage.getAlertsSince(user.id, sevenDaysAgo);\n\n        // Build domain data\n        const domainData = await Promise.all(\n          userDomains.map(async (domain) => {\n            const latestScan = await storage.getLatestScanRunByDomainId(domain.id);\n            const domainAlerts = weeklyAlerts.filter(a => a.domainId === domain.id);\n\n            let score = 0;\n            let status: \"pass\" | \"warn\" | \"fail\" = \"pass\";\n\n            if (latestScan) {\n              score = latestScan.score || 0;\n              if (score >= 80) status = \"pass\";\n              else if (score >= 60) status = \"warn\";\n              else status = \"fail\";\n            }\n\n            return {\n              name: domain.name,\n              score,\n              lastScanned: latestScan \n                ? formatDistanceToNow(new Date(latestScan.createdAt), { addSuffix: true })\n                : \"Never\",\n              alertCount: domainAlerts.length,\n              status,\n            };\n          })\n        );\n\n        // Calculate average score\n        const scoresWithData = domainData.filter(d => d.score > 0).map(d => d.score);\n        const avgScore = scoresWithData.length > 0\n          ? Math.round(scoresWithData.reduce((a, b) => a + b, 0) / scoresWithData.length)\n          : 0;\n\n        const digestData: DigestData = {\n          userName: user.email.split('@')[0],\n          userEmail: user.email,\n          domains: domainData,\n          weeklyStats: {\n            totalScans: weeklyScans.length,\n            totalAlerts: weeklyAlerts.length,\n            avgScore,\n          },\n        };\n\n        // Send digest email\n        await sendWeeklyDigest(storage, user.id, digestData);\n        console.log(`[weekly-digest] ✓ Sent digest to ${user.email}`);\n\n      } catch (error) {\n        console.error(`[weekly-digest] ✗ Error processing ${user.email}:`, error);\n      }\n    }\n\n    console.log(\"[weekly-digest] ✓ Weekly digest generation completed\");\n  } catch (error) {\n    console.error(\"[weekly-digest] ✗ Fatal error:\", error);\n  }\n}\n\n// Schedule weekly digest for every Monday at 9 AM UTC\nexport function scheduleWeeklyDigest() {\n  console.log(\"[weekly-digest] Scheduling weekly digest for Mondays at 9:00 UTC\");\n  console.log(\"[weekly-digest] Cron expression: 0 9 * * 1\");\n\n  cron.schedule(\"0 9 * * 1\", async () => {\n    console.log(\"[weekly-digest] Cron triggered - running weekly digest\");\n    await runWeeklyDigest();\n  });\n\n  console.log(\"[weekly-digest] ✓ Weekly digest scheduler started\");\n}\n","size_bytes":4123},"server/services/weeklyDigest.ts":{"content":"import { IStorage } from \"../storage\";\nimport nodemailer from \"nodemailer\";\nimport { chromium } from \"playwright\";\nimport { tmpdir } from \"os\";\nimport { join } from \"path\";\nimport { writeFile, unlink } from \"fs/promises\";\n\nexport interface DigestData {\n  userName: string;\n  userEmail: string;\n  domains: {\n    name: string;\n    score: number;\n    lastScanned: string;\n    alertCount: number;\n    status: \"pass\" | \"warn\" | \"fail\";\n  }[];\n  weeklyStats: {\n    totalScans: number;\n    totalAlerts: number;\n    avgScore: number;\n  };\n}\n\nexport function generateDigestHTML(data: DigestData): string {\n  const statusColors = {\n    pass: \"#10b981\",\n    warn: \"#f59e0b\",\n    fail: \"#ef4444\",\n  };\n\n  const domainRows = data.domains.map(d => `\n    <tr style=\"border-bottom: 1px solid #e5e7eb;\">\n      <td style=\"padding: 12px 8px;\">\n        <strong style=\"color: #111827;\">${d.name}</strong>\n      </td>\n      <td style=\"padding: 12px 8px; text-align: center;\">\n        <span style=\"\n          display: inline-block;\n          padding: 4px 12px;\n          border-radius: 12px;\n          font-weight: 600;\n          font-size: 14px;\n          background: ${statusColors[d.status]}15;\n          color: ${statusColors[d.status]};\n        \">${d.score}/100</span>\n      </td>\n      <td style=\"padding: 12px 8px; text-align: center; color: #6b7280;\">\n        ${d.alertCount}\n      </td>\n      <td style=\"padding: 12px 8px; color: #9ca3af; font-size: 14px;\">\n        ${d.lastScanned}\n      </td>\n    </tr>\n  `).join('');\n\n  return `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Weekly Deliverability Digest</title>\n</head>\n<body style=\"margin: 0; padding: 0; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; background-color: #f3f4f6;\">\n  <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"background-color: #f3f4f6; padding: 40px 20px;\">\n    <tr>\n      <td align=\"center\">\n        <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; background-color: #ffffff; border-radius: 8px; overflow: hidden; box-shadow: 0 1px 3px rgba(0,0,0,0.1);\">\n          \n          <!-- Header -->\n          <tr>\n            <td style=\"background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%); padding: 32px 24px; text-align: center;\">\n              <h1 style=\"margin: 0; color: #ffffff; font-size: 24px; font-weight: 700;\">\n                📊 Weekly Deliverability Digest\n              </h1>\n              <p style=\"margin: 8px 0 0 0; color: #dbeafe; font-size: 14px;\">\n                Your email health summary\n              </p>\n            </td>\n          </tr>\n\n          <!-- Stats Cards -->\n          <tr>\n            <td style=\"padding: 24px;\">\n              <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\">\n                <tr>\n                  <td width=\"33%\" style=\"padding: 16px; background-color: #f9fafb; border-radius: 6px; text-align: center;\">\n                    <div style=\"font-size: 28px; font-weight: 700; color: #111827; margin-bottom: 4px;\">\n                      ${data.weeklyStats.totalScans}\n                    </div>\n                    <div style=\"font-size: 12px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Scans\n                    </div>\n                  </td>\n                  <td width=\"2%\"></td>\n                  <td width=\"33%\" style=\"padding: 16px; background-color: #f9fafb; border-radius: 6px; text-align: center;\">\n                    <div style=\"font-size: 28px; font-weight: 700; color: #111827; margin-bottom: 4px;\">\n                      ${data.weeklyStats.totalAlerts}\n                    </div>\n                    <div style=\"font-size: 12px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Alerts\n                    </div>\n                  </td>\n                  <td width=\"2%\"></td>\n                  <td width=\"30%\" style=\"padding: 16px; background-color: #f9fafb; border-radius: 6px; text-align: center;\">\n                    <div style=\"font-size: 28px; font-weight: 700; color: #111827; margin-bottom: 4px;\">\n                      ${data.weeklyStats.avgScore}\n                    </div>\n                    <div style=\"font-size: 12px; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Avg Score\n                    </div>\n                  </td>\n                </tr>\n              </table>\n            </td>\n          </tr>\n\n          <!-- Domain Table -->\n          <tr>\n            <td style=\"padding: 0 24px 24px 24px;\">\n              <h2 style=\"margin: 0 0 16px 0; font-size: 18px; font-weight: 600; color: #111827;\">\n                Your Domains\n              </h2>\n              <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" style=\"border: 1px solid #e5e7eb; border-radius: 6px; overflow: hidden;\">\n                <thead>\n                  <tr style=\"background-color: #f9fafb;\">\n                    <th style=\"padding: 12px 8px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Domain\n                    </th>\n                    <th style=\"padding: 12px 8px; text-align: center; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Score\n                    </th>\n                    <th style=\"padding: 12px 8px; text-align: center; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Alerts\n                    </th>\n                    <th style=\"padding: 12px 8px; text-align: left; font-size: 12px; font-weight: 600; color: #6b7280; text-transform: uppercase; letter-spacing: 0.5px;\">\n                      Last Scan\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  ${domainRows}\n                </tbody>\n              </table>\n            </td>\n          </tr>\n\n          <!-- CTA Button -->\n          <tr>\n            <td style=\"padding: 0 24px 32px 24px; text-align: center;\">\n              <a href=\"${process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}/dashboard` : 'https://your-domain.com/dashboard'}\" \n                 style=\"display: inline-block; padding: 12px 32px; background-color: #3b82f6; color: #ffffff; text-decoration: none; border-radius: 6px; font-weight: 600; font-size: 14px;\">\n                View Full Dashboard\n              </a>\n            </td>\n          </tr>\n\n          <!-- Footer -->\n          <tr>\n            <td style=\"padding: 24px; background-color: #f9fafb; text-align: center; border-top: 1px solid #e5e7eb;\">\n              <p style=\"margin: 0; font-size: 12px; color: #9ca3af;\">\n                You're receiving this because you have email deliverability monitoring enabled.\n              </p>\n              <p style=\"margin: 8px 0 0 0; font-size: 12px; color: #9ca3af;\">\n                <a href=\"${process.env.REPLIT_DEV_DOMAIN ? `https://${process.env.REPLIT_DEV_DOMAIN}/settings/alerts` : '#'}\" style=\"color: #3b82f6; text-decoration: none;\">\n                  Manage preferences\n                </a>\n              </p>\n            </td>\n          </tr>\n\n        </table>\n      </td>\n    </tr>\n  </table>\n</body>\n</html>\n  `.trim();\n}\n\nasync function generateWeeklySummaryPDF(digestData: DigestData): Promise<string> {\n  const browser = await chromium.launch({ headless: true });\n  \n  try {\n    const page = await browser.newPage();\n    const html = generateDigestHTML(digestData);\n    \n    await page.setContent(html, { waitUntil: \"networkidle\" });\n    \n    const date = new Date().toISOString().split('T')[0];\n    const fileName = `weekly-summary-${date}.pdf`;\n    const filePath = join(tmpdir(), fileName);\n    \n    await page.pdf({\n      path: filePath,\n      format: \"A4\",\n      margin: {\n        top: \"12mm\",\n        right: \"12mm\",\n        bottom: \"12mm\",\n        left: \"12mm\",\n      },\n      printBackground: true,\n    });\n    \n    return filePath;\n  } finally {\n    await browser.close();\n  }\n}\n\nexport async function sendWeeklyDigest(\n  storage: IStorage,\n  userId: string,\n  digestData: DigestData\n): Promise<void> {\n  const user = await storage.getUser(userId);\n  if (!user) {\n    throw new Error(`User ${userId} not found`);\n  }\n\n  const transporter = nodemailer.createTransport({\n    host: process.env.SMTP_HOST || \"smtp.gmail.com\",\n    port: parseInt(process.env.SMTP_PORT || \"587\"),\n    secure: false,\n    auth: {\n      user: process.env.SMTP_USER,\n      pass: process.env.SMTP_PASS,\n    },\n  });\n\n  const html = generateDigestHTML(digestData);\n  \n  // Generate PDF summary\n  const pdfPath = await generateWeeklySummaryPDF(digestData);\n  const pdfFileName = `weekly-summary-${new Date().toISOString().split('T')[0]}.pdf`;\n\n  try {\n    await transporter.sendMail({\n      from: `\"Deliverability Copilot\" <${process.env.SMTP_USER}>`,\n      to: user.email,\n      subject: `📊 Your Weekly Deliverability Digest`,\n      html,\n      attachments: [\n        {\n          filename: pdfFileName,\n          path: pdfPath,\n        },\n      ],\n    });\n  } finally {\n    // Clean up temp PDF file\n    await unlink(pdfPath).catch(() => {\n      // Ignore cleanup errors\n    });\n  }\n\n  // Log to email_log table\n  await storage.createEmailLog({\n    userId,\n    type: \"weekly_digest\",\n    metaJson: {\n      domainCount: digestData.domains.length,\n      totalScans: digestData.weeklyStats.totalScans,\n      totalAlerts: digestData.weeklyStats.totalAlerts,\n      avgScore: digestData.weeklyStats.avgScore,\n      pdfAttached: true,\n    },\n  });\n}\n","size_bytes":9791},"README.md":{"content":"# Inbox Deliverability Copilot\n\n> **Ensure your emails reach the inbox**, not the spam folder. A comprehensive deliverability monitoring platform helping businesses comply with Gmail, Yahoo, and other bulk-sender requirements.\n\n## Overview\n\nInbox Deliverability Copilot scans DNS records (SPF, DKIM, DMARC, BIMI, MX), lints email templates for spam triggers, and provides a 0-100 deliverability score with actionable insights. Track changes over time, receive alerts when issues arise, and share reports with your team.\n\n### Key Capabilities\n- **Free DNS Scanning** - Instant deliverability checks without signup\n- **Automated Monitoring** - Daily scans with change detection and alerts\n- **Subscription Tiers** - Free, Pro, and Agency plans with Stripe integration\n- **Team Collaboration** - Role-based access control (owner/admin/viewer)\n- **Notifications** - Slack and webhook integrations with per-domain preferences\n- **Audit Logging** - Complete event tracking for compliance\n- **Public Reports** - Shareable scan results with unique links\n- **Branded PDF Exports** - White-label reports (Agency tier)\n- **Admin Analytics** - Platform-wide metrics and event tracking\n\n---\n\n## Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- Stripe account (for subscriptions)\n- SMTP server (for email notifications)\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd inbox-deliverability-copilot\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your actual values\n\n# Run database migrations\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n---\n\n## Configuration\n\nAll configuration is done via environment variables. See `.env.example` for a complete list with detailed comments.\n\n### Critical Environment Variables\n\n| Variable | Purpose | How to Get |\n|----------|---------|------------|\n| `DATABASE_URL` | PostgreSQL connection | Auto-provided by Replit or your hosting provider |\n| `SESSION_SECRET` | Cookie signing secret | Generate: `openssl rand -base64 32` |\n| `STRIPE_SECRET_KEY` | Stripe API key | Stripe Dashboard > Developers > API keys |\n| `STRIPE_WEBHOOK_SECRET` | Webhook verification | Stripe Dashboard > Developers > Webhooks |\n| `SMTP_HOST` | Email server | Your email provider (e.g., smtp.gmail.com) |\n| `SMTP_USER` / `SMTP_PASS` | Email credentials | Your email account or app password |\n| `CRON_SECRET` | Cron job auth | Generate: `openssl rand -hex 32` |\n\n**⚠️ Security Note**: Never commit `.env` to version control. Use `.env.example` as a template.\n\n---\n\n## Features\n\n### Feature Matrix by Tier\n\n| Feature | Free | Pro | Agency |\n|---------|------|-----|--------|\n| **Domains** | 1 | 10 | Unlimited |\n| **DNS Scanning** | ✅ | ✅ | ✅ |\n| **Deliverability Score** | ✅ | ✅ | ✅ |\n| **Scan History** | ✅ | ✅ | ✅ |\n| **Daily Monitoring** | ❌ | ✅ | ✅ |\n| **Slack/Webhook Alerts** | ❌ | ✅ | ✅ |\n| **Weekly Email Digest** | ❌ | ✅ | ✅ |\n| **Teams & Collaboration** | ❌ | ❌ | ✅ |\n| **Branded PDF Exports** | ❌ | ❌ | ✅ |\n| **Admin Metrics Dashboard** | ❌ | ❌ | ✅ |\n\n### Core Features\n\n#### DNS Record Scanning\n- **SPF** - Sender Policy Framework validation\n- **DKIM** - DomainKeys Identified Mail verification\n- **DMARC** - Domain-based Message Authentication, Reporting & Conformance\n- **BIMI** - Brand Indicators for Message Identification\n- **MX** - Mail Exchange record checks\n\n#### Deliverability Scoring\n- 0-100 point system with detailed breakdown\n- Penalties for warnings and failures\n- Historical trend tracking with sparklines\n- Change detection between scans\n\n#### Monitoring & Alerts\n- Automated daily scans at midnight UTC\n- Configurable per-domain alert preferences\n- Severity thresholds (info/warn/fail)\n- Slack and webhook delivery channels\n\n#### Team Collaboration (Agency)\n- Role-based access control (owner/admin/viewer)\n- Shared domain access\n- Audit logging for all actions\n- Team branding (logo + color)\n\n#### Reporting\n- Public shareable links with optional expiration\n- Branded PDF exports with team logo/color (Agency)\n- Weekly email digests with PDF attachments\n- Change history and diff tracking\n\n---\n\n## Architecture\n\n### Tech Stack\n- **Frontend**: React, TypeScript, Vite, TailwindCSS, shadcn/ui\n- **Backend**: Express.js, TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Payments**: Stripe (checkout, subscriptions, webhooks)\n- **Auth**: Passport.js (local strategy)\n- **Email**: Nodemailer with SMTP\n- **PDF Generation**: Playwright\n- **Charts**: Recharts\n\n### Database Schema\n20+ tables including:\n- Core: `users`, `domains`, `reports`\n- Monitoring: `scan_runs`, `scan_records`, `scan_diffs`, `alerts`\n- Enterprise: `teams`, `team_members`, `destinations`, `audit_log`\n- Billing: Stripe integration via user fields\n- Analytics: `app_events`, `email_log`\n\n### Key Services\n- `services/scoring.ts` - Deliverability calculation\n- `services/diffEngine.ts` - Scan comparison\n- `services/scanRunner.ts` - Complete scan workflow\n- `services/notifications.ts` - Slack/webhook delivery\n- `services/pdfExport.ts` - Branded PDF generation\n- `services/analytics.ts` - Event tracking\n\n---\n\n## Deployment\n\n### Development\n\n```bash\n# Start dev server with hot reload\nnpm run dev\n\n# Run database push (sync schema changes)\nnpm run db:push\n\n# View database in Drizzle Studio\nnpm run db:studio\n```\n\n### Production\n\n#### Pre-Deployment Checklist\n1. ✅ Set `NODE_ENV=production` in environment\n2. ✅ Use production Stripe keys (live mode)\n3. ✅ Configure production SMTP credentials\n4. ✅ Generate secure `SESSION_SECRET` (32+ characters)\n5. ✅ Generate secure `CRON_SECRET`\n6. ✅ Point `DATABASE_URL` to production database\n7. ✅ Configure Stripe webhooks to production URL\n8. ✅ Verify email delivery works\n9. ✅ Test cron jobs are running\n\n#### Deployment Steps\n\n```bash\n# 1. Build frontend\nnpm run build\n\n# 2. Push database schema\nnpm run db:push --force\n\n# 3. Start production server\nnpm start\n```\n\n#### Stripe Webhook Configuration\n1. Go to Stripe Dashboard > Developers > Webhooks\n2. Add endpoint: `https://yourdomain.com/api/stripe/webhook`\n3. Select events: `checkout.session.completed`, `customer.subscription.*`\n4. Copy webhook signing secret to `STRIPE_WEBHOOK_SECRET`\n\n#### Cron Job Security\nAutomated jobs (monitoring, weekly digest) require `CRON_SECRET` in headers:\n```\nAuthorization: Bearer <CRON_SECRET>\n```\n\nSet this in your cron scheduling service (e.g., cron-job.org, EasyCron):\n- Daily monitoring: `POST /api/monitoring/run` at 00:00 UTC\n- Weekly digest: `POST /api/weekly-digest/send` on Mondays at 09:00 UTC\n\n---\n\n## Operations\n\n### Monitoring System\n- **Daily Scans**: Automated at midnight UTC for Pro+ users\n- **Change Detection**: Compares scans and categorizes changes\n- **Alert Delivery**: Sends to enabled Slack/webhook destinations\n- **Preference Merging**: Domain settings override user defaults\n\n### Email Digest\n- **Schedule**: Mondays at 9:00 UTC\n- **Content**: Domain summaries with scores and issues\n- **Attachments**: PDF scan reports via Playwright\n- **Logging**: Tracked in `email_log` table\n\n### PDF Export (Agency Only)\n- **Branding**: Team logo and primary color\n- **Generation**: Playwright for high-quality rendering\n- **Access Control**: Plan + team membership validation\n- **Audit Trail**: Events logged to `app_events`\n\n### Analytics Tracking\nEvents tracked:\n- User registration/login\n- Domain add/delete\n- Scan initiation/completion\n- Alert delivery\n- PDF exports\n- Subscription changes\n\nAdmin dashboard shows:\n- Event counts by type\n- 30-day timeline chart\n- User distribution by plan\n- Platform-wide metrics\n\n---\n\n## Troubleshooting\n\n### Authentication Issues\n\n**Problem**: Getting 401 errors or session not persisting\n\n**Solutions**:\n- Verify `SESSION_SECRET` is set in environment\n- Check that cookies are enabled in browser\n- Ensure `NODE_ENV` matches your environment\n- For production, verify domain/SSL configuration\n\n### Stripe Webhook Failures\n\n**Problem**: Webhook events not processing\n\n**Solutions**:\n- Verify `STRIPE_WEBHOOK_SECRET` is correctly set\n- Check webhook URL in Stripe dashboard matches your deployment\n- Test webhook with Stripe CLI: `stripe listen --forward-to localhost:5000/api/stripe/webhook`\n- Check server logs for signature verification errors\n\n### Email Delivery Issues\n\n**Problem**: Emails not sending or timing out\n\n**Solutions**:\n- Verify SMTP credentials (`SMTP_USER`, `SMTP_PASS`)\n- Check SMTP port (587 for TLS, 465 for SSL)\n- For Gmail: use App Password, not regular password\n- Enable \"Less secure apps\" or 2FA + App Password\n- Check firewall rules allow outbound SMTP traffic\n\n### Cron Jobs Not Running\n\n**Problem**: Monitoring or digest emails not triggering\n\n**Solutions**:\n- Verify `CRON_SECRET` matches in environment and cron service\n- Check cron schedule is correct (UTC timezone)\n- Manually test endpoint: `curl -X POST -H \"Authorization: Bearer YOUR_CRON_SECRET\" https://yourdomain.com/api/monitoring/run`\n- Check server logs for cron execution\n\n### PDF Export Failures\n\n**Problem**: PDF downloads fail or timeout (Agency tier)\n\n**Solutions**:\n- Ensure Playwright dependencies installed: `npx playwright install chromium`\n- For Replit: Chromium auto-installed, check available disk space\n- Verify team has `brandLogo` or `brandColor` configured\n- Check server memory limits (PDF generation is memory-intensive)\n- Review logs for Playwright browser launch errors\n\n### Database Migration Errors\n\n**Problem**: Schema changes fail to apply\n\n**Solutions**:\n- Use `npm run db:push --force` to force schema sync\n- **Never** manually alter ID column types (serial ↔ varchar)\n- Check `DATABASE_URL` is correct and accessible\n- Verify database user has CREATE/ALTER permissions\n- Backup before major schema changes\n\n### High Memory Usage\n\n**Problem**: Server runs out of memory\n\n**Solutions**:\n- PDF generation is memory-intensive - consider queue system for high volume\n- Check for memory leaks in monitoring cron (should release resources after run)\n- Increase server memory allocation\n- Monitor `app_events` table growth, archive old events if needed\n\n---\n\n## Additional Resources\n\n### Documentation\n- [Stripe API Docs](https://stripe.com/docs/api)\n- [Drizzle ORM Docs](https://orm.drizzle.team/)\n- [Playwright Docs](https://playwright.dev/)\n\n### Development Commands\n\n```bash\n# Database\nnpm run db:push          # Sync schema to database\nnpm run db:push --force  # Force sync (use for conflicts)\nnpm run db:studio        # Open Drizzle Studio\n\n# Development\nnpm run dev              # Start dev server with HMR\n\n# Production\nnpm run build            # Build frontend\nnpm start                # Start production server\n```\n\n### Support\n\nFor issues not covered in this guide:\n1. Check server logs for detailed error messages\n2. Review `.env.example` for configuration requirements\n3. Verify all prerequisites are installed and configured\n4. Test individual components (database, SMTP, Stripe) separately\n\n---\n\n## License\n\n[Your License Here]\n\n## Contributing\n\n[Your Contributing Guidelines Here]\n","size_bytes":11158},"client/src/pages/settings/billing-tab.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Loader2, CreditCard, Crown, ExternalLink } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\n\nexport default function BillingTab() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: planData, isLoading: planLoading } = useQuery<{ \n    plan: string; \n    features: Record<string, boolean> \n  }>({\n    queryKey: [\"/api/billing/plan\"],\n  });\n\n  const createPortalSessionMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/portal/create-session\");\n      return await res.json();\n    },\n    onSuccess: (data: { url: string }) => {\n      window.open(data.url, \"_blank\");\n      toast({\n        title: \"Opening Billing Portal\",\n        description: \"You'll be redirected to manage your subscription.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Open Portal\",\n        description: error.message || \"Unable to access billing portal. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (planLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const plan = planData?.plan || \"free\";\n  const isPaidUser = plan === \"pro\" || plan === \"agency\";\n\n  // Free plan: show upgrade banner\n  if (!isPaidUser) {\n    return (\n      <Card className=\"border-primary/20 bg-gradient-to-br from-primary/5 to-primary/10\" data-testid=\"card-upgrade-banner\">\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Crown className=\"h-8 w-8 text-primary\" />\n            <div>\n              <CardTitle className=\"text-2xl\">Upgrade to Pro or Agency</CardTitle>\n              <CardDescription className=\"text-base mt-1\">\n                Unlock advanced features like teams, unlimited domains, and priority support\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div className=\"grid gap-3\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-1.5 w-1.5 rounded-full bg-primary\" />\n                <span className=\"text-sm\">Unlimited domain monitoring</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-1.5 w-1.5 rounded-full bg-primary\" />\n                <span className=\"text-sm\">Team collaboration & access control</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-1.5 w-1.5 rounded-full bg-primary\" />\n                <span className=\"text-sm\">Slack & webhook notifications</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-1.5 w-1.5 rounded-full bg-primary\" />\n                <span className=\"text-sm\">White-label PDF reports (Agency)</span>\n              </div>\n            </div>\n            <Button \n              size=\"lg\" \n              className=\"w-full sm:w-auto\"\n              onClick={() => setLocation(\"/pricing\")}\n              data-testid=\"button-view-pricing\"\n            >\n              View Pricing & Plans\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Pro/Agency plan: show billing portal access\n  return (\n    <div className=\"space-y-6\">\n      <Card data-testid=\"card-current-plan\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                Current Plan\n                <Badge variant={plan === \"agency\" ? \"default\" : \"secondary\"} className=\"ml-2\">\n                  {plan === \"agency\" ? \"Agency\" : \"Pro\"}\n                </Badge>\n              </CardTitle>\n              <CardDescription className=\"mt-1\">\n                You're subscribed to the {plan === \"agency\" ? \"Agency\" : \"Pro\"} plan\n              </CardDescription>\n            </div>\n            <CreditCard className=\"h-8 w-8 text-muted-foreground\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-muted-foreground mb-4\">\n            Manage your subscription, update payment methods, view invoices, and download receipts through the Stripe billing portal.\n          </p>\n          <Button\n            onClick={() => createPortalSessionMutation.mutate()}\n            disabled={createPortalSessionMutation.isPending}\n            data-testid=\"button-manage-billing\"\n          >\n            {createPortalSessionMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Opening...\n              </>\n            ) : (\n              <>\n                Manage Billing & Invoices\n                <ExternalLink className=\"ml-2 h-4 w-4\" />\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"card-billing-info\">\n        <CardHeader>\n          <CardTitle>What you can do in the billing portal</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <ul className=\"space-y-2 text-sm text-muted-foreground\">\n            <li className=\"flex items-start gap-2\">\n              <div className=\"h-1.5 w-1.5 rounded-full bg-primary mt-1.5\" />\n              <span>Update payment method and billing information</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <div className=\"h-1.5 w-1.5 rounded-full bg-primary mt-1.5\" />\n              <span>View payment history and download invoices</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <div className=\"h-1.5 w-1.5 rounded-full bg-primary mt-1.5\" />\n              <span>Manage subscription (upgrade, downgrade, or cancel)</span>\n            </li>\n            <li className=\"flex items-start gap-2\">\n              <div className=\"h-1.5 w-1.5 rounded-full bg-primary mt-1.5\" />\n              <span>Update billing email and contact information</span>\n            </li>\n          </ul>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6600},"client/src/components/UsageWidget.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { AlertCircle, Database, Activity } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface UsageData {\n  plan: string;\n  domains: {\n    current: number;\n    limit: number;\n    percentage: number;\n  };\n  alerts: {\n    last30Days: number;\n  };\n  scans: {\n    last30Days: number;\n  };\n}\n\nexport default function UsageWidget() {\n  const { data: usage, isLoading } = useQuery<UsageData>({\n    queryKey: [\"/api/user/usage\"],\n    staleTime: 30000, // 30 seconds\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"mb-6\" data-testid=\"card-usage-widget\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between gap-6\">\n            <div className=\"flex-1\">\n              <Skeleton className=\"h-4 w-64 mb-2\" />\n              <Skeleton className=\"h-2 w-full max-w-md\" />\n            </div>\n            <div className=\"flex gap-6\">\n              <Skeleton className=\"h-12 w-20\" />\n              <Skeleton className=\"h-12 w-20\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!usage) return null;\n\n  const isUnlimited = usage.domains.limit === -1;\n  const isNearLimit = usage.domains.percentage >= 80 && !isUnlimited;\n\n  return (\n    <Card className=\"mb-6\" data-testid=\"card-usage-widget\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between gap-6\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              <Database className=\"h-4 w-4 text-muted-foreground\" />\n              <p className=\"text-sm font-medium\" data-testid=\"text-domain-usage\">\n                {isUnlimited ? (\n                  <>\n                    <span className=\"text-foreground\">{usage.domains.current}</span>\n                    <span className=\"text-muted-foreground\"> domains</span>\n                    <span className=\"text-muted-foreground ml-2\">(unlimited)</span>\n                  </>\n                ) : (\n                  <>\n                    <span className=\"text-foreground\">{usage.domains.current}</span>\n                    <span className=\"text-muted-foreground\"> of </span>\n                    <span className=\"text-foreground\">{usage.domains.limit}</span>\n                    <span className=\"text-muted-foreground\"> domains used</span>\n                  </>\n                )}\n              </p>\n              {isNearLimit && (\n                <AlertCircle className=\"h-4 w-4 text-amber-500\" data-testid=\"icon-near-limit\" />\n              )}\n            </div>\n            {!isUnlimited && (\n              <Progress\n                value={usage.domains.percentage}\n                className=\"h-2\"\n                data-testid=\"progress-domain-usage\"\n              />\n            )}\n          </div>\n\n          <div className=\"flex gap-6 items-center\">\n            <div className=\"text-center\" data-testid=\"stat-alerts\">\n              <div className=\"flex items-center gap-1.5 mb-1\">\n                <AlertCircle className=\"h-3.5 w-3.5 text-muted-foreground\" />\n                <p className=\"text-xs text-muted-foreground\">Alerts</p>\n              </div>\n              <p className=\"text-lg font-semibold\" data-testid=\"text-alert-count\">\n                {usage.alerts.last30Days}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">30 days</p>\n            </div>\n\n            <div className=\"text-center\" data-testid=\"stat-scans\">\n              <div className=\"flex items-center gap-1.5 mb-1\">\n                <Activity className=\"h-3.5 w-3.5 text-muted-foreground\" />\n                <p className=\"text-xs text-muted-foreground\">Scans</p>\n              </div>\n              <p className=\"text-lg font-semibold\" data-testid=\"text-scan-count\">\n                {usage.scans.last30Days}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">30 days</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4165},"client/src/lib/sanitize.ts":{"content":"/**\n * Sanitizes user-supplied strings to prevent XSS attacks\n * Escapes HTML special characters\n */\nexport function sanitize(str: string | null | undefined): string {\n  if (!str) return '';\n  \n  return String(str)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/\\//g, '&#x2F;');\n}\n\n/**\n * Sanitizes domain names - allows alphanumeric, dots, hyphens\n * Removes any potentially malicious characters\n */\nexport function sanitizeDomain(domain: string | null | undefined): string {\n  if (!domain) return '';\n  \n  // Only allow alphanumeric, dots, and hyphens (valid domain characters)\n  return String(domain).replace(/[^a-zA-Z0-9.-]/g, '');\n}\n","size_bytes":745},"server/services/analytics.ts":{"content":"import { IStorage } from \"../storage\";\n\nexport enum AppEventType {\n  USER_REGISTERED = \"user_registered\",\n  USER_LOGIN = \"user_login\",\n  DOMAIN_ADDED = \"domain_added\",\n  DOMAIN_DELETED = \"domain_deleted\",\n  SCAN_INITIATED = \"scan_initiated\",\n  SCAN_COMPLETED = \"scan_completed\",\n  ALERT_SENT = \"alert_sent\",\n  PDF_EXPORTED = \"pdf_exported\",\n  SUBSCRIPTION_UPGRADED = \"subscription_upgraded\",\n  SUBSCRIPTION_DOWNGRADED = \"subscription_downgraded\",\n  WEEKLY_DIGEST_SENT = \"weekly_digest_sent\",\n  PUBLIC_REPORT_CREATED = \"public_report_created\",\n}\n\nexport async function trackEvent(\n  storage: IStorage,\n  event: AppEventType,\n  userId?: string,\n  metadata?: Record<string, any>\n): Promise<void> {\n  try {\n    await storage.createAppEvent({\n      userId: userId || null,\n      event,\n      metaJson: metadata || {},\n    });\n  } catch (error) {\n    // Silent failure - analytics shouldn't break app functionality\n    console.error(`[analytics] Failed to track event ${event}:`, error);\n  }\n}\n","size_bytes":988}},"version":2}